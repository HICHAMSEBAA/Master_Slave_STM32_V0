
Master_NRF24L01_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  08008290  08008290  00018290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b7c  08008b7c  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b84  08008b84  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b84  08008b84  00018b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b88  08008b88  00018b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08008b8c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000228  08008db0  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08008db0  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff89  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc2  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00032de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcf  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238af  00000000  00000000  00034907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001344f  00000000  00000000  000581b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf647  00000000  00000000  0006b605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005058  00000000  00000000  0013ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013fca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008278 	.word	0x08008278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08008278 	.word	0x08008278

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a36      	ldr	r2, [pc, #216]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b34      	ldr	r3, [pc, #208]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <MX_GPIO_Init+0x114>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	4823      	ldr	r0, [pc, #140]	; (8000ffc <MX_GPIO_Init+0x118>)
 8000f70:	f000 fff2 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2130      	movs	r1, #48	; 0x30
 8000f78:	4821      	ldr	r0, [pc, #132]	; (8001000 <MX_GPIO_Init+0x11c>)
 8000f7a:	f000 ffed 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	481b      	ldr	r0, [pc, #108]	; (8001004 <MX_GPIO_Init+0x120>)
 8000f96:	f000 fe4b 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4812      	ldr	r0, [pc, #72]	; (8000ffc <MX_GPIO_Init+0x118>)
 8000fb2:	f000 fe3d 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_GPIO_Init+0x11c>)
 8000fce:	f000 fe2f 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000fd2:	2330      	movs	r3, #48	; 0x30
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_GPIO_Init+0x11c>)
 8000fea:	f000 fe21 	bl	8001c30 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800

08001008 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x50>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <MX_I2C1_Init+0x54>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x50>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_I2C1_Init+0x58>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_I2C1_Init+0x50>)
 8001026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_I2C1_Init+0x50>)
 8001046:	f000 ffa1 	bl	8001f8c <HAL_I2C_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001050:	f000 f9b6 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000244 	.word	0x20000244
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <HAL_I2C_MspInit+0x84>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12c      	bne.n	80010e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <HAL_I2C_MspInit+0x88>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_I2C_MspInit+0x88>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_I2C_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a8:	2312      	movs	r3, #18
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b4:	2304      	movs	r3, #4
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <HAL_I2C_MspInit+0x8c>)
 80010c0:	f000 fdb6 	bl	8001c30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_I2C_MspInit+0x88>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_I2C_MspInit+0x88>)
 80010ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_I2C_MspInit+0x88>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400

080010f4 <Tx_Mode>:


int count = 0;

// Function to configure NRF24 module for transmit mode without acknowledgment
void Tx_Mode(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	// Print information about entering transmit mode without acknowledgment
//	printf("________________________Tx Mode________________________ \n\r");

	// Stop listening for incoming data
	NRF24_stopListening();
 80010f8:	f003 fb5e 	bl	80047b8 <NRF24_stopListening>

	// Set writing pipe address to TxpipeAddrs
	NRF24_openWritingPipe(TxpipeAddrs);
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <Tx_Mode+0x40>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f003 fbd7 	bl	80048b8 <NRF24_openWritingPipe>

	// Enable auto acknowledgment
	NRF24_setAutoAck(true);
 800110a:	2001      	movs	r0, #1
 800110c:	f003 fd1a 	bl	8004b44 <NRF24_setAutoAck>

	// Set channel to 52
	NRF24_setChannel(52);
 8001110:	2034      	movs	r0, #52	; 0x34
 8001112:	f003 fc5e 	bl	80049d2 <NRF24_setChannel>

	// Set payload size to 32 bytes
	NRF24_setPayloadSize(32);
 8001116:	2020      	movs	r0, #32
 8001118:	f003 fc70 	bl	80049fc <NRF24_setPayloadSize>

	// Enable dynamic payloads
	NRF24_enableDynamicPayloads();
 800111c:	f003 fcc8 	bl	8004ab0 <NRF24_enableDynamicPayloads>

	// Enable acknowledgment payloads
	NRF24_enableAckPayload();
 8001120:	f003 fc98 	bl	8004a54 <NRF24_enableAckPayload>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2120      	movs	r1, #32
 8001128:	4803      	ldr	r0, [pc, #12]	; (8001138 <Tx_Mode+0x44>)
 800112a:	f000 ff15 	bl	8001f58 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000
 8001138:	40020000 	.word	0x40020000

0800113c <Send_Data>:
 * Function: Send_Data
 * Description: Sends data using NRF24 module and waits for acknowledgment from Node 1.
 * Parameters: None
 * Returns: bool - Indicates whether data was sent successfully or not
 */
bool Send_Data(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b096      	sub	sp, #88	; 0x58
 8001140:	af00      	add	r7, sp, #0
	// Variable to track the status of data transmission
	bool send_stat = false;
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	// Attempt to write data to NRF24 module
	if (NRF24_write(myTxData, 32)) {
 8001148:	2120      	movs	r1, #32
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <Send_Data+0x50>)
 800114c:	f003 fb40 	bl	80047d0 <NRF24_write>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d011      	beq.n	800117a <Send_Data+0x3e>
		// If data is successfully written, read acknowledgment payload
		NRF24_read(AckPayload, 32);
 8001156:	2120      	movs	r1, #32
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <Send_Data+0x54>)
 800115a:	f003 fb8d 	bl	8004878 <NRF24_read>
		char myDataack[80];
		sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <Send_Data+0x54>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <Send_Data+0x58>)
 8001164:	4618      	mov	r0, r3
 8001166:	f004 ff29 	bl	8005fbc <siprintf>
		printf("%s \r\n", myDataack);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <Send_Data+0x5c>)
 8001170:	f004 feb6 	bl	8005ee0 <iprintf>
		send_stat = true;
 8001174:	2301      	movs	r3, #1
 8001176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		// 	send_stat = false;
		// }
	}

	// Delay before returning to avoid immediate retries
	HAL_Delay(50);
 800117a:	2032      	movs	r0, #50	; 0x32
 800117c:	f000 fc00 	bl	8001980 <HAL_Delay>

	// Return the status of data transmission
	return send_stat;
 8001180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001184:	4618      	mov	r0, r3
 8001186:	3758      	adds	r7, #88	; 0x58
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000010 	.word	0x20000010
 8001190:	20000298 	.word	0x20000298
 8001194:	08008290 	.word	0x08008290
 8001198:	080082a4 	.word	0x080082a4

0800119c <Rx_Mode>:

// Function to configure NRF24 module for receiving mode without acknowledgment
void Rx_Mode(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	// Print information about changing settings to receiver mode with acknowledgment
	//printf("________________________Rx Mode________________________ \n\r");

	// Enable auto acknowledgment
	NRF24_setAutoAck(true);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f003 fccf 	bl	8004b44 <NRF24_setAutoAck>

	// Set channel to 52
	NRF24_setChannel(52);
 80011a6:	2034      	movs	r0, #52	; 0x34
 80011a8:	f003 fc13 	bl	80049d2 <NRF24_setChannel>

	// Set payload size to 32 bytes
	NRF24_setPayloadSize(32);
 80011ac:	2020      	movs	r0, #32
 80011ae:	f003 fc25 	bl	80049fc <NRF24_setPayloadSize>

	// Open reading pipe with address RxpipeAddrs
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <Rx_Mode+0x3c>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	2001      	movs	r0, #1
 80011ba:	f003 fba1 	bl	8004900 <NRF24_openReadingPipe>

	// Enable dynamic payloads
	NRF24_enableDynamicPayloads();
 80011be:	f003 fc77 	bl	8004ab0 <NRF24_enableDynamicPayloads>

	// Enable acknowledgment payloads
	NRF24_enableAckPayload();
 80011c2:	f003 fc47 	bl	8004a54 <NRF24_enableAckPayload>

	// Start listening for incoming data
	NRF24_startListening();
 80011c6:	f003 fad1 	bl	800476c <NRF24_startListening>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2120      	movs	r1, #32
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <Rx_Mode+0x40>)
 80011d0:	f000 fec2 	bl	8001f58 <HAL_GPIO_WritePin>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000008 	.word	0x20000008
 80011dc:	40020000 	.word	0x40020000

080011e0 <Receive_Data>:
 * Function: Receive_Data
 * Description: Receives data from Node 1 using NRF24 module.
 * Parameters: None
 * Returns: bool - Indicates whether data was received successfully or not
 */
bool Receive_Data(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	// Variable to track the status of data reception
	bool receive_stat = false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	71fb      	strb	r3, [r7, #7]

	// Check if there is data available to read
	if (NRF24_available()) {
 80011ea:	f003 fb3d 	bl	8004868 <NRF24_available>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d016      	beq.n	8001222 <Receive_Data+0x42>
		// Read data from NRF24 module
		NRF24_read(myRxData, 32);
 80011f4:	2120      	movs	r1, #32
 80011f6:	480f      	ldr	r0, [pc, #60]	; (8001234 <Receive_Data+0x54>)
 80011f8:	f003 fb3e 	bl	8004878 <NRF24_read>

		// Send acknowledgment payload to Node 1
		NRF24_writeAckPayload(1, myAckPayload, 32);
 80011fc:	2220      	movs	r2, #32
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <Receive_Data+0x58>)
 8001200:	2001      	movs	r0, #1
 8001202:	f003 fdc9 	bl	8004d98 <NRF24_writeAckPayload>

		count++;
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <Receive_Data+0x5c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <Receive_Data+0x5c>)
 800120e:	6013      	str	r3, [r2, #0]
		// Print the received data
		printf("%s : %d\r\n", myRxData, count);
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <Receive_Data+0x5c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4907      	ldr	r1, [pc, #28]	; (8001234 <Receive_Data+0x54>)
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <Receive_Data+0x60>)
 800121a:	f004 fe61 	bl	8005ee0 <iprintf>

		// Set receive_stat to true to indicate successful data reception
		receive_stat = true;
 800121e:	2301      	movs	r3, #1
 8001220:	71fb      	strb	r3, [r7, #7]
	}

	// Delay for 10 milliseconds before returning to avoid immediate retries
	HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f000 fbac 	bl	8001980 <HAL_Delay>

	// Return the status of data reception
	return receive_stat;
 8001228:	79fb      	ldrb	r3, [r7, #7]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002b8 	.word	0x200002b8
 8001238:	20000030 	.word	0x20000030
 800123c:	200002d8 	.word	0x200002d8
 8001240:	080082ac 	.word	0x080082ac

08001244 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800124a:	f000 fb27 	bl	800189c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800124e:	f000 f845 	bl	80012dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001252:	f7ff fe47 	bl	8000ee4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001256:	f000 fa73 	bl	8001740 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800125a:	f7ff fed5 	bl	8001008 <MX_I2C1_Init>
	MX_SPI2_Init();
 800125e:	f000 f8b5 	bl	80013cc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	// Initialize NRF24 module
	NRF24_Init();
 8001262:	f003 fa5e 	bl	8004722 <NRF24_Init>

	// Print information about entering transmit mode without acknowledgment
	printf("//**** TRANSMIT - ACK ****//   \n\r");
 8001266:	481b      	ldr	r0, [pc, #108]	; (80012d4 <main+0x90>)
 8001268:	f004 fe3a 	bl	8005ee0 <iprintf>
	printf(
 800126c:	481a      	ldr	r0, [pc, #104]	; (80012d8 <main+0x94>)
 800126e:	f004 fe37 	bl	8005ee0 <iprintf>
			"________________________After change Setting________________________ \n\r");

	// Configure NRF24 module for transmit mode without acknowledgment
	Tx_Mode();
 8001272:	f7ff ff3f 	bl	80010f4 <Tx_Mode>

	// Print current radio settings
	printRadioSettings();
 8001276:	f003 fe0f 	bl	8004e98 <printRadioSettings>
		 *              receive mode to listen for acknowledgment from Node 1. If the acknowledgment
		 *              is received successfully, it switches back to transmit mode.
		 */

		// Check if data transmission was successful
		if (Send_Data()) {
 800127a:	f7ff ff5f 	bl	800113c <Send_Data>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <main+0x86>
		    // Switch NRF24 module to receive mode
		    Rx_Mode();
 8001284:	f7ff ff8a 	bl	800119c <Rx_Mode>

		    // Print a message indicating that receive mode is activated
		    //printf("Rx Mode is Activated\r\n");

		    // Loop indefinitely until acknowledgment is received or a timeout occurs
		    int coun = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
		    while (coun < 5) {
 800128c:	e019      	b.n	80012c2 <main+0x7e>
				coun++;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3301      	adds	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
		        // Check if data is received successfully
		        if (Receive_Data()) {
 8001294:	f7ff ffa4 	bl	80011e0 <Receive_Data>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d009      	beq.n	80012b2 <main+0x6e>
		            // Switch NRF24 module back to transmit mode
		            Tx_Mode();
 800129e:	f7ff ff29 	bl	80010f4 <Tx_Mode>

		           coun++; // Print a message indicating that transmit mode is activated
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3301      	adds	r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
//		            printf("Tx Mode is Activated\r\n");

		            // Delay for 1000 milliseconds before breaking out of the loop
		            HAL_Delay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f000 fb68 	bl	8001980 <HAL_Delay>

		            // Exit the loop
		            break;
 80012b0:	e00f      	b.n	80012d2 <main+0x8e>
		        }else if (coun == 5)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d101      	bne.n	80012bc <main+0x78>
				{
		        	// Switch NRF24 module back to transmit mode
					Tx_Mode();
 80012b8:	f7ff ff1c 	bl	80010f4 <Tx_Mode>
				}
				
		        // If data reception fails, wait for a short period before retrying
		        HAL_Delay(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 fb5f 	bl	8001980 <HAL_Delay>
		    while (coun < 5) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	dde2      	ble.n	800128e <main+0x4a>
 80012c8:	e7d7      	b.n	800127a <main+0x36>
		} else {
		    // If data transmission fails, print a failure message
//		    printf("The data request Failed\r\n");

		    // Delay for 1000 milliseconds before continuing
		    HAL_Delay(500);
 80012ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ce:	f000 fb57 	bl	8001980 <HAL_Delay>
		if (Send_Data()) {
 80012d2:	e7d2      	b.n	800127a <main+0x36>
 80012d4:	080082b8 	.word	0x080082b8
 80012d8:	080082dc 	.word	0x080082dc

080012dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	; 0x50
 80012e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2234      	movs	r2, #52	; 0x34
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f004 ff5e 	bl	80061ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <SystemClock_Config+0xdc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a2b      	ldr	r2, [pc, #172]	; (80013b8 <SystemClock_Config+0xdc>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <SystemClock_Config+0xdc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <SystemClock_Config+0xe0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <SystemClock_Config+0xe0>)
 8001326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <SystemClock_Config+0xe0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001338:	2302      	movs	r3, #2
 800133a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800134c:	2308      	movs	r3, #8
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001350:	23b4      	movs	r3, #180	; 0xb4
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4618      	mov	r0, r3
 8001366:	f001 faef 	bl	8002948 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x98>
		Error_Handler();
 8001370:	f000 f826 	bl	80013c0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001374:	f000 ff4e 	bl	8002214 <HAL_PWREx_EnableOverDrive>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xa6>
		Error_Handler();
 800137e:	f000 f81f 	bl	80013c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2302      	movs	r3, #2
 8001388:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800138e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001392:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2105      	movs	r1, #5
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 ff87 	bl	80022b4 <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xd4>
		Error_Handler();
 80013ac:	f000 f808 	bl	80013c0 <Error_Handler>
	}
}
 80013b0:	bf00      	nop
 80013b2:	3750      	adds	r7, #80	; 0x50
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013c8:	e7fe      	b.n	80013c8 <Error_Handler+0x8>
	...

080013cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_SPI2_Init+0x64>)
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <MX_SPI2_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_SPI2_Init+0x64>)
 80013d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_SPI2_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_SPI2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_SPI2_Init+0x64>)
 80013f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_SPI2_Init+0x64>)
 8001400:	2210      	movs	r2, #16
 8001402:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_SPI2_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_SPI2_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_SPI2_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_SPI2_Init+0x64>)
 8001418:	220a      	movs	r2, #10
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_SPI2_Init+0x64>)
 800141e:	f001 fd31 	bl	8002e84 <HAL_SPI_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001428:	f7ff ffca 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002dc 	.word	0x200002dc
 8001434:	40003800 	.word	0x40003800

08001438 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_SPI_MspInit+0x94>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d134      	bne.n	80014c4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001492:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a4:	2305      	movs	r3, #5
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <HAL_SPI_MspInit+0x9c>)
 80014b0:	f000 fbbe 	bl	8001c30 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2024      	movs	r0, #36	; 0x24
 80014ba:	f000 fb60 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014be:	2024      	movs	r0, #36	; 0x24
 80014c0:	f000 fb79 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40003800 	.word	0x40003800
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020400 	.word	0x40020400

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_MspInit+0x4c>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x4c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001516:	2007      	movs	r0, #7
 8001518:	f000 fb26 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 f9e4 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <SPI2_IRQHandler+0x10>)
 8001582:	f002 f913 	bl	80037ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200002dc 	.word	0x200002dc

08001590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_kill>:

int _kill(int pid, int sig)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015aa:	f004 fe51 	bl	8006250 <__errno>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2216      	movs	r2, #22
 80015b2:	601a      	str	r2, [r3, #0]
  return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_exit>:

void _exit (int status)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe7 	bl	80015a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d2:	e7fe      	b.n	80015d2 <_exit+0x12>

080015d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e00a      	b.n	80015fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e6:	f3af 8000 	nop.w
 80015ea:	4601      	mov	r1, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf0      	blt.n	80015e6 <_read+0x12>
  }

  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e009      	b.n	8001634 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f8fb 	bl	8001824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf1      	blt.n	8001620 <_write+0x12>
  }
  return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_close>:

int _close(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166e:	605a      	str	r2, [r3, #4]
  return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_isatty>:

int _isatty(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f004 fdb6 	bl	8006250 <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20020000 	.word	0x20020000
 8001710:	00000400 	.word	0x00000400
 8001714:	20000334 	.word	0x20000334
 8001718:	200004e8 	.word	0x200004e8

0800171c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_USART2_UART_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART2_UART_Init+0x4c>)
 8001778:	f002 fa6c 	bl	8003c54 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001782:	f7ff fe1d 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000338 	.word	0x20000338
 8001790:	40004400 	.word	0x40004400

08001794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12b      	bne.n	800180e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_UART_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_UART_MspInit+0x88>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_UART_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_UART_MspInit+0x88>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_UART_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ee:	230c      	movs	r3, #12
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_UART_MspInit+0x8c>)
 800180a:	f000 fa11 	bl	8001c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40004400 	.word	0x40004400
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000

08001824 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800182c:	1d39      	adds	r1, r7, #4
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	2201      	movs	r2, #1
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <__io_putchar+0x20>)
 8001836:	f002 fa5d 	bl	8003cf4 <HAL_UART_Transmit>
	return ch;
 800183a:	687b      	ldr	r3, [r7, #4]

}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000338 	.word	0x20000338

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800184c:	f7ff ff66 	bl	800171c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001876:	f004 fcf1 	bl	800625c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff fce3 	bl	8001244 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800188c:	08008b8c 	.word	0x08008b8c
  ldr r2, =_sbss
 8001890:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001894:	200004e4 	.word	0x200004e4

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f94f 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fe02 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f967 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f000 f92f 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000050 	.word	0x20000050
 8001938:	20000058 	.word	0x20000058
 800193c:	20000054 	.word	0x20000054

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000058 	.word	0x20000058
 8001964:	20000380 	.word	0x20000380

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000380 	.word	0x20000380

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000058 	.word	0x20000058

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e00c      	b.n	8001c22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2205      	movs	r2, #5
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e165      	b.n	8001f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	f040 8154 	bne.w	8001f12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d005      	beq.n	8001c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d130      	bne.n	8001ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0201 	and.w	r2, r3, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d017      	beq.n	8001d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d123      	bne.n	8001d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	220f      	movs	r2, #15
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3208      	adds	r2, #8
 8001d6e:	69b9      	ldr	r1, [r7, #24]
 8001d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0203 	and.w	r2, r3, #3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80ae 	beq.w	8001f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b5a      	ldr	r3, [pc, #360]	; (8001f30 <HAL_GPIO_Init+0x300>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	4a58      	ldr	r2, [pc, #352]	; (8001f34 <HAL_GPIO_Init+0x304>)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3302      	adds	r3, #2
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <HAL_GPIO_Init+0x308>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x21a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <HAL_GPIO_Init+0x30c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x216>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_GPIO_Init+0x310>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x212>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_GPIO_Init+0x314>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x20e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_GPIO_Init+0x318>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x20a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <HAL_GPIO_Init+0x31c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x206>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a49      	ldr	r2, [pc, #292]	; (8001f50 <HAL_GPIO_Init+0x320>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x202>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x21c>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_GPIO_Init+0x304>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e94:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee2:	4a1c      	ldr	r2, [pc, #112]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_GPIO_Init+0x324>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae96 	bls.w	8001c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40021400 	.word	0x40021400
 8001f50:	40021800 	.word	0x40021800
 8001f54:	40013c00 	.word	0x40013c00

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e12b      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff f856 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f000 fa52 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a81      	ldr	r2, [pc, #516]	; (8002200 <HAL_I2C_Init+0x274>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d807      	bhi.n	8002010 <HAL_I2C_Init+0x84>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a80      	ldr	r2, [pc, #512]	; (8002204 <HAL_I2C_Init+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e006      	b.n	800201e <HAL_I2C_Init+0x92>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a7d      	ldr	r2, [pc, #500]	; (8002208 <HAL_I2C_Init+0x27c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0e7      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a78      	ldr	r2, [pc, #480]	; (800220c <HAL_I2C_Init+0x280>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_I2C_Init+0x274>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d802      	bhi.n	8002060 <HAL_I2C_Init+0xd4>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	e009      	b.n	8002074 <HAL_I2C_Init+0xe8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_I2C_Init+0x284>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	3301      	adds	r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002086:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	495c      	ldr	r1, [pc, #368]	; (8002200 <HAL_I2C_Init+0x274>)
 8002090:	428b      	cmp	r3, r1
 8002092:	d819      	bhi.n	80020c8 <HAL_I2C_Init+0x13c>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e59      	subs	r1, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020a8:	400b      	ands	r3, r1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_I2C_Init+0x138>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	e051      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e04f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_I2C_Init+0x168>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_I2C_Init+0x18e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x196>
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_I2C_Init+0x1bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e58      	subs	r0, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	fbb0 f3f3 	udiv	r3, r0, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6911      	ldr	r1, [r2, #16]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	000186a0 	.word	0x000186a0
 8002204:	001e847f 	.word	0x001e847f
 8002208:	003d08ff 	.word	0x003d08ff
 800220c:	431bde83 	.word	0x431bde83
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7ff fb92 	bl	8001968 <HAL_GetTick>
 8002244:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002246:	e009      	b.n	800225c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002248:	f7ff fb8e 	bl	8001968 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002256:	d901      	bls.n	800225c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e01f      	b.n	800229c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_PWREx_EnableOverDrive+0x98>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d1ee      	bne.n	8002248 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7ff fb7a 	bl	8001968 <HAL_GetTick>
 8002274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002276:	e009      	b.n	800228c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002278:	f7ff fb76 	bl	8001968 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002286:	d901      	bls.n	800228c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e007      	b.n	800229c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_PWREx_EnableOverDrive+0x98>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002298:	d1ee      	bne.n	8002278 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	420e0040 	.word	0x420e0040
 80022ac:	40007000 	.word	0x40007000
 80022b0:	420e0044 	.word	0x420e0044

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0cc      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d044      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d119      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d003      	beq.n	8002372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e067      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7ff fae0 	bl	8001968 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7ff fadc 	bl	8001968 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d20c      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f855 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa40 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00
 8002470:	40023800 	.word	0x40023800
 8002474:	080087e8 	.word	0x080087e8
 8002478:	20000050 	.word	0x20000050
 800247c:	20000054 	.word	0x20000054

08002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_RCC_GetHCLKFreq+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000050 	.word	0x20000050

08002498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800249c:	f7ff fff0 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0a9b      	lsrs	r3, r3, #10
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4903      	ldr	r1, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	080087f8 	.word	0x080087f8

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c4:	f7ff ffdc 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0b5b      	lsrs	r3, r3, #13
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	080087f8 	.word	0x080087f8

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b0ae      	sub	sp, #184	; 0xb8
 80024ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250e:	4bcb      	ldr	r3, [pc, #812]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b0c      	cmp	r3, #12
 8002518:	f200 8206 	bhi.w	8002928 <HAL_RCC_GetSysClockFreq+0x440>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_RCC_GetSysClockFreq+0x3c>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002559 	.word	0x08002559
 8002528:	08002929 	.word	0x08002929
 800252c:	08002929 	.word	0x08002929
 8002530:	08002929 	.word	0x08002929
 8002534:	08002561 	.word	0x08002561
 8002538:	08002929 	.word	0x08002929
 800253c:	08002929 	.word	0x08002929
 8002540:	08002929 	.word	0x08002929
 8002544:	08002569 	.word	0x08002569
 8002548:	08002929 	.word	0x08002929
 800254c:	08002929 	.word	0x08002929
 8002550:	08002929 	.word	0x08002929
 8002554:	08002759 	.word	0x08002759
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4bb9      	ldr	r3, [pc, #740]	; (8002840 <HAL_RCC_GetSysClockFreq+0x358>)
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800255e:	e1e7      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4bb8      	ldr	r3, [pc, #736]	; (8002844 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002566:	e1e3      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002568:	4bb4      	ldr	r3, [pc, #720]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002574:	4bb1      	ldr	r3, [pc, #708]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d071      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002580:	4bae      	ldr	r3, [pc, #696]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800258c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025a6:	4622      	mov	r2, r4
 80025a8:	462b      	mov	r3, r5
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	0159      	lsls	r1, r3, #5
 80025b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b8:	0150      	lsls	r0, r2, #5
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4621      	mov	r1, r4
 80025c0:	1a51      	subs	r1, r2, r1
 80025c2:	6439      	str	r1, [r7, #64]	; 0x40
 80025c4:	4629      	mov	r1, r5
 80025c6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ca:	647b      	str	r3, [r7, #68]	; 0x44
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025d8:	4649      	mov	r1, r9
 80025da:	018b      	lsls	r3, r1, #6
 80025dc:	4641      	mov	r1, r8
 80025de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025e2:	4641      	mov	r1, r8
 80025e4:	018a      	lsls	r2, r1, #6
 80025e6:	4641      	mov	r1, r8
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80025ec:	4649      	mov	r1, r9
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002600:	4649      	mov	r1, r9
 8002602:	00cb      	lsls	r3, r1, #3
 8002604:	4641      	mov	r1, r8
 8002606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800260a:	4641      	mov	r1, r8
 800260c:	00ca      	lsls	r2, r1, #3
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	4603      	mov	r3, r0
 8002614:	4622      	mov	r2, r4
 8002616:	189b      	adds	r3, r3, r2
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	462b      	mov	r3, r5
 800261c:	460a      	mov	r2, r1
 800261e:	eb42 0303 	adc.w	r3, r2, r3
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002630:	4629      	mov	r1, r5
 8002632:	024b      	lsls	r3, r1, #9
 8002634:	4621      	mov	r1, r4
 8002636:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800263a:	4621      	mov	r1, r4
 800263c:	024a      	lsls	r2, r1, #9
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002646:	2200      	movs	r2, #0
 8002648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800264c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002650:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002654:	f7fe fac8 	bl	8000be8 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002662:	e067      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	2200      	movs	r2, #0
 800266c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002670:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267c:	67bb      	str	r3, [r7, #120]	; 0x78
 800267e:	2300      	movs	r3, #0
 8002680:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002682:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002686:	4622      	mov	r2, r4
 8002688:	462b      	mov	r3, r5
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002698:	0150      	lsls	r0, r2, #5
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4621      	mov	r1, r4
 80026a0:	1a51      	subs	r1, r2, r1
 80026a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80026a4:	4629      	mov	r1, r5
 80026a6:	eb63 0301 	sbc.w	r3, r3, r1
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026b8:	4649      	mov	r1, r9
 80026ba:	018b      	lsls	r3, r1, #6
 80026bc:	4641      	mov	r1, r8
 80026be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c2:	4641      	mov	r1, r8
 80026c4:	018a      	lsls	r2, r1, #6
 80026c6:	4641      	mov	r1, r8
 80026c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80026cc:	4649      	mov	r1, r9
 80026ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e6:	4692      	mov	sl, r2
 80026e8:	469b      	mov	fp, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	eb1a 0303 	adds.w	r3, sl, r3
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	462b      	mov	r3, r5
 80026f4:	eb4b 0303 	adc.w	r3, fp, r3
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002706:	4629      	mov	r1, r5
 8002708:	028b      	lsls	r3, r1, #10
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002710:	4621      	mov	r1, r4
 8002712:	028a      	lsls	r2, r1, #10
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271c:	2200      	movs	r2, #0
 800271e:	673b      	str	r3, [r7, #112]	; 0x70
 8002720:	677a      	str	r2, [r7, #116]	; 0x74
 8002722:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002726:	f7fe fa5f 	bl	8000be8 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4613      	mov	r3, r2
 8002730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002734:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800274a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002756:	e0eb      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002758:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d06b      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002770:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_RCC_GetSysClockFreq+0x354>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	2200      	movs	r2, #0
 8002778:	66bb      	str	r3, [r7, #104]	; 0x68
 800277a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800277c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800277e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002782:	663b      	str	r3, [r7, #96]	; 0x60
 8002784:	2300      	movs	r3, #0
 8002786:	667b      	str	r3, [r7, #100]	; 0x64
 8002788:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800278c:	4622      	mov	r2, r4
 800278e:	462b      	mov	r3, r5
 8002790:	f04f 0000 	mov.w	r0, #0
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	0159      	lsls	r1, r3, #5
 800279a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800279e:	0150      	lsls	r0, r2, #5
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4621      	mov	r1, r4
 80027a6:	1a51      	subs	r1, r2, r1
 80027a8:	61b9      	str	r1, [r7, #24]
 80027aa:	4629      	mov	r1, r5
 80027ac:	eb63 0301 	sbc.w	r3, r3, r1
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027be:	4659      	mov	r1, fp
 80027c0:	018b      	lsls	r3, r1, #6
 80027c2:	4651      	mov	r1, sl
 80027c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027c8:	4651      	mov	r1, sl
 80027ca:	018a      	lsls	r2, r1, #6
 80027cc:	4651      	mov	r1, sl
 80027ce:	ebb2 0801 	subs.w	r8, r2, r1
 80027d2:	4659      	mov	r1, fp
 80027d4:	eb63 0901 	sbc.w	r9, r3, r1
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ec:	4690      	mov	r8, r2
 80027ee:	4699      	mov	r9, r3
 80027f0:	4623      	mov	r3, r4
 80027f2:	eb18 0303 	adds.w	r3, r8, r3
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	462b      	mov	r3, r5
 80027fa:	eb49 0303 	adc.w	r3, r9, r3
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800280c:	4629      	mov	r1, r5
 800280e:	024b      	lsls	r3, r1, #9
 8002810:	4621      	mov	r1, r4
 8002812:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002816:	4621      	mov	r1, r4
 8002818:	024a      	lsls	r2, r1, #9
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002822:	2200      	movs	r2, #0
 8002824:	65bb      	str	r3, [r7, #88]	; 0x58
 8002826:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002828:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800282c:	f7fe f9dc 	bl	8000be8 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800283a:	e065      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x420>
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400
 8002844:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002848:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_GetSysClockFreq+0x458>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	2200      	movs	r2, #0
 8002850:	4618      	mov	r0, r3
 8002852:	4611      	mov	r1, r2
 8002854:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002858:	653b      	str	r3, [r7, #80]	; 0x50
 800285a:	2300      	movs	r3, #0
 800285c:	657b      	str	r3, [r7, #84]	; 0x54
 800285e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002862:	4642      	mov	r2, r8
 8002864:	464b      	mov	r3, r9
 8002866:	f04f 0000 	mov.w	r0, #0
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	0159      	lsls	r1, r3, #5
 8002870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002874:	0150      	lsls	r0, r2, #5
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4641      	mov	r1, r8
 800287c:	1a51      	subs	r1, r2, r1
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	4649      	mov	r1, r9
 8002882:	eb63 0301 	sbc.w	r3, r3, r1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002894:	4659      	mov	r1, fp
 8002896:	018b      	lsls	r3, r1, #6
 8002898:	4651      	mov	r1, sl
 800289a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289e:	4651      	mov	r1, sl
 80028a0:	018a      	lsls	r2, r1, #6
 80028a2:	4651      	mov	r1, sl
 80028a4:	1a54      	subs	r4, r2, r1
 80028a6:	4659      	mov	r1, fp
 80028a8:	eb63 0501 	sbc.w	r5, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	00eb      	lsls	r3, r5, #3
 80028b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ba:	00e2      	lsls	r2, r4, #3
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	4643      	mov	r3, r8
 80028c2:	18e3      	adds	r3, r4, r3
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	464b      	mov	r3, r9
 80028c8:	eb45 0303 	adc.w	r3, r5, r3
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028da:	4629      	mov	r1, r5
 80028dc:	028b      	lsls	r3, r1, #10
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e4:	4621      	mov	r1, r4
 80028e6:	028a      	lsls	r2, r1, #10
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028f0:	2200      	movs	r2, #0
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80028f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028fa:	f7fe f975 	bl	8000be8 <__aeabi_uldivmod>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4613      	mov	r3, r2
 8002904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCC_GetSysClockFreq+0x458>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	0f1b      	lsrs	r3, r3, #28
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800291a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002926:	e003      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_GetSysClockFreq+0x45c>)
 800292a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800292e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002930:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002934:	4618      	mov	r0, r3
 8002936:	37b8      	adds	r7, #184	; 0xb8
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400

08002948 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e28d      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8083 	beq.w	8002a6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002968:	4b94      	ldr	r3, [pc, #592]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b04      	cmp	r3, #4
 8002972:	d019      	beq.n	80029a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002974:	4b91      	ldr	r3, [pc, #580]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800297c:	2b08      	cmp	r3, #8
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002980:	4b8e      	ldr	r3, [pc, #568]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298c:	d00c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298e:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d112      	bne.n	80029c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299a:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	4b84      	ldr	r3, [pc, #528]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05b      	beq.n	8002a6c <HAL_RCC_OscConfig+0x124>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d157      	bne.n	8002a6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e25a      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c8:	d106      	bne.n	80029d8 <HAL_RCC_OscConfig+0x90>
 80029ca:	4b7c      	ldr	r3, [pc, #496]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7b      	ldr	r2, [pc, #492]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e01d      	b.n	8002a14 <HAL_RCC_OscConfig+0xcc>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0xb4>
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a75      	ldr	r2, [pc, #468]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a72      	ldr	r2, [pc, #456]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0xcc>
 80029fc:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6e      	ldr	r2, [pc, #440]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6b      	ldr	r2, [pc, #428]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe ffa4 	bl	8001968 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe ffa0 	bl	8001968 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e21f      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0xdc>
 8002a42:	e014      	b.n	8002a6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe ff90 	bl	8001968 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe ff8c 	bl	8001968 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e20b      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x104>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d06f      	beq.n	8002b5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a7a:	4b50      	ldr	r3, [pc, #320]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d017      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a86:	4b4d      	ldr	r3, [pc, #308]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d105      	bne.n	8002a9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b47      	ldr	r3, [pc, #284]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d11c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab6:	4b41      	ldr	r3, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_RCC_OscConfig+0x186>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1d3      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	e03a      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d020      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <HAL_RCC_OscConfig+0x278>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe ff39 	bl	8001968 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afa:	f7fe ff35 	bl	8001968 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1b4      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4925      	ldr	r1, [pc, #148]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x278>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe ff18 	bl	8001968 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7fe ff14 	bl	8001968 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e193      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d036      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fef8 	bl	8001968 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fef4 	bl	8001968 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e173      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x234>
 8002b9a:	e01b      	b.n	8002bd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fee1 	bl	8001968 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba8:	e00e      	b.n	8002bc8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002baa:	f7fe fedd 	bl	8001968 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d907      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e15c      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	42470000 	.word	0x42470000
 8002bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc8:	4b8a      	ldr	r3, [pc, #552]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ea      	bne.n	8002baa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8097 	beq.w	8002d10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b83      	ldr	r3, [pc, #524]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b7c      	ldr	r3, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c12:	4b79      	ldr	r3, [pc, #484]	; (8002df8 <HAL_RCC_OscConfig+0x4b0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d118      	bne.n	8002c50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1e:	4b76      	ldr	r3, [pc, #472]	; (8002df8 <HAL_RCC_OscConfig+0x4b0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a75      	ldr	r2, [pc, #468]	; (8002df8 <HAL_RCC_OscConfig+0x4b0>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fe9d 	bl	8001968 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c32:	f7fe fe99 	bl	8001968 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e118      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <HAL_RCC_OscConfig+0x4b0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x31e>
 8002c58:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6713      	str	r3, [r2, #112]	; 0x70
 8002c64:	e01c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x358>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b05      	cmp	r3, #5
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x340>
 8002c6e:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a60      	ldr	r2, [pc, #384]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c74:	f043 0304 	orr.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	4b5e      	ldr	r3, [pc, #376]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a5d      	ldr	r2, [pc, #372]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0x358>
 8002c88:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a59      	ldr	r2, [pc, #356]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	4b57      	ldr	r3, [pc, #348]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	f023 0304 	bic.w	r3, r3, #4
 8002c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fe5e 	bl	8001968 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fe5a 	bl	8001968 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e0d7      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x368>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fe48 	bl	8001968 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fe44 	bl	8001968 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0c1      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf2:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ee      	bne.n	8002cdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	4a3a      	ldr	r2, [pc, #232]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80ad 	beq.w	8002e74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d1a:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d060      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d145      	bne.n	8002dba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x4b4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fe18 	bl	8001968 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fe14 	bl	8001968 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e093      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	019b      	lsls	r3, r3, #6
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	3b01      	subs	r3, #1
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	491b      	ldr	r1, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4b4>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d92:	f7fe fde9 	bl	8001968 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fde5 	bl	8001968 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e064      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x452>
 8002db8:	e05c      	b.n	8002e74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCC_OscConfig+0x4b4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fdd2 	bl	8001968 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fdce 	bl	8001968 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04d      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x480>
 8002de6:	e045      	b.n	8002e74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e040      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <HAL_RCC_OscConfig+0x538>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d030      	beq.n	8002e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d129      	bne.n	8002e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d122      	bne.n	8002e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d119      	bne.n	8002e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10f      	bne.n	8002e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800

08002e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07b      	b.n	8002f8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea6:	d009      	beq.n	8002ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
 8002eae:	e005      	b.n	8002ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe faae 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	ea42 0103 	orr.w	r1, r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	f003 0104 	and.w	r1, r3, #4
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	f003 0210 	and.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b088      	sub	sp, #32
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_SPI_Transmit+0x22>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e12d      	b.n	8003214 <HAL_SPI_Transmit+0x27e>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc0:	f7fe fcd2 	bl	8001968 <HAL_GetTick>
 8002fc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fda:	e116      	b.n	800320a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_Transmit+0x52>
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fec:	e10d      	b.n	800320a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003034:	d10f      	bne.n	8003056 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003044:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003054:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d007      	beq.n	8003074 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307c:	d14f      	bne.n	800311e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_SPI_Transmit+0xf6>
 8003086:	8afb      	ldrh	r3, [r7, #22]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d142      	bne.n	8003112 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	881a      	ldrh	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030b0:	e02f      	b.n	8003112 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d112      	bne.n	80030e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	881a      	ldrh	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	1c9a      	adds	r2, r3, #2
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80030e4:	e015      	b.n	8003112 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030e6:	f7fe fc3f 	bl	8001968 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d803      	bhi.n	80030fe <HAL_SPI_Transmit+0x168>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030fc:	d102      	bne.n	8003104 <HAL_SPI_Transmit+0x16e>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003110:	e07b      	b.n	800320a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ca      	bne.n	80030b2 <HAL_SPI_Transmit+0x11c>
 800311c:	e050      	b.n	80031c0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_Transmit+0x196>
 8003126:	8afb      	ldrh	r3, [r7, #22]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d144      	bne.n	80031b6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003152:	e030      	b.n	80031b6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d113      	bne.n	800318a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	86da      	strh	r2, [r3, #54]	; 0x36
 8003188:	e015      	b.n	80031b6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800318a:	f7fe fbed 	bl	8001968 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d803      	bhi.n	80031a2 <HAL_SPI_Transmit+0x20c>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Transmit+0x212>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031b4:	e029      	b.n	800320a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1c9      	bne.n	8003154 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fcf1 	bl	8003bac <SPI_EndRxTxTransaction>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e003      	b.n	800320a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003212:	7ffb      	ldrb	r3, [r7, #31]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d002      	beq.n	8003242 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003240:	e0fb      	b.n	800343a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324a:	d112      	bne.n	8003272 <HAL_SPI_Receive+0x56>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10e      	bne.n	8003272 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2204      	movs	r2, #4
 8003258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f8ef 	bl	800344c <HAL_SPI_TransmitReceive>
 800326e:	4603      	mov	r3, r0
 8003270:	e0e8      	b.n	8003444 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_SPI_Receive+0x64>
 800327c:	2302      	movs	r3, #2
 800327e:	e0e1      	b.n	8003444 <HAL_SPI_Receive+0x228>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003288:	f7fe fb6e 	bl	8001968 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_Receive+0x7e>
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800329e:	e0cc      	b.n	800343a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2204      	movs	r2, #4
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e6:	d10f      	bne.n	8003308 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d007      	beq.n	8003326 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d16a      	bne.n	8003404 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800332e:	e032      	b.n	8003396 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d115      	bne.n	800336a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f103 020c 	add.w	r2, r3, #12
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003368:	e015      	b.n	8003396 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336a:	f7fe fafd 	bl	8001968 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d803      	bhi.n	8003382 <HAL_SPI_Receive+0x166>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003380:	d102      	bne.n	8003388 <HAL_SPI_Receive+0x16c>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d106      	bne.n	8003396 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003394:	e051      	b.n	800343a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1c7      	bne.n	8003330 <HAL_SPI_Receive+0x114>
 80033a0:	e035      	b.n	800340e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d113      	bne.n	80033d8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	b292      	uxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033d6:	e015      	b.n	8003404 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033d8:	f7fe fac6 	bl	8001968 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d803      	bhi.n	80033f0 <HAL_SPI_Receive+0x1d4>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ee:	d102      	bne.n	80033f6 <HAL_SPI_Receive+0x1da>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003402:	e01a      	b.n	800343a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1c9      	bne.n	80033a2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fb64 	bl	8003ae0 <SPI_EndRxTransaction>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
 8003430:	e003      	b.n	800343a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x26>
 800346e:	2302      	movs	r3, #2
 8003470:	e198      	b.n	80037a4 <HAL_SPI_TransmitReceive+0x358>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800347a:	f7fe fa75 	bl	8001968 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003490:	887b      	ldrh	r3, [r7, #2]
 8003492:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003498:	2b01      	cmp	r3, #1
 800349a:	d00f      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x70>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a2:	d107      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x68>
 80034ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d003      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034ba:	e16d      	b.n	8003798 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_SPI_TransmitReceive+0x82>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_TransmitReceive+0x82>
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034d4:	e160      	b.n	8003798 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d003      	beq.n	80034ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2205      	movs	r2, #5
 80034e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	887a      	ldrh	r2, [r7, #2]
 8003512:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d007      	beq.n	800353e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003546:	d17c      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x10a>
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d16a      	bne.n	800362c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357a:	e057      	b.n	800362c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d11b      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x176>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x176>
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d113      	bne.n	80035c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d119      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x1b8>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d014      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	b292      	uxth	r2, r2
 80035e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003600:	2301      	movs	r3, #1
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003604:	f7fe f9b0 	bl	8001968 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003610:	429a      	cmp	r2, r3
 8003612:	d80b      	bhi.n	800362c <HAL_SPI_TransmitReceive+0x1e0>
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361a:	d007      	beq.n	800362c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800362a:	e0b5      	b.n	8003798 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1a2      	bne.n	800357c <HAL_SPI_TransmitReceive+0x130>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d19d      	bne.n	800357c <HAL_SPI_TransmitReceive+0x130>
 8003640:	e080      	b.n	8003744 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x204>
 800364a:	8b7b      	ldrh	r3, [r7, #26]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d16f      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003676:	e05b      	b.n	8003730 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d11c      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x274>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d017      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x274>
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d114      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d119      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x2b6>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d014      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003702:	f7fe f931 	bl	8001968 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_TransmitReceive+0x2ce>
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003718:	d102      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x2d4>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800372e:	e033      	b.n	8003798 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d19e      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x22c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d199      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa2f 	bl	8003bac <SPI_EndRxTxTransaction>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d006      	beq.n	8003762 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003760:	e01a      	b.n	8003798 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378e:	e003      	b.n	8003798 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3730      	adds	r7, #48	; 0x30
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
    return;
 80037ea:	e0ce      	b.n	800398a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_SPI_IRQHandler+0x5e>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
    return;
 8003808:	e0bf      	b.n	800398a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10a      	bne.n	800382a <HAL_SPI_IRQHandler+0x7e>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80b0 	beq.w	800398a <HAL_SPI_IRQHandler+0x1de>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80aa 	beq.w	800398a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d023      	beq.n	8003888 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b03      	cmp	r3, #3
 800384a:	d011      	beq.n	8003870 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003850:	f043 0204 	orr.w	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	e00b      	b.n	8003888 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]
        return;
 8003886:	e080      	b.n	800398a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d014      	beq.n	80038bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f043 0208 	orr.w	r2, r3, #8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d04f      	beq.n	8003988 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_SPI_IRQHandler+0x168>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d034      	beq.n	800397e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0203 	bic.w	r2, r2, #3
 8003922:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d011      	beq.n	8003950 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_SPI_IRQHandler+0x1e4>)
 8003932:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe f956 	bl	8001bea <HAL_DMA_Abort_IT>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	2b00      	cmp	r3, #0
 8003956:	d016      	beq.n	8003986 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395c:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <HAL_SPI_IRQHandler+0x1e4>)
 800395e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe f940 	bl	8001bea <HAL_DMA_Abort_IT>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800397c:	e003      	b.n	8003986 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f808 	bl	8003994 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003984:	e000      	b.n	8003988 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003986:	bf00      	nop
    return;
 8003988:	bf00      	nop
  }
}
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	080039a9 	.word	0x080039a9

08003994 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ffe6 	bl	8003994 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039e0:	f7fd ffc2 	bl	8001968 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039f0:	f7fd ffba 	bl	8001968 <HAL_GetTick>
 80039f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	0d1b      	lsrs	r3, r3, #20
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a06:	e054      	b.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0e:	d050      	beq.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a10:	f7fd ffaa 	bl	8001968 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d902      	bls.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13d      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d111      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	d004      	beq.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d107      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d10f      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e017      	b.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d19b      	bne.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000050 	.word	0x20000050

08003ae0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af4:	d111      	bne.n	8003b1a <SPI_EndRxTransaction+0x3a>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afe:	d004      	beq.n	8003b0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b08:	d107      	bne.n	8003b1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d12a      	bne.n	8003b7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d012      	beq.n	8003b54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff ff49 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02d      	beq.n	8003ba0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e026      	b.n	8003ba2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff ff36 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01a      	beq.n	8003ba0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f043 0220 	orr.w	r2, r3, #32
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e013      	b.n	8003ba2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2101      	movs	r1, #1
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f7ff ff23 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff ff04 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e032      	b.n	8003c44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bde:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <SPI_EndRxTxTransaction+0xa0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	; (8003c50 <SPI_EndRxTxTransaction+0xa4>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	0d5b      	lsrs	r3, r3, #21
 8003bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bfc:	d112      	bne.n	8003c24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fee1 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d016      	beq.n	8003c42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e00f      	b.n	8003c44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d0f2      	beq.n	8003c24 <SPI_EndRxTxTransaction+0x78>
 8003c3e:	e000      	b.n	8003c42 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c40:	bf00      	nop
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000050 	.word	0x20000050
 8003c50:	165e9f81 	.word	0x165e9f81

08003c54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e042      	b.n	8003cec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fd8a 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f973 	bl	8003f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d175      	bne.n	8003e00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_UART_Transmit+0x2c>
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e06e      	b.n	8003e02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fe19 	bl	8001968 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Transmit+0x6c>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d68:	e02e      	b.n	8003dc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f848 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e03a      	b.n	8003e02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3302      	adds	r3, #2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e007      	b.n	8003dba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	781a      	ldrb	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1cb      	bne.n	8003d6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f814 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	e03b      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e22:	d037      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7fd fda0 	bl	8001968 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e03a      	b.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d023      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b80      	cmp	r3, #128	; 0x80
 8003e50:	d020      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d01d      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d116      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f81d 	bl	8003ebc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2208      	movs	r2, #8
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e00f      	b.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d0b4      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b095      	sub	sp, #84	; 0x54
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ee4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	e853 3f00 	ldrex	r3, [r3]
 8003f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3314      	adds	r3, #20
 8003f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e5      	bne.n	8003ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d119      	bne.n	8003f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f54:	61ba      	str	r2, [r7, #24]
 8003f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f76:	bf00      	nop
 8003f78:	3754      	adds	r7, #84	; 0x54
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b0c0      	sub	sp, #256	; 0x100
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	68d9      	ldr	r1, [r3, #12]
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	ea40 0301 	orr.w	r3, r0, r1
 8003fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fdc:	f021 010c 	bic.w	r1, r1, #12
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fea:	430b      	orrs	r3, r1
 8003fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	6999      	ldr	r1, [r3, #24]
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	ea40 0301 	orr.w	r3, r0, r1
 800400a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b8f      	ldr	r3, [pc, #572]	; (8004250 <UART_SetConfig+0x2cc>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0xa0>
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b8d      	ldr	r3, [pc, #564]	; (8004254 <UART_SetConfig+0x2d0>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d104      	bne.n	800402e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe fa4c 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8004028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800402c:	e003      	b.n	8004036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7fe fa33 	bl	8002498 <HAL_RCC_GetPCLK1Freq>
 8004032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	f040 810c 	bne.w	800425c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	1891      	adds	r1, r2, r2
 800405c:	65b9      	str	r1, [r7, #88]	; 0x58
 800405e:	415b      	adcs	r3, r3
 8004060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004066:	4621      	mov	r1, r4
 8004068:	eb12 0801 	adds.w	r8, r2, r1
 800406c:	4629      	mov	r1, r5
 800406e:	eb43 0901 	adc.w	r9, r3, r1
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004086:	4690      	mov	r8, r2
 8004088:	4699      	mov	r9, r3
 800408a:	4623      	mov	r3, r4
 800408c:	eb18 0303 	adds.w	r3, r8, r3
 8004090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004094:	462b      	mov	r3, r5
 8004096:	eb49 0303 	adc.w	r3, r9, r3
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040b2:	460b      	mov	r3, r1
 80040b4:	18db      	adds	r3, r3, r3
 80040b6:	653b      	str	r3, [r7, #80]	; 0x50
 80040b8:	4613      	mov	r3, r2
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
 80040c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c8:	f7fc fd8e 	bl	8000be8 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <UART_SetConfig+0x2d4>)
 80040d2:	fba3 2302 	umull	r2, r3, r3, r2
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	011c      	lsls	r4, r3, #4
 80040da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040ec:	4642      	mov	r2, r8
 80040ee:	464b      	mov	r3, r9
 80040f0:	1891      	adds	r1, r2, r2
 80040f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f4:	415b      	adcs	r3, r3
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040fc:	4641      	mov	r1, r8
 80040fe:	eb12 0a01 	adds.w	sl, r2, r1
 8004102:	4649      	mov	r1, r9
 8004104:	eb43 0b01 	adc.w	fp, r3, r1
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411c:	4692      	mov	sl, r2
 800411e:	469b      	mov	fp, r3
 8004120:	4643      	mov	r3, r8
 8004122:	eb1a 0303 	adds.w	r3, sl, r3
 8004126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800412a:	464b      	mov	r3, r9
 800412c:	eb4b 0303 	adc.w	r3, fp, r3
 8004130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004148:	460b      	mov	r3, r1
 800414a:	18db      	adds	r3, r3, r3
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
 800414e:	4613      	mov	r3, r2
 8004150:	eb42 0303 	adc.w	r3, r2, r3
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800415e:	f7fc fd43 	bl	8000be8 <__aeabi_uldivmod>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4611      	mov	r1, r2
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <UART_SetConfig+0x2d4>)
 800416a:	fba3 2301 	umull	r2, r3, r3, r1
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2264      	movs	r2, #100	; 0x64
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	1acb      	subs	r3, r1, r3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800417e:	4b36      	ldr	r3, [pc, #216]	; (8004258 <UART_SetConfig+0x2d4>)
 8004180:	fba3 2302 	umull	r2, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800418c:	441c      	add	r4, r3
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800419c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a8:	415b      	adcs	r3, r3
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041b0:	4641      	mov	r1, r8
 80041b2:	1851      	adds	r1, r2, r1
 80041b4:	6339      	str	r1, [r7, #48]	; 0x30
 80041b6:	4649      	mov	r1, r9
 80041b8:	414b      	adcs	r3, r1
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041c8:	4659      	mov	r1, fp
 80041ca:	00cb      	lsls	r3, r1, #3
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d2:	4651      	mov	r1, sl
 80041d4:	00ca      	lsls	r2, r1, #3
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	4642      	mov	r2, r8
 80041de:	189b      	adds	r3, r3, r2
 80041e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800421a:	f7fc fce5 	bl	8000be8 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <UART_SetConfig+0x2d4>)
 8004224:	fba3 1302 	umull	r1, r3, r3, r2
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	2164      	movs	r1, #100	; 0x64
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3332      	adds	r3, #50	; 0x32
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <UART_SetConfig+0x2d4>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0207 	and.w	r2, r3, #7
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4422      	add	r2, r4
 800424a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800424c:	e106      	b.n	800445c <UART_SetConfig+0x4d8>
 800424e:	bf00      	nop
 8004250:	40011000 	.word	0x40011000
 8004254:	40011400 	.word	0x40011400
 8004258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800426a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800426e:	4642      	mov	r2, r8
 8004270:	464b      	mov	r3, r9
 8004272:	1891      	adds	r1, r2, r2
 8004274:	6239      	str	r1, [r7, #32]
 8004276:	415b      	adcs	r3, r3
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427e:	4641      	mov	r1, r8
 8004280:	1854      	adds	r4, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0501 	adc.w	r5, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a4:	464b      	mov	r3, r9
 80042a6:	eb45 0303 	adc.w	r3, r5, r3
 80042aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ca:	4629      	mov	r1, r5
 80042cc:	008b      	lsls	r3, r1, #2
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d4:	4621      	mov	r1, r4
 80042d6:	008a      	lsls	r2, r1, #2
 80042d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042dc:	f7fc fc84 	bl	8000be8 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b60      	ldr	r3, [pc, #384]	; (8004468 <UART_SetConfig+0x4e4>)
 80042e6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	011c      	lsls	r4, r3, #4
 80042ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004300:	4642      	mov	r2, r8
 8004302:	464b      	mov	r3, r9
 8004304:	1891      	adds	r1, r2, r2
 8004306:	61b9      	str	r1, [r7, #24]
 8004308:	415b      	adcs	r3, r3
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004310:	4641      	mov	r1, r8
 8004312:	1851      	adds	r1, r2, r1
 8004314:	6139      	str	r1, [r7, #16]
 8004316:	4649      	mov	r1, r9
 8004318:	414b      	adcs	r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	00cb      	lsls	r3, r1, #3
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004332:	4651      	mov	r1, sl
 8004334:	00ca      	lsls	r2, r1, #3
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	4603      	mov	r3, r0
 800433c:	4642      	mov	r2, r8
 800433e:	189b      	adds	r3, r3, r2
 8004340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004344:	464b      	mov	r3, r9
 8004346:	460a      	mov	r2, r1
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	67bb      	str	r3, [r7, #120]	; 0x78
 800435a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004368:	4649      	mov	r1, r9
 800436a:	008b      	lsls	r3, r1, #2
 800436c:	4641      	mov	r1, r8
 800436e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004372:	4641      	mov	r1, r8
 8004374:	008a      	lsls	r2, r1, #2
 8004376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800437a:	f7fc fc35 	bl	8000be8 <__aeabi_uldivmod>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4611      	mov	r1, r2
 8004384:	4b38      	ldr	r3, [pc, #224]	; (8004468 <UART_SetConfig+0x4e4>)
 8004386:	fba3 2301 	umull	r2, r3, r3, r1
 800438a:	095b      	lsrs	r3, r3, #5
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	1acb      	subs	r3, r1, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	3332      	adds	r3, #50	; 0x32
 8004398:	4a33      	ldr	r2, [pc, #204]	; (8004468 <UART_SetConfig+0x4e4>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a4:	441c      	add	r4, r3
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	673b      	str	r3, [r7, #112]	; 0x70
 80043ae:	677a      	str	r2, [r7, #116]	; 0x74
 80043b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	415b      	adcs	r3, r3
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f6:	464b      	mov	r3, r9
 80043f8:	460a      	mov	r2, r1
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	663b      	str	r3, [r7, #96]	; 0x60
 800440a:	667a      	str	r2, [r7, #100]	; 0x64
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004418:	4649      	mov	r1, r9
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	4641      	mov	r1, r8
 800441e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004422:	4641      	mov	r1, r8
 8004424:	008a      	lsls	r2, r1, #2
 8004426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800442a:	f7fc fbdd 	bl	8000be8 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <UART_SetConfig+0x4e4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <UART_SetConfig+0x4e4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4422      	add	r2, r4
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004462:	46bd      	mov	sp, r7
 8004464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <NRF24_DelayMicroSeconds>:
//static SPI_HandleTypeDef nrf24_hspi;
//Debugging UART handle

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec) {
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <NRF24_DelayMicroSeconds+0x3c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0b      	ldr	r2, [pc, #44]	; (80044ac <NRF24_DelayMicroSeconds+0x40>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0c9a      	lsrs	r2, r3, #18
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	60fb      	str	r3, [r7, #12]
	while (uSecVar--)
 800448c:	bf00      	nop
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	60fa      	str	r2, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1fa      	bne.n	800448e <NRF24_DelayMicroSeconds+0x22>
		;
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000050 	.word	0x20000050
 80044ac:	165e9f81 	.word	0x165e9f81

080044b0 <NRF24_CSN>:

//1. Chip Select function
void NRF24_CSN(int state) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	if (state)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <NRF24_CSN+0x1a>
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80044be:	2201      	movs	r2, #1
 80044c0:	2120      	movs	r1, #32
 80044c2:	4806      	ldr	r0, [pc, #24]	; (80044dc <NRF24_CSN+0x2c>)
 80044c4:	f7fd fd48 	bl	8001f58 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
}
 80044c8:	e004      	b.n	80044d4 <NRF24_CSN+0x24>
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80044ca:	2200      	movs	r2, #0
 80044cc:	2120      	movs	r1, #32
 80044ce:	4803      	ldr	r0, [pc, #12]	; (80044dc <NRF24_CSN+0x2c>)
 80044d0:	f7fd fd42 	bl	8001f58 <HAL_GPIO_WritePin>
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40020400 	.word	0x40020400

080044e0 <NRF24_CE>:
//2. Chip Enable
void NRF24_CE(int state) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	if (state)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <NRF24_CE+0x1a>

		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80044ee:	2201      	movs	r2, #1
 80044f0:	2110      	movs	r1, #16
 80044f2:	4806      	ldr	r0, [pc, #24]	; (800450c <NRF24_CE+0x2c>)
 80044f4:	f7fd fd30 	bl	8001f58 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
}
 80044f8:	e004      	b.n	8004504 <NRF24_CE+0x24>
		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80044fa:	2200      	movs	r2, #0
 80044fc:	2110      	movs	r1, #16
 80044fe:	4803      	ldr	r0, [pc, #12]	; (800450c <NRF24_CE+0x2c>)
 8004500:	f7fd fd2a 	bl	8001f58 <HAL_GPIO_WritePin>
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40020400 	.word	0x40020400

08004510 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_CSN(0);
 800451a:	2000      	movs	r0, #0
 800451c:	f7ff ffc8 	bl	80044b0 <NRF24_CSN>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	b2db      	uxtb	r3, r3
 8004528:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 800452a:	f107 010c 	add.w	r1, r7, #12
 800452e:	2364      	movs	r3, #100	; 0x64
 8004530:	2201      	movs	r2, #1
 8004532:	480a      	ldr	r0, [pc, #40]	; (800455c <NRF24_read_register+0x4c>)
 8004534:	f7fe fd2f 	bl	8002f96 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &spiBuf[1], 1, 100);
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	1c59      	adds	r1, r3, #1
 800453e:	2364      	movs	r3, #100	; 0x64
 8004540:	2201      	movs	r2, #1
 8004542:	4806      	ldr	r0, [pc, #24]	; (800455c <NRF24_read_register+0x4c>)
 8004544:	f7fe fe6a 	bl	800321c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8004548:	7b7b      	ldrb	r3, [r7, #13]
 800454a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_CSN(1);
 800454c:	2001      	movs	r0, #1
 800454e:	f7ff ffaf 	bl	80044b0 <NRF24_CSN>
	return retData;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200002dc 	.word	0x200002dc

08004560 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	4613      	mov	r3, r2
 800456e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 8004570:	2000      	movs	r0, #0
 8004572:	f7ff ff9d 	bl	80044b0 <NRF24_CSN>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	b2db      	uxtb	r3, r3
 800457e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 8004580:	f107 010c 	add.w	r1, r7, #12
 8004584:	2364      	movs	r3, #100	; 0x64
 8004586:	2201      	movs	r2, #1
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <NRF24_read_registerN+0x4c>)
 800458a:	f7fe fd04 	bl	8002f96 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, buf, len, 100);
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	b29a      	uxth	r2, r3
 8004592:	2364      	movs	r3, #100	; 0x64
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	4805      	ldr	r0, [pc, #20]	; (80045ac <NRF24_read_registerN+0x4c>)
 8004598:	f7fe fe40 	bl	800321c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_CSN(1);
 800459c:	2001      	movs	r0, #1
 800459e:	f7ff ff87 	bl	80044b0 <NRF24_CSN>
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200002dc 	.word	0x200002dc

080045b0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	460a      	mov	r2, r1
 80045ba:	71fb      	strb	r3, [r7, #7]
 80045bc:	4613      	mov	r3, r2
 80045be:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 80045c0:	2000      	movs	r0, #0
 80045c2:	f7ff ff75 	bl	80044b0 <NRF24_CSN>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	f043 0320 	orr.w	r3, r3, #32
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80045d0:	79bb      	ldrb	r3, [r7, #6]
 80045d2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, spiBuf, 2, 100);
 80045d4:	f107 010c 	add.w	r1, r7, #12
 80045d8:	2364      	movs	r3, #100	; 0x64
 80045da:	2202      	movs	r2, #2
 80045dc:	4804      	ldr	r0, [pc, #16]	; (80045f0 <NRF24_write_register+0x40>)
 80045de:	f7fe fcda 	bl	8002f96 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 80045e2:	2001      	movs	r0, #1
 80045e4:	f7ff ff64 	bl	80044b0 <NRF24_CSN>
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	200002dc 	.word	0x200002dc

080045f4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	6039      	str	r1, [r7, #0]
 80045fe:	71fb      	strb	r3, [r7, #7]
 8004600:	4613      	mov	r3, r2
 8004602:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 8004604:	2000      	movs	r0, #0
 8004606:	f7ff ff53 	bl	80044b0 <NRF24_CSN>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	f043 0320 	orr.w	r3, r3, #32
 8004610:	b2db      	uxtb	r3, r3
 8004612:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 8004614:	f107 010c 	add.w	r1, r7, #12
 8004618:	2364      	movs	r3, #100	; 0x64
 800461a:	2201      	movs	r2, #1
 800461c:	4808      	ldr	r0, [pc, #32]	; (8004640 <NRF24_write_registerN+0x4c>)
 800461e:	f7fe fcba 	bl	8002f96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) buf, len, 100);
 8004622:	79bb      	ldrb	r3, [r7, #6]
 8004624:	b29a      	uxth	r2, r3
 8004626:	2364      	movs	r3, #100	; 0x64
 8004628:	6839      	ldr	r1, [r7, #0]
 800462a:	4805      	ldr	r0, [pc, #20]	; (8004640 <NRF24_write_registerN+0x4c>)
 800462c:	f7fe fcb3 	bl	8002f96 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 8004630:	2001      	movs	r0, #1
 8004632:	f7ff ff3d 	bl	80044b0 <NRF24_CSN>
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200002dc 	.word	0x200002dc

08004644 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void *buf, uint8_t len) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_CSN(0);
 8004650:	2000      	movs	r0, #0
 8004652:	f7ff ff2d 	bl	80044b0 <NRF24_CSN>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8004656:	23a0      	movs	r3, #160	; 0xa0
 8004658:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &wrPayloadCmd, 1, 100);
 800465a:	f107 010f 	add.w	r1, r7, #15
 800465e:	2364      	movs	r3, #100	; 0x64
 8004660:	2201      	movs	r2, #1
 8004662:	4808      	ldr	r0, [pc, #32]	; (8004684 <NRF24_write_payload+0x40>)
 8004664:	f7fe fc97 	bl	8002f96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) buf, len, 100);
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	b29a      	uxth	r2, r3
 800466c:	2364      	movs	r3, #100	; 0x64
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4804      	ldr	r0, [pc, #16]	; (8004684 <NRF24_write_payload+0x40>)
 8004672:	f7fe fc90 	bl	8002f96 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 8004676:	2001      	movs	r0, #1
 8004678:	f7ff ff1a 	bl	80044b0 <NRF24_CSN>
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200002dc 	.word	0x200002dc

08004688 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void *buf, uint8_t len) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8004694:	f000 f9ca 	bl	8004a2c <NRF24_getPayloadSize>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	4293      	cmp	r3, r2
 80046a0:	d303      	bcc.n	80046aa <NRF24_read_payload+0x22>
 80046a2:	f000 f9c3 	bl	8004a2c <NRF24_getPayloadSize>
 80046a6:	4603      	mov	r3, r0
 80046a8:	e000      	b.n	80046ac <NRF24_read_payload+0x24>
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_CSN(0);
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7ff fefe 	bl	80044b0 <NRF24_CSN>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80046b4:	2361      	movs	r3, #97	; 0x61
 80046b6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, &cmdRxBuf, 1, 100);
 80046b8:	f107 010e 	add.w	r1, r7, #14
 80046bc:	2364      	movs	r3, #100	; 0x64
 80046be:	2201      	movs	r2, #1
 80046c0:	4808      	ldr	r0, [pc, #32]	; (80046e4 <NRF24_read_payload+0x5c>)
 80046c2:	f7fe fc68 	bl	8002f96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buf, data_len, 100);
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	2364      	movs	r3, #100	; 0x64
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4805      	ldr	r0, [pc, #20]	; (80046e4 <NRF24_read_payload+0x5c>)
 80046d0:	f7fe fda4 	bl	800321c <HAL_SPI_Receive>
	NRF24_CSN(1);
 80046d4:	2001      	movs	r0, #1
 80046d6:	f7ff feeb 	bl	80044b0 <NRF24_CSN>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200002dc 	.word	0x200002dc

080046e8 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80046ec:	21ff      	movs	r1, #255	; 0xff
 80046ee:	20e1      	movs	r0, #225	; 0xe1
 80046f0:	f7ff ff5e 	bl	80045b0 <NRF24_write_register>
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80046fc:	21ff      	movs	r1, #255	; 0xff
 80046fe:	20e2      	movs	r0, #226	; 0xe2
 8004700:	f7ff ff56 	bl	80045b0 <NRF24_write_register>
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}

08004708 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800470e:	2007      	movs	r0, #7
 8004710:	f7ff fefe 	bl	8004510 <NRF24_read_register>
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8004718:	79fb      	ldrb	r3, [r7, #7]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <NRF24_Init>:

//12. Begin function
void NRF24_Init(void) {
 8004722:	b580      	push	{r7, lr}
 8004724:	af00      	add	r7, sp, #0

	NRF24_SoftwareReset();
 8004726:	f000 fe17 	bl	8005358 <NRF24_SoftwareReset>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800472a:	210f      	movs	r1, #15
 800472c:	200f      	movs	r0, #15
 800472e:	f000 f935 	bl	800499c <NRF24_setRetries>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_250KBPS);	//RF24_250KBPS RF24_1MBPS RF24_2MBPS
 8004732:	2002      	movs	r0, #2
 8004734:	f000 fa54 	bl	8004be0 <NRF24_setDataRate>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB); //RF24_PA_m18dB  RF24_PA_m18dB RF24_PA_m12dB
 8004738:	2000      	movs	r0, #0
 800473a:	f000 fa18 	bl	8004b6e <NRF24_setPALevel>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800473e:	2002      	movs	r0, #2
 8004740:	f000 fa94 	bl	8004c6c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8004744:	f000 f9e6 	bl	8004b14 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8004748:	2020      	movs	r0, #32
 800474a:	f000 f957 	bl	80049fc <NRF24_setPayloadSize>
	//Reset status register
	NRF24_resetStatus();
 800474e:	f000 fb80 	bl	8004e52 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8004752:	204c      	movs	r0, #76	; 0x4c
 8004754:	f000 f93d 	bl	80049d2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8004758:	f7ff ffc6 	bl	80046e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 800475c:	f7ff ffcc 	bl	80046f8 <NRF24_flush_rx>
	NRF24_powerDown();
 8004760:	f000 faac 	bl	8004cbc <NRF24_powerDown>
	printRadioSettings();
 8004764:	f000 fb98 	bl	8004e98 <printRadioSettings>
}
 8004768:	bf00      	nop
 800476a:	bd80      	pop	{r7, pc}

0800476c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void) {
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 8004770:	2000      	movs	r0, #0
 8004772:	f7ff fecd 	bl	8004510 <NRF24_read_register>
 8004776:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 8004778:	f043 0303 	orr.w	r3, r3, #3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	4619      	mov	r1, r3
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff ff15 	bl	80045b0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address)
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <NRF24_startListening+0x48>)
 8004788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478c:	4313      	orrs	r3, r2
 800478e:	d004      	beq.n	800479a <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0,
 8004790:	2205      	movs	r2, #5
 8004792:	4908      	ldr	r1, [pc, #32]	; (80047b4 <NRF24_startListening+0x48>)
 8004794:	200a      	movs	r0, #10
 8004796:	f7ff ff2d 	bl	80045f4 <NRF24_write_registerN>
				(uint8_t*) (&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 800479a:	f7ff ffa5 	bl	80046e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 800479e:	f7ff ffab 	bl	80046f8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_CE(1);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f7ff fe9c 	bl	80044e0 <NRF24_CE>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80047a8:	2096      	movs	r0, #150	; 0x96
 80047aa:	f7ff fe5f 	bl	800446c <NRF24_DelayMicroSeconds>
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000388 	.word	0x20000388

080047b8 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
	NRF24_CE(0);
 80047bc:	2000      	movs	r0, #0
 80047be:	f7ff fe8f 	bl	80044e0 <NRF24_CE>
	NRF24_flush_tx();
 80047c2:	f7ff ff91 	bl	80046e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80047c6:	f7ff ff97 	bl	80046f8 <NRF24_flush_rx>
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write(const void *buf, uint8_t len) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80047dc:	f000 fb39 	bl	8004e52 <NRF24_resetStatus>
	NRF24_startWrite(buf, len);
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 faa8 	bl	8004d3a <NRF24_startWrite>
	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 80047ea:	f7fd f8bd 	bl	8001968 <HAL_GetTick>
 80047ee:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80047f0:	230a      	movs	r3, #10
 80047f2:	613b      	str	r3, [r7, #16]
	do {
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 80047f4:	f107 030d 	add.w	r3, r7, #13
 80047f8:	2201      	movs	r2, #1
 80047fa:	4619      	mov	r1, r3
 80047fc:	2008      	movs	r0, #8
 80047fe:	f7ff feaf 	bl	8004560 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8004802:	f7ff ff81 	bl	8004708 <NRF24_get_status>
 8004806:	4603      	mov	r3, r0
 8004808:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT)))
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	f003 0330 	and.w	r3, r3, #48	; 0x30
			&& (HAL_GetTick() - sent_at < timeout));
 8004810:	2b00      	cmp	r3, #0
 8004812:	d107      	bne.n	8004824 <NRF24_write+0x54>
 8004814:	f7fd f8a8 	bl	8001968 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d8e7      	bhi.n	80047f4 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
	NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 8004824:	f107 010b 	add.w	r1, r7, #11
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <NRF24_write+0x90>)
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fadc 	bl	8004dec <NRF24_whatHappened>
	retStatus = tx_ok;
 8004834:	7b3b      	ldrb	r3, [r7, #12]
 8004836:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available) {
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <NRF24_write+0x90>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <NRF24_write+0x7c>
		ack_payload_length = NRF24_getDynamicPayloadSize();
 8004840:	f000 f900 	bl	8004a44 <NRF24_getDynamicPayloadSize>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <NRF24_write+0x94>)
 800484a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 800484c:	f000 f80c 	bl	8004868 <NRF24_available>
	NRF24_flush_tx();
 8004850:	f7ff ff4a 	bl	80046e8 <NRF24_flush_tx>
	return retStatus;
 8004854:	7bbb      	ldrb	r3, [r7, #14]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000390 	.word	0x20000390
 8004864:	20000391 	.word	0x20000391

08004868 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void) {
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800486c:	2000      	movs	r0, #0
 800486e:	f000 fa34 	bl	8004cda <NRF24_availablePipe>
 8004872:	4603      	mov	r3, r0
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}

08004878 <NRF24_read>:
//17. Read received data
bool NRF24_read(void *buf, uint8_t len) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload(buf, len);
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fefd 	bl	8004688 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800488e:	2017      	movs	r0, #23
 8004890:	f7ff fe3e 	bl	8004510 <NRF24_read_register>
 8004894:	4603      	mov	r3, r0
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800489c:	f7ff ff2c 	bl	80046f8 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80048a0:	f000 f8d0 	bl	8004a44 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 80048c2:	463b      	mov	r3, r7
 80048c4:	2205      	movs	r2, #5
 80048c6:	4619      	mov	r1, r3
 80048c8:	200a      	movs	r0, #10
 80048ca:	f7ff fe93 	bl	80045f4 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 80048ce:	463b      	mov	r3, r7
 80048d0:	2205      	movs	r2, #5
 80048d2:	4619      	mov	r1, r3
 80048d4:	2010      	movs	r0, #16
 80048d6:	f7ff fe8d 	bl	80045f4 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80048da:	2320      	movs	r3, #32
 80048dc:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <NRF24_openWritingPipe+0x44>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	7bfa      	ldrb	r2, [r7, #15]
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bf28      	it	cs
 80048e8:	4613      	movcs	r3, r2
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	2011      	movs	r0, #17
 80048f0:	f7ff fe5e 	bl	80045b0 <NRF24_write_register>
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000392 	.word	0x20000392

08004900 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	4601      	mov	r1, r0
 8004908:	e9c7 2300 	strd	r2, r3, [r7]
 800490c:	460b      	mov	r3, r1
 800490e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d104      	bne.n	8004920 <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 8004916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800491a:	491c      	ldr	r1, [pc, #112]	; (800498c <NRF24_openReadingPipe+0x8c>)
 800491c:	e9c1 2300 	strd	r2, r3, [r1]

	if (number <= 6) {
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b06      	cmp	r3, #6
 8004924:	d82d      	bhi.n	8004982 <NRF24_openReadingPipe+0x82>
		if (number < 2) {
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d808      	bhi.n	800493e <NRF24_openReadingPipe+0x3e>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <NRF24_openReadingPipe+0x90>)
 8004930:	5cd3      	ldrb	r3, [r2, r3]
 8004932:	4639      	mov	r1, r7
 8004934:	2205      	movs	r2, #5
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fe5c 	bl	80045f4 <NRF24_write_registerN>
 800493c:	e007      	b.n	800494e <NRF24_openReadingPipe+0x4e>
					(uint8_t*) (&address), 5);
		} else {
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <NRF24_openReadingPipe+0x90>)
 8004942:	5cd3      	ldrb	r3, [r2, r3]
 8004944:	4639      	mov	r1, r7
 8004946:	2201      	movs	r2, #1
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fe53 	bl	80045f4 <NRF24_write_registerN>
					(uint8_t*) (&address), 1);
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number], payload_size);
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <NRF24_openReadingPipe+0x94>)
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	4a10      	ldr	r2, [pc, #64]	; (8004998 <NRF24_openReadingPipe+0x98>)
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fe28 	bl	80045b0 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR,
				NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8004960:	2002      	movs	r0, #2
 8004962:	f7ff fdd5 	bl	8004510 <NRF24_read_register>
 8004966:	4603      	mov	r3, r0
 8004968:	b25a      	sxtb	r2, r3
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	b25b      	sxtb	r3, r3
 8004974:	4313      	orrs	r3, r2
 8004976:	b25b      	sxtb	r3, r3
		NRF24_write_register(REG_EN_RXADDR,
 8004978:	b2db      	uxtb	r3, r3
 800497a:	4619      	mov	r1, r3
 800497c:	2002      	movs	r0, #2
 800497e:	f7ff fe17 	bl	80045b0 <NRF24_write_register>
	}

}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000388 	.word	0x20000388
 8004990:	08008800 	.word	0x08008800
 8004994:	08008808 	.word	0x08008808
 8004998:	20000392 	.word	0x20000392

0800499c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	460a      	mov	r2, r1
 80049a6:	71fb      	strb	r3, [r7, #7]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,
			(delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	b25a      	sxtb	r2, r3
 80049b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	b25b      	sxtb	r3, r3
 80049bc:	4313      	orrs	r3, r2
 80049be:	b25b      	sxtb	r3, r3
	NRF24_write_register(REG_SETUP_RETR,
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4619      	mov	r1, r3
 80049c4:	2004      	movs	r0, #4
 80049c6:	f7ff fdf3 	bl	80045b0 <NRF24_write_register>
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80049dc:	237f      	movs	r3, #127	; 0x7f
 80049de:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bf28      	it	cs
 80049e8:	4613      	movcs	r3, r2
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	2005      	movs	r0, #5
 80049f0:	f7ff fdde 	bl	80045b0 <NRF24_write_register>
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size) {
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8004a06:	2320      	movs	r3, #32
 8004a08:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	bf28      	it	cs
 8004a12:	4613      	movcs	r3, r2
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <NRF24_setPayloadSize+0x2c>)
 8004a18:	701a      	strb	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000392 	.word	0x20000392

08004a2c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void) {
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
	return payload_size;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <NRF24_getPayloadSize+0x14>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000392 	.word	0x20000392

08004a44 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8004a48:	2060      	movs	r0, #96	; 0x60
 8004a4a:	f7ff fd61 	bl	8004510 <NRF24_read_register>
 8004a4e:	4603      	mov	r3, r0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	NRF24_write_register(REG_FEATURE, NRF24_read_register(
 8004a58:	201d      	movs	r0, #29
 8004a5a:	f7ff fd59 	bl	8004510 <NRF24_read_register>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f043 0306 	orr.w	r3, r3, #6
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	201d      	movs	r0, #29
 8004a6a:	f7ff fda1 	bl	80045b0 <NRF24_write_register>
	REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL));
	if (!NRF24_read_register(REG_FEATURE)) {
 8004a6e:	201d      	movs	r0, #29
 8004a70:	f7ff fd4e 	bl	8004510 <NRF24_read_register>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <NRF24_enableAckPayload+0x40>
		NRF24_ACTIVATE_cmd();
 8004a7a:	f000 f9f3 	bl	8004e64 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE, NRF24_read_register(
 8004a7e:	201d      	movs	r0, #29
 8004a80:	f7ff fd46 	bl	8004510 <NRF24_read_register>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f043 0306 	orr.w	r3, r3, #6
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	201d      	movs	r0, #29
 8004a90:	f7ff fd8e 	bl	80045b0 <NRF24_write_register>
		REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL));
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,
			NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004a94:	201c      	movs	r0, #28
 8004a96:	f7ff fd3b 	bl	8004510 <NRF24_read_register>
 8004a9a:	4603      	mov	r3, r0
	NRF24_write_register(REG_DYNPD,
 8004a9c:	f043 0303 	orr.w	r3, r3, #3
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	201c      	movs	r0, #28
 8004aa6:	f7ff fd83 	bl	80045b0 <NRF24_write_register>
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 8004ab4:	201d      	movs	r0, #29
 8004ab6:	f7ff fd2b 	bl	8004510 <NRF24_read_register>
 8004aba:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 8004abc:	f043 0304 	orr.w	r3, r3, #4
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	201d      	movs	r0, #29
 8004ac6:	f7ff fd73 	bl	80045b0 <NRF24_write_register>
	if (!NRF24_read_register(REG_FEATURE)) {
 8004aca:	201d      	movs	r0, #29
 8004acc:	f7ff fd20 	bl	8004510 <NRF24_read_register>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10c      	bne.n	8004af0 <NRF24_enableDynamicPayloads+0x40>
		NRF24_ACTIVATE_cmd();
 8004ad6:	f000 f9c5 	bl	8004e64 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,
				NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 8004ada:	201d      	movs	r0, #29
 8004adc:	f7ff fd18 	bl	8004510 <NRF24_read_register>
 8004ae0:	4603      	mov	r3, r0
		NRF24_write_register(REG_FEATURE,
 8004ae2:	f043 0304 	orr.w	r3, r3, #4
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4619      	mov	r1, r3
 8004aea:	201d      	movs	r0, #29
 8004aec:	f7ff fd60 	bl	80045b0 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,
			NRF24_read_register(
 8004af0:	201c      	movs	r0, #28
 8004af2:	f7ff fd0d 	bl	8004510 <NRF24_read_register>
 8004af6:	4603      	mov	r3, r0
	NRF24_write_register(REG_DYNPD,
 8004af8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	201c      	movs	r0, #28
 8004b02:	f7ff fd55 	bl	80045b0 <NRF24_write_register>
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;
 8004b06:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <NRF24_enableDynamicPayloads+0x60>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]

}
 8004b0c:	bf00      	nop
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000393 	.word	0x20000393

08004b14 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8004b18:	201d      	movs	r0, #29
 8004b1a:	f7ff fcf9 	bl	8004510 <NRF24_read_register>
 8004b1e:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	4619      	mov	r1, r3
 8004b28:	201d      	movs	r0, #29
 8004b2a:	f7ff fd41 	bl	80045b0 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD, 0);
 8004b2e:	2100      	movs	r1, #0
 8004b30:	201c      	movs	r0, #28
 8004b32:	f7ff fd3d 	bl	80045b0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8004b36:	4b02      	ldr	r3, [pc, #8]	; (8004b40 <NRF24_disableDynamicPayloads+0x2c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000393 	.word	0x20000393

08004b44 <NRF24_setAutoAck>:
//27. Check if module is NRF24L01+ or normal module
bool NRF24_isNRF_Plus(void) {
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	if (enable)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <NRF24_setAutoAck+0x1a>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8004b54:	213f      	movs	r1, #63	; 0x3f
 8004b56:	2001      	movs	r0, #1
 8004b58:	f7ff fd2a 	bl	80045b0 <NRF24_write_register>
	else
		NRF24_write_register(REG_EN_AA, 0x00);
}
 8004b5c:	e003      	b.n	8004b66 <NRF24_setAutoAck+0x22>
		NRF24_write_register(REG_EN_AA, 0x00);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	2001      	movs	r0, #1
 8004b62:	f7ff fd25 	bl	80045b0 <NRF24_write_register>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	71fb      	strb	r3, [r7, #7]

	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8004b78:	2006      	movs	r0, #6
 8004b7a:	f7ff fcc9 	bl	8004510 <NRF24_read_register>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	f023 0306 	bic.w	r3, r3, #6
 8004b88:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d104      	bne.n	8004b9a <NRF24_setPALevel+0x2c>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	f043 0306 	orr.w	r3, r3, #6
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e019      	b.n	8004bce <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m6dB) {
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d104      	bne.n	8004baa <NRF24_setPALevel+0x3c>
		setup |= _BV(RF_PWR_HIGH);
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	f043 0304 	orr.w	r3, r3, #4
 8004ba6:	73fb      	strb	r3, [r7, #15]
 8004ba8:	e011      	b.n	8004bce <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m12dB) {
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d104      	bne.n	8004bba <NRF24_setPALevel+0x4c>
		setup |= _BV(RF_PWR_LOW);
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	f043 0302 	orr.w	r3, r3, #2
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e009      	b.n	8004bce <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m18dB) {
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <NRF24_setPALevel+0x60>
		// nothing
	} else if (level == RF24_PA_ERROR) {
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d103      	bne.n	8004bce <NRF24_setPALevel+0x60>
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	f043 0306 	orr.w	r3, r3, #6
 8004bcc:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	2006      	movs	r0, #6
 8004bd4:	f7ff fcec 	bl	80045b0 <NRF24_write_register>
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <NRF24_setDataRate>:
 return result;
 }

 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004bea:	2300      	movs	r3, #0
 8004bec:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8004bee:	2006      	movs	r0, #6
 8004bf0:	f7ff fc8e 	bl	8004510 <NRF24_read_register>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <NRF24_setDataRate+0x88>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8004bfe:	7bbb      	ldrb	r3, [r7, #14]
 8004c00:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004c04:	73bb      	strb	r3, [r7, #14]

	if (speed == RF24_250KBPS) {
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d107      	bne.n	8004c1c <NRF24_setDataRate+0x3c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <NRF24_setDataRate+0x88>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 8004c12:	7bbb      	ldrb	r3, [r7, #14]
 8004c14:	f043 0320 	orr.w	r3, r3, #32
 8004c18:	73bb      	strb	r3, [r7, #14]
 8004c1a:	e00d      	b.n	8004c38 <NRF24_setDataRate+0x58>
	} else {
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS) {
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <NRF24_setDataRate+0x52>
			wide_band = true;
 8004c22:	4b11      	ldr	r3, [pc, #68]	; (8004c68 <NRF24_setDataRate+0x88>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8004c28:	7bbb      	ldrb	r3, [r7, #14]
 8004c2a:	f043 0308 	orr.w	r3, r3, #8
 8004c2e:	73bb      	strb	r3, [r7, #14]
 8004c30:	e002      	b.n	8004c38 <NRF24_setDataRate+0x58>
		} else {
			// 1Mbs
			wide_band = false;
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <NRF24_setDataRate+0x88>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 8004c38:	7bbb      	ldrb	r3, [r7, #14]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	2006      	movs	r0, #6
 8004c3e:	f7ff fcb7 	bl	80045b0 <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 8004c42:	2006      	movs	r0, #6
 8004c44:	f7ff fc64 	bl	8004510 <NRF24_read_register>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d102      	bne.n	8004c58 <NRF24_setDataRate+0x78>
		result = true;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e002      	b.n	8004c5e <NRF24_setDataRate+0x7e>
	} else {
		wide_band = false;
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <NRF24_setDataRate+0x88>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000394 	.word	0x20000394

08004c6c <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG)
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7ff fc4a 	bl	8004510 <NRF24_read_register>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f023 030c 	bic.w	r3, r3, #12
 8004c82:	73fb      	strb	r3, [r7, #15]
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00f      	beq.n	8004caa <NRF24_setCRCLength+0x3e>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d104      	bne.n	8004c9a <NRF24_setCRCLength+0x2e>
		config |= _BV(BIT_EN_CRC);
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e007      	b.n	8004caa <NRF24_setCRCLength+0x3e>
	} else {
		config |= _BV(BIT_EN_CRC);
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	f043 0308 	orr.w	r3, r3, #8
 8004ca0:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	f043 0304 	orr.w	r3, r3, #4
 8004ca8:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config);
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	4619      	mov	r1, r3
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7ff fc7e 	bl	80045b0 <NRF24_write_register>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f7ff fc25 	bl	8004510 <NRF24_read_register>
 8004cc6:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 8004cc8:	f023 0302 	bic.w	r3, r3, #2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	4619      	mov	r1, r3
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7ff fc6d 	bl	80045b0 <NRF24_write_register>
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t *pipe_num) {
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004ce2:	f7ff fd11 	bl	8004708 <NRF24_get_status>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
	bool result = (status & _BV(BIT_RX_DR));
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	73bb      	strb	r3, [r7, #14]

	if (result) {
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d017      	beq.n	8004d30 <NRF24_availablePipe+0x56>
		// If the caller wants the pipe number, include that
		if (pipe_num)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <NRF24_availablePipe+0x3c>
			*pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8004d16:	2140      	movs	r1, #64	; 0x40
 8004d18:	2007      	movs	r0, #7
 8004d1a:	f7ff fc49 	bl	80045b0 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS)) {
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <NRF24_availablePipe+0x56>
			NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8004d28:	2120      	movs	r1, #32
 8004d2a:	2007      	movs	r0, #7
 8004d2c:	f7ff fc40 	bl	80045b0 <NRF24_write_register>
		}
	}
	return result;
 8004d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite(const void *buf, uint8_t len) {
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	NRF24_CE(0);
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7ff fbca 	bl	80044e0 <NRF24_CE>
	NRF24_write_register(REG_CONFIG,
			(NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP))
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7ff fbdf 	bl	8004510 <NRF24_read_register>
 8004d52:	4603      	mov	r3, r0
					& ~_BV(BIT_PRIM_RX));
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	b2db      	uxtb	r3, r3
	NRF24_write_register(REG_CONFIG,
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7ff fc24 	bl	80045b0 <NRF24_write_register>
	NRF24_CE(1);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7ff fbb9 	bl	80044e0 <NRF24_CE>
	NRF24_DelayMicroSeconds(150);
 8004d6e:	2096      	movs	r0, #150	; 0x96
 8004d70:	f7ff fb7c 	bl	800446c <NRF24_DelayMicroSeconds>
	// Send the payload
	NRF24_write_payload(buf, len);
 8004d74:	78fb      	ldrb	r3, [r7, #3]
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fc63 	bl	8004644 <NRF24_write_payload>
	// Enable Tx for 15usec
	NRF24_CE(1);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7ff fbae 	bl	80044e0 <NRF24_CE>
	NRF24_DelayMicroSeconds(15);
 8004d84:	200f      	movs	r0, #15
 8004d86:	f7ff fb71 	bl	800446c <NRF24_DelayMicroSeconds>
	NRF24_CE(0);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7ff fba8 	bl	80044e0 <NRF24_CE>
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void *buf, uint8_t len) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	71fb      	strb	r3, [r7, #7]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71bb      	strb	r3, [r7, #6]
	const uint8_t *current = (uint8_t*) buf;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8004dac:	2320      	movs	r3, #32
 8004dae:	72fb      	strb	r3, [r7, #11]
	uint8_t data_len = MIN(len, max_payload_size);
 8004db0:	7afa      	ldrb	r2, [r7, #11]
 8004db2:	79bb      	ldrb	r3, [r7, #6]
 8004db4:	4293      	cmp	r3, r2
 8004db6:	bf28      	it	cs
 8004db8:	4613      	movcs	r3, r2
 8004dba:	72bb      	strb	r3, [r7, #10]
	NRF24_CSN(0);
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f7ff fb77 	bl	80044b0 <NRF24_CSN>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | (pipe & 0x7), current, data_len);
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	b25b      	sxtb	r3, r3
 8004dcc:	f063 0357 	orn	r3, r3, #87	; 0x57
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	7aba      	ldrb	r2, [r7, #10]
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fc0b 	bl	80045f4 <NRF24_write_registerN>
	NRF24_CSN(1);
 8004dde:	2001      	movs	r0, #1
 8004de0:	f7ff fb66 	bl	80044b0 <NRF24_CSN>
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <NRF24_whatHappened>:
	bool result = ack_payload_available;
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004df8:	f7ff fc86 	bl	8004708 <NRF24_get_status>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,
 8004e06:	2170      	movs	r1, #112	; 0x70
 8004e08:	2007      	movs	r0, #7
 8004e0a:	f7ff fbd1 	bl	80045b0 <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf14      	ite	ne
 8004e18:	2301      	movne	r3, #1
 8004e1a:	2300      	moveq	r3, #0
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	701a      	strb	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <NRF24_resetStatus>:
bool NRF24_testRPD(void) {
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
 8004e52:	b580      	push	{r7, lr}
 8004e54:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,
 8004e56:	2170      	movs	r1, #112	; 0x70
 8004e58:	2007      	movs	r0, #7
 8004e5a:	f7ff fba9 	bl	80045b0 <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_CSN(0);
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	f7ff fb20 	bl	80044b0 <NRF24_CSN>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004e70:	2350      	movs	r3, #80	; 0x50
 8004e72:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004e74:	2373      	movs	r3, #115	; 0x73
 8004e76:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspi2, cmdRxBuf, 2, 100);
 8004e78:	1d39      	adds	r1, r7, #4
 8004e7a:	2364      	movs	r3, #100	; 0x64
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	4805      	ldr	r0, [pc, #20]	; (8004e94 <NRF24_ACTIVATE_cmd+0x30>)
 8004e80:	f7fe f889 	bl	8002f96 <HAL_SPI_Transmit>
	NRF24_CSN(1);
 8004e84:	2001      	movs	r0, #1
 8004e86:	f7ff fb13 	bl	80044b0 <NRF24_CSN>
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200002dc 	.word	0x200002dc

08004e98 <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	printf("\t****************************************************\r\n");
 8004e9e:	487c      	ldr	r0, [pc, #496]	; (8005090 <printRadioSettings+0x1f8>)
 8004ea0:	f001 f884 	bl	8005fac <puts>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f7ff fb33 	bl	8004510 <NRF24_read_register>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71fb      	strb	r3, [r7, #7]
	if (reg8Val & (1 << 3)) {
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00c      	beq.n	8004ed2 <printRadioSettings+0x3a>
		if (reg8Val & (1 << 2))
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <printRadioSettings+0x32>
			printf("\tCRC:\tEnabled, 2 Bytes\r\n");
 8004ec2:	4874      	ldr	r0, [pc, #464]	; (8005094 <printRadioSettings+0x1fc>)
 8004ec4:	f001 f872 	bl	8005fac <puts>
 8004ec8:	e006      	b.n	8004ed8 <printRadioSettings+0x40>
		else
			printf("\tCRC:\tEnabled, 1 Byte\r\n");
 8004eca:	4873      	ldr	r0, [pc, #460]	; (8005098 <printRadioSettings+0x200>)
 8004ecc:	f001 f86e 	bl	8005fac <puts>
 8004ed0:	e002      	b.n	8004ed8 <printRadioSettings+0x40>
	} else {
		printf("\tCRC:\tDisabled\r\n");
 8004ed2:	4872      	ldr	r0, [pc, #456]	; (800509c <printRadioSettings+0x204>)
 8004ed4:	f001 f86a 	bl	8005fac <puts>
	}

	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004ed8:	2001      	movs	r0, #1
 8004eda:	f7ff fb19 	bl	8004510 <NRF24_read_register>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	71fb      	strb	r3, [r7, #7]
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bfcc      	ite	gt
 8004eec:	2301      	movgt	r3, #1
 8004eee:	2300      	movle	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfcc      	ite	gt
 8004efe:	2301      	movgt	r3, #1
 8004f00:	2300      	movle	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	f003 0304 	and.w	r3, r3, #4
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfcc      	ite	gt
 8004f10:	2301      	movgt	r3, #1
 8004f12:	2300      	movle	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	bfcc      	ite	gt
 8004f22:	2301      	movgt	r3, #1
 8004f24:	2300      	movle	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfcc      	ite	gt
 8004f34:	2301      	movgt	r3, #1
 8004f36:	2300      	movle	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfcc      	ite	gt
 8004f46:	2301      	movgt	r3, #1
 8004f48:	2300      	movle	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	9302      	str	r3, [sp, #8]
 8004f4e:	9101      	str	r1, [sp, #4]
 8004f50:	9200      	str	r2, [sp, #0]
 8004f52:	462b      	mov	r3, r5
 8004f54:	4622      	mov	r2, r4
 8004f56:	4601      	mov	r1, r0
 8004f58:	4851      	ldr	r0, [pc, #324]	; (80050a0 <printRadioSettings+0x208>)
 8004f5a:	f000 ffc1 	bl	8005ee0 <iprintf>

	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004f5e:	2002      	movs	r0, #2
 8004f60:	f7ff fad6 	bl	8004510 <NRF24_read_register>
 8004f64:	4603      	mov	r3, r0
 8004f66:	71fb      	strb	r3, [r7, #7]
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfcc      	ite	gt
 8004f72:	2301      	movgt	r3, #1
 8004f74:	2300      	movle	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bfcc      	ite	gt
 8004f84:	2301      	movgt	r3, #1
 8004f86:	2300      	movle	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bfcc      	ite	gt
 8004f96:	2301      	movgt	r3, #1
 8004f98:	2300      	movle	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bfcc      	ite	gt
 8004fa8:	2301      	movgt	r3, #1
 8004faa:	2300      	movle	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfcc      	ite	gt
 8004fba:	2301      	movgt	r3, #1
 8004fbc:	2300      	movle	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bfcc      	ite	gt
 8004fcc:	2301      	movgt	r3, #1
 8004fce:	2300      	movle	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	9101      	str	r1, [sp, #4]
 8004fd6:	9200      	str	r2, [sp, #0]
 8004fd8:	462b      	mov	r3, r5
 8004fda:	4622      	mov	r2, r4
 8004fdc:	4601      	mov	r1, r0
 8004fde:	4831      	ldr	r0, [pc, #196]	; (80050a4 <printRadioSettings+0x20c>)
 8004fe0:	f000 ff7e 	bl	8005ee0 <iprintf>

	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 8004fe4:	2003      	movs	r0, #3
 8004fe6:	f7ff fa93 	bl	8004510 <NRF24_read_register>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	71fb      	strb	r3, [r7, #7]
	reg8Val += 2;
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	3302      	adds	r3, #2
 8004ff6:	71fb      	strb	r3, [r7, #7]
	printf("\tSETUP_AW:\t%d bytes \r\n", reg8Val);
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	482a      	ldr	r0, [pc, #168]	; (80050a8 <printRadioSettings+0x210>)
 8004ffe:	f000 ff6f 	bl	8005ee0 <iprintf>

	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8005002:	2005      	movs	r0, #5
 8005004:	f7ff fa84 	bl	8004510 <NRF24_read_register>
 8005008:	4603      	mov	r3, r0
 800500a:	71fb      	strb	r3, [r7, #7]
	printf("\tRF_CH:\t%d CH\r\n", reg8Val & 0x7F);
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	4619      	mov	r1, r3
 8005014:	4825      	ldr	r0, [pc, #148]	; (80050ac <printRadioSettings+0x214>)
 8005016:	f000 ff63 	bl	8005ee0 <iprintf>

	//f1) Data rate
	reg8Val = NRF24_read_register(0x06) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 800501a:	2006      	movs	r0, #6
 800501c:	f7ff fa78 	bl	8004510 <NRF24_read_register>
 8005020:	4603      	mov	r3, r0
 8005022:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005026:	71fb      	strb	r3, [r7, #7]
	if (reg8Val == _BV(RF_DR_LOW))
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	2b20      	cmp	r3, #32
 800502c:	d103      	bne.n	8005036 <printRadioSettings+0x19e>
		printf("\tData Rate:\t250Kbps\r\n");	// '10' = 250KBPS
 800502e:	4820      	ldr	r0, [pc, #128]	; (80050b0 <printRadioSettings+0x218>)
 8005030:	f000 ffbc 	bl	8005fac <puts>
 8005034:	e00b      	b.n	800504e <printRadioSettings+0x1b6>
	else if (reg8Val & _BV(RF_DR_HIGH))
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <printRadioSettings+0x1b0>
		printf("\tData Rate:\t2Mbps\r\n");
 8005040:	481c      	ldr	r0, [pc, #112]	; (80050b4 <printRadioSettings+0x21c>)
 8005042:	f000 ffb3 	bl	8005fac <puts>
 8005046:	e002      	b.n	800504e <printRadioSettings+0x1b6>
	else {
		printf("\tData Rate:\t1Mbps\r\n");
 8005048:	481b      	ldr	r0, [pc, #108]	; (80050b8 <printRadioSettings+0x220>)
 800504a:	f000 ffaf 	bl	8005fac <puts>
	}

	//f2) Data rate
	reg8Val = NRF24_read_register(0x06);
 800504e:	2006      	movs	r0, #6
 8005050:	f7ff fa5e 	bl	8004510 <NRF24_read_register>
 8005054:	4603      	mov	r3, r0
 8005056:	71fb      	strb	r3, [r7, #7]

	reg8Val &= (3 << 1);
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	f003 0306 	and.w	r3, r3, #6
 800505e:	71fb      	strb	r3, [r7, #7]
	reg8Val = (reg8Val >> 1);
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	71fb      	strb	r3, [r7, #7]
	if (reg8Val == 0)
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <printRadioSettings+0x1dc>
		printf("\tRF_PWR:\t-18dB\r\n");
 800506c:	4813      	ldr	r0, [pc, #76]	; (80050bc <printRadioSettings+0x224>)
 800506e:	f000 ff9d 	bl	8005fac <puts>
 8005072:	e02f      	b.n	80050d4 <printRadioSettings+0x23c>
	else if (reg8Val == 1)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d103      	bne.n	8005082 <printRadioSettings+0x1ea>
		printf("\tRF_PWR:\t-12dB\r\n");
 800507a:	4811      	ldr	r0, [pc, #68]	; (80050c0 <printRadioSettings+0x228>)
 800507c:	f000 ff96 	bl	8005fac <puts>
 8005080:	e028      	b.n	80050d4 <printRadioSettings+0x23c>
	else if (reg8Val == 2)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d11f      	bne.n	80050c8 <printRadioSettings+0x230>
		printf("\tRF_PWR:\t-6dB\r\n");
 8005088:	480e      	ldr	r0, [pc, #56]	; (80050c4 <printRadioSettings+0x22c>)
 800508a:	f000 ff8f 	bl	8005fac <puts>
 800508e:	e021      	b.n	80050d4 <printRadioSettings+0x23c>
 8005090:	08008324 	.word	0x08008324
 8005094:	0800835c 	.word	0x0800835c
 8005098:	08008374 	.word	0x08008374
 800509c:	0800838c 	.word	0x0800838c
 80050a0:	0800839c 	.word	0x0800839c
 80050a4:	080083d0 	.word	0x080083d0
 80050a8:	08008408 	.word	0x08008408
 80050ac:	08008420 	.word	0x08008420
 80050b0:	08008430 	.word	0x08008430
 80050b4:	08008448 	.word	0x08008448
 80050b8:	0800845c 	.word	0x0800845c
 80050bc:	08008470 	.word	0x08008470
 80050c0:	08008480 	.word	0x08008480
 80050c4:	08008490 	.word	0x08008490
	else if (reg8Val == 3)
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d102      	bne.n	80050d4 <printRadioSettings+0x23c>
		printf("\tRF_PWR:\t0dB\r\n");
 80050ce:	488e      	ldr	r0, [pc, #568]	; (8005308 <printRadioSettings+0x470>)
 80050d0:	f000 ff6c 	bl	8005fac <puts>

	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80050d4:	463b      	mov	r3, r7
 80050d6:	2205      	movs	r2, #5
 80050d8:	4619      	mov	r1, r3
 80050da:	200a      	movs	r0, #10
 80050dc:	f7ff fa40 	bl	8004560 <NRF24_read_registerN>
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 80050e0:	793b      	ldrb	r3, [r7, #4]
 80050e2:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 80050e4:	78fb      	ldrb	r3, [r7, #3]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 80050e6:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 80050e8:	78bb      	ldrb	r3, [r7, #2]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 80050ea:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 80050ec:	787b      	ldrb	r3, [r7, #1]
 80050ee:	783a      	ldrb	r2, [r7, #0]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 80050f0:	9201      	str	r2, [sp, #4]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4623      	mov	r3, r4
 80050f6:	4602      	mov	r2, r0
 80050f8:	4884      	ldr	r0, [pc, #528]	; (800530c <printRadioSettings+0x474>)
 80050fa:	f000 fef1 	bl	8005ee0 <iprintf>

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 80050fe:	463b      	mov	r3, r7
 8005100:	2205      	movs	r2, #5
 8005102:	4619      	mov	r1, r3
 8005104:	200b      	movs	r0, #11
 8005106:	f7ff fa2b 	bl	8004560 <NRF24_read_registerN>
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 800510a:	793b      	ldrb	r3, [r7, #4]
 800510c:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 800510e:	78fb      	ldrb	r3, [r7, #3]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8005110:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8005112:	78bb      	ldrb	r3, [r7, #2]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8005114:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8005116:	787b      	ldrb	r3, [r7, #1]
 8005118:	783a      	ldrb	r2, [r7, #0]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 800511a:	9201      	str	r2, [sp, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	4623      	mov	r3, r4
 8005120:	4602      	mov	r2, r0
 8005122:	487b      	ldr	r0, [pc, #492]	; (8005310 <printRadioSettings+0x478>)
 8005124:	f000 fedc 	bl	8005ee0 <iprintf>

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8005128:	463b      	mov	r3, r7
 800512a:	2201      	movs	r2, #1
 800512c:	4619      	mov	r1, r3
 800512e:	200c      	movs	r0, #12
 8005130:	f7ff fa16 	bl	8004560 <NRF24_read_registerN>
	printf("\tRX_Pipe2 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8005134:	783b      	ldrb	r3, [r7, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	4876      	ldr	r0, [pc, #472]	; (8005314 <printRadioSettings+0x47c>)
 800513a:	f000 fed1 	bl	8005ee0 <iprintf>

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 800513e:	463b      	mov	r3, r7
 8005140:	2201      	movs	r2, #1
 8005142:	4619      	mov	r1, r3
 8005144:	200d      	movs	r0, #13
 8005146:	f7ff fa0b 	bl	8004560 <NRF24_read_registerN>
	printf("\tRX_Pipe3 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 800514a:	783b      	ldrb	r3, [r7, #0]
 800514c:	4619      	mov	r1, r3
 800514e:	4872      	ldr	r0, [pc, #456]	; (8005318 <printRadioSettings+0x480>)
 8005150:	f000 fec6 	bl	8005ee0 <iprintf>

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 8005154:	463b      	mov	r3, r7
 8005156:	2201      	movs	r2, #1
 8005158:	4619      	mov	r1, r3
 800515a:	200e      	movs	r0, #14
 800515c:	f7ff fa00 	bl	8004560 <NRF24_read_registerN>
	printf("\tRX_Pipe4 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8005160:	783b      	ldrb	r3, [r7, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	486d      	ldr	r0, [pc, #436]	; (800531c <printRadioSettings+0x484>)
 8005166:	f000 febb 	bl	8005ee0 <iprintf>

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 800516a:	463b      	mov	r3, r7
 800516c:	2201      	movs	r2, #1
 800516e:	4619      	mov	r1, r3
 8005170:	200f      	movs	r0, #15
 8005172:	f7ff f9f5 	bl	8004560 <NRF24_read_registerN>
	printf("\tRX_Pipe5 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8005176:	783b      	ldrb	r3, [r7, #0]
 8005178:	4619      	mov	r1, r3
 800517a:	4869      	ldr	r0, [pc, #420]	; (8005320 <printRadioSettings+0x488>)
 800517c:	f000 feb0 	bl	8005ee0 <iprintf>

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 8005180:	463b      	mov	r3, r7
 8005182:	2205      	movs	r2, #5
 8005184:	4619      	mov	r1, r3
 8005186:	2010      	movs	r0, #16
 8005188:	f7ff f9ea 	bl	8004560 <NRF24_read_registerN>
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 800518c:	793b      	ldrb	r3, [r7, #4]
 800518e:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8005190:	78fb      	ldrb	r3, [r7, #3]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8005192:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8005194:	78bb      	ldrb	r3, [r7, #2]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8005196:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8005198:	787b      	ldrb	r3, [r7, #1]
 800519a:	783a      	ldrb	r2, [r7, #0]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 800519c:	9201      	str	r2, [sp, #4]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4623      	mov	r3, r4
 80051a2:	4602      	mov	r2, r0
 80051a4:	485f      	ldr	r0, [pc, #380]	; (8005324 <printRadioSettings+0x48c>)
 80051a6:	f000 fe9b 	bl	8005ee0 <iprintf>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80051aa:	2011      	movs	r0, #17
 80051ac:	f7ff f9b0 	bl	8004510 <NRF24_read_register>
 80051b0:	4603      	mov	r3, r0
 80051b2:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P0:\t%d bytes \r\n", reg8Val & 0x3F);
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ba:	4619      	mov	r1, r3
 80051bc:	485a      	ldr	r0, [pc, #360]	; (8005328 <printRadioSettings+0x490>)
 80051be:	f000 fe8f 	bl	8005ee0 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 1);
 80051c2:	2012      	movs	r0, #18
 80051c4:	f7ff f9a4 	bl	8004510 <NRF24_read_register>
 80051c8:	4603      	mov	r3, r0
 80051ca:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P1:\t%d bytes \r\n", reg8Val & 0x3F);
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d2:	4619      	mov	r1, r3
 80051d4:	4855      	ldr	r0, [pc, #340]	; (800532c <printRadioSettings+0x494>)
 80051d6:	f000 fe83 	bl	8005ee0 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 2);
 80051da:	2013      	movs	r0, #19
 80051dc:	f7ff f998 	bl	8004510 <NRF24_read_register>
 80051e0:	4603      	mov	r3, r0
 80051e2:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P2:\t%d bytes \r\n", reg8Val & 0x3F);
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ea:	4619      	mov	r1, r3
 80051ec:	4850      	ldr	r0, [pc, #320]	; (8005330 <printRadioSettings+0x498>)
 80051ee:	f000 fe77 	bl	8005ee0 <iprintf>

	//(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11 + 3);
 80051f2:	2014      	movs	r0, #20
 80051f4:	f7ff f98c 	bl	8004510 <NRF24_read_register>
 80051f8:	4603      	mov	r3, r0
 80051fa:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P3:\t%d bytes \r\n", reg8Val & 0x3F);
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005202:	4619      	mov	r1, r3
 8005204:	484b      	ldr	r0, [pc, #300]	; (8005334 <printRadioSettings+0x49c>)
 8005206:	f000 fe6b 	bl	8005ee0 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 4);
 800520a:	2015      	movs	r0, #21
 800520c:	f7ff f980 	bl	8004510 <NRF24_read_register>
 8005210:	4603      	mov	r3, r0
 8005212:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P4:\t%d bytes \r\n", reg8Val & 0x3F);
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800521a:	4619      	mov	r1, r3
 800521c:	4846      	ldr	r0, [pc, #280]	; (8005338 <printRadioSettings+0x4a0>)
 800521e:	f000 fe5f 	bl	8005ee0 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 5);
 8005222:	2016      	movs	r0, #22
 8005224:	f7ff f974 	bl	8004510 <NRF24_read_register>
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P5:\t%d bytes \r\n", reg8Val & 0x3F);
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005232:	4619      	mov	r1, r3
 8005234:	4841      	ldr	r0, [pc, #260]	; (800533c <printRadioSettings+0x4a4>)
 8005236:	f000 fe53 	bl	8005ee0 <iprintf>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800523a:	201c      	movs	r0, #28
 800523c:	f7ff f968 	bl	8004510 <NRF24_read_register>
 8005240:	4603      	mov	r3, r0
 8005242:	71fb      	strb	r3, [r7, #7]
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	f003 0301 	and.w	r3, r3, #1
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfcc      	ite	gt
 800524e:	2301      	movgt	r3, #1
 8005250:	2300      	movle	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	f003 0302 	and.w	r3, r3, #2
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 800525c:	2b00      	cmp	r3, #0
 800525e:	bfcc      	ite	gt
 8005260:	2301      	movgt	r3, #1
 8005262:	2300      	movle	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	f003 0304 	and.w	r3, r3, #4
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfcc      	ite	gt
 8005272:	2301      	movgt	r3, #1
 8005274:	2300      	movle	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	f003 0308 	and.w	r3, r3, #8
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfcc      	ite	gt
 8005284:	2301      	movgt	r3, #1
 8005286:	2300      	movle	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	f003 0310 	and.w	r3, r3, #16
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005292:	2b00      	cmp	r3, #0
 8005294:	bfcc      	ite	gt
 8005296:	2301      	movgt	r3, #1
 8005298:	2300      	movle	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f003 0320 	and.w	r3, r3, #32
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfcc      	ite	gt
 80052a8:	2301      	movgt	r3, #1
 80052aa:	2300      	movle	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	9302      	str	r3, [sp, #8]
 80052b0:	9101      	str	r1, [sp, #4]
 80052b2:	9200      	str	r2, [sp, #0]
 80052b4:	462b      	mov	r3, r5
 80052b6:	4622      	mov	r2, r4
 80052b8:	4601      	mov	r1, r0
 80052ba:	4821      	ldr	r0, [pc, #132]	; (8005340 <printRadioSettings+0x4a8>)
 80052bc:	f000 fe10 	bl	8005ee0 <iprintf>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80052c0:	201d      	movs	r0, #29
 80052c2:	f7ff f925 	bl	8004510 <NRF24_read_register>
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
	if (reg8Val & (1 << 2))
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <printRadioSettings+0x444>
		printf("\tEN_DPL:\tEnabled \r\n");
 80052d4:	481b      	ldr	r0, [pc, #108]	; (8005344 <printRadioSettings+0x4ac>)
 80052d6:	f000 fe69 	bl	8005fac <puts>
 80052da:	e002      	b.n	80052e2 <printRadioSettings+0x44a>
	else
		printf("\tEN_DPL:\tDisabled \r\n");
 80052dc:	481a      	ldr	r0, [pc, #104]	; (8005348 <printRadioSettings+0x4b0>)
 80052de:	f000 fe65 	bl	8005fac <puts>

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <printRadioSettings+0x45c>
		printf("\tEN_ACK_PAY:\tEnabled \r\n");
 80052ec:	4817      	ldr	r0, [pc, #92]	; (800534c <printRadioSettings+0x4b4>)
 80052ee:	f000 fe5d 	bl	8005fac <puts>
 80052f2:	e002      	b.n	80052fa <printRadioSettings+0x462>
	else
		printf("\tEN_ACK_PAY:\tDisabled \r\n");
 80052f4:	4816      	ldr	r0, [pc, #88]	; (8005350 <printRadioSettings+0x4b8>)
 80052f6:	f000 fe59 	bl	8005fac <puts>
	printf("\t****************************************************\r\n");
 80052fa:	4816      	ldr	r0, [pc, #88]	; (8005354 <printRadioSettings+0x4bc>)
 80052fc:	f000 fe56 	bl	8005fac <puts>
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bdb0      	pop	{r4, r5, r7, pc}
 8005308:	080084a0 	.word	0x080084a0
 800530c:	080084b0 	.word	0x080084b0
 8005310:	080084dc 	.word	0x080084dc
 8005314:	08008508 	.word	0x08008508
 8005318:	0800852c 	.word	0x0800852c
 800531c:	08008550 	.word	0x08008550
 8005320:	08008574 	.word	0x08008574
 8005324:	08008598 	.word	0x08008598
 8005328:	080085c0 	.word	0x080085c0
 800532c:	080085d8 	.word	0x080085d8
 8005330:	080085f0 	.word	0x080085f0
 8005334:	08008608 	.word	0x08008608
 8005338:	08008620 	.word	0x08008620
 800533c:	08008638 	.word	0x08008638
 8005340:	08008650 	.word	0x08008650
 8005344:	0800868c 	.word	0x0800868c
 8005348:	080086a0 	.word	0x080086a0
 800534c:	080086b4 	.word	0x080086b4
 8005350:	080086cc 	.word	0x080086cc
 8005354:	08008324 	.word	0x08008324

08005358 <NRF24_SoftwareReset>:
			_BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 0)));
	printf("\t\r\n-------------------------\r\n");

}

void NRF24_SoftwareReset(void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
	//Put pins to idle state
	NRF24_CSN(1);
 800535e:	2001      	movs	r0, #1
 8005360:	f7ff f8a6 	bl	80044b0 <NRF24_CSN>
	NRF24_CE(0);
 8005364:	2000      	movs	r0, #0
 8005366:	f7ff f8bb 	bl	80044e0 <NRF24_CE>
	//5 ms initial delay
	HAL_Delay(5);
 800536a:	2005      	movs	r0, #5
 800536c:	f7fc fb08 	bl	8001980 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8005370:	2108      	movs	r1, #8
 8005372:	2000      	movs	r0, #0
 8005374:	f7ff f91c 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8005378:	213f      	movs	r1, #63	; 0x3f
 800537a:	2001      	movs	r0, #1
 800537c:	f7ff f918 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8005380:	2103      	movs	r1, #3
 8005382:	2002      	movs	r0, #2
 8005384:	f7ff f914 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8005388:	2103      	movs	r1, #3
 800538a:	2003      	movs	r0, #3
 800538c:	f7ff f910 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8005390:	2103      	movs	r1, #3
 8005392:	2004      	movs	r0, #4
 8005394:	f7ff f90c 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8005398:	2102      	movs	r1, #2
 800539a:	2005      	movs	r0, #5
 800539c:	f7ff f908 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0F);
 80053a0:	210f      	movs	r1, #15
 80053a2:	2006      	movs	r0, #6
 80053a4:	f7ff f904 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80053a8:	210e      	movs	r1, #14
 80053aa:	2007      	movs	r0, #7
 80053ac:	f7ff f900 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80053b0:	2100      	movs	r1, #0
 80053b2:	2008      	movs	r0, #8
 80053b4:	f7ff f8fc 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80053b8:	2100      	movs	r1, #0
 80053ba:	2009      	movs	r0, #9
 80053bc:	f7ff f8f8 	bl	80045b0 <NRF24_write_register>
	uint8_t pipeAddrVar[5];
	pipeAddrVar[4] = 0xE7;
 80053c0:	23e7      	movs	r3, #231	; 0xe7
 80053c2:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xE7;
 80053c4:	23e7      	movs	r3, #231	; 0xe7
 80053c6:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xE7;
 80053c8:	23e7      	movs	r3, #231	; 0xe7
 80053ca:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xE7;
 80053cc:	23e7      	movs	r3, #231	; 0xe7
 80053ce:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xE7;
 80053d0:	23e7      	movs	r3, #231	; 0xe7
 80053d2:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80053d4:	463b      	mov	r3, r7
 80053d6:	2205      	movs	r2, #5
 80053d8:	4619      	mov	r1, r3
 80053da:	200a      	movs	r0, #10
 80053dc:	f7ff f90a 	bl	80045f4 <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 80053e0:	23c2      	movs	r3, #194	; 0xc2
 80053e2:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xC2;
 80053e4:	23c2      	movs	r3, #194	; 0xc2
 80053e6:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xC2;
 80053e8:	23c2      	movs	r3, #194	; 0xc2
 80053ea:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xC2;
 80053ec:	23c2      	movs	r3, #194	; 0xc2
 80053ee:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xC2;
 80053f0:	23c2      	movs	r3, #194	; 0xc2
 80053f2:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80053f4:	463b      	mov	r3, r7
 80053f6:	2205      	movs	r2, #5
 80053f8:	4619      	mov	r1, r3
 80053fa:	200b      	movs	r0, #11
 80053fc:	f7ff f8fa 	bl	80045f4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8005400:	21c3      	movs	r1, #195	; 0xc3
 8005402:	200c      	movs	r0, #12
 8005404:	f7ff f8d4 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8005408:	21c4      	movs	r1, #196	; 0xc4
 800540a:	200d      	movs	r0, #13
 800540c:	f7ff f8d0 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8005410:	21c5      	movs	r1, #197	; 0xc5
 8005412:	200e      	movs	r0, #14
 8005414:	f7ff f8cc 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8005418:	21c6      	movs	r1, #198	; 0xc6
 800541a:	200f      	movs	r0, #15
 800541c:	f7ff f8c8 	bl	80045b0 <NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 8005420:	23e7      	movs	r3, #231	; 0xe7
 8005422:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xE7;
 8005424:	23e7      	movs	r3, #231	; 0xe7
 8005426:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xE7;
 8005428:	23e7      	movs	r3, #231	; 0xe7
 800542a:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xE7;
 800542c:	23e7      	movs	r3, #231	; 0xe7
 800542e:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xE7;
 8005430:	23e7      	movs	r3, #231	; 0xe7
 8005432:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8005434:	463b      	mov	r3, r7
 8005436:	2205      	movs	r2, #5
 8005438:	4619      	mov	r1, r3
 800543a:	2010      	movs	r0, #16
 800543c:	f7ff f8da 	bl	80045f4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8005440:	2100      	movs	r1, #0
 8005442:	2011      	movs	r0, #17
 8005444:	f7ff f8b4 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8005448:	2100      	movs	r1, #0
 800544a:	2012      	movs	r0, #18
 800544c:	f7ff f8b0 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8005450:	2100      	movs	r1, #0
 8005452:	2013      	movs	r0, #19
 8005454:	f7ff f8ac 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8005458:	2100      	movs	r1, #0
 800545a:	2014      	movs	r0, #20
 800545c:	f7ff f8a8 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8005460:	2100      	movs	r1, #0
 8005462:	2015      	movs	r0, #21
 8005464:	f7ff f8a4 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8005468:	2100      	movs	r1, #0
 800546a:	2016      	movs	r0, #22
 800546c:	f7ff f8a0 	bl	80045b0 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8005470:	f7ff fcf8 	bl	8004e64 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8005474:	2100      	movs	r1, #0
 8005476:	201c      	movs	r0, #28
 8005478:	f7ff f89a 	bl	80045b0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800547c:	2100      	movs	r1, #0
 800547e:	201d      	movs	r0, #29
 8005480:	f7ff f896 	bl	80045b0 <NRF24_write_register>
	printRadioSettings();
 8005484:	f7ff fd08 	bl	8004e98 <printRadioSettings>
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <__cvt>:
 8005490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	ec55 4b10 	vmov	r4, r5, d0
 8005498:	2d00      	cmp	r5, #0
 800549a:	460e      	mov	r6, r1
 800549c:	4619      	mov	r1, r3
 800549e:	462b      	mov	r3, r5
 80054a0:	bfbb      	ittet	lt
 80054a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054a6:	461d      	movlt	r5, r3
 80054a8:	2300      	movge	r3, #0
 80054aa:	232d      	movlt	r3, #45	; 0x2d
 80054ac:	700b      	strb	r3, [r1, #0]
 80054ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054b4:	4691      	mov	r9, r2
 80054b6:	f023 0820 	bic.w	r8, r3, #32
 80054ba:	bfbc      	itt	lt
 80054bc:	4622      	movlt	r2, r4
 80054be:	4614      	movlt	r4, r2
 80054c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054c4:	d005      	beq.n	80054d2 <__cvt+0x42>
 80054c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054ca:	d100      	bne.n	80054ce <__cvt+0x3e>
 80054cc:	3601      	adds	r6, #1
 80054ce:	2102      	movs	r1, #2
 80054d0:	e000      	b.n	80054d4 <__cvt+0x44>
 80054d2:	2103      	movs	r1, #3
 80054d4:	ab03      	add	r3, sp, #12
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	ab02      	add	r3, sp, #8
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	ec45 4b10 	vmov	d0, r4, r5
 80054e0:	4653      	mov	r3, sl
 80054e2:	4632      	mov	r2, r6
 80054e4:	f000 ff6c 	bl	80063c0 <_dtoa_r>
 80054e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054ec:	4607      	mov	r7, r0
 80054ee:	d102      	bne.n	80054f6 <__cvt+0x66>
 80054f0:	f019 0f01 	tst.w	r9, #1
 80054f4:	d022      	beq.n	800553c <__cvt+0xac>
 80054f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054fa:	eb07 0906 	add.w	r9, r7, r6
 80054fe:	d110      	bne.n	8005522 <__cvt+0x92>
 8005500:	783b      	ldrb	r3, [r7, #0]
 8005502:	2b30      	cmp	r3, #48	; 0x30
 8005504:	d10a      	bne.n	800551c <__cvt+0x8c>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fb fafb 	bl	8000b08 <__aeabi_dcmpeq>
 8005512:	b918      	cbnz	r0, 800551c <__cvt+0x8c>
 8005514:	f1c6 0601 	rsb	r6, r6, #1
 8005518:	f8ca 6000 	str.w	r6, [sl]
 800551c:	f8da 3000 	ldr.w	r3, [sl]
 8005520:	4499      	add	r9, r3
 8005522:	2200      	movs	r2, #0
 8005524:	2300      	movs	r3, #0
 8005526:	4620      	mov	r0, r4
 8005528:	4629      	mov	r1, r5
 800552a:	f7fb faed 	bl	8000b08 <__aeabi_dcmpeq>
 800552e:	b108      	cbz	r0, 8005534 <__cvt+0xa4>
 8005530:	f8cd 900c 	str.w	r9, [sp, #12]
 8005534:	2230      	movs	r2, #48	; 0x30
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	454b      	cmp	r3, r9
 800553a:	d307      	bcc.n	800554c <__cvt+0xbc>
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005540:	1bdb      	subs	r3, r3, r7
 8005542:	4638      	mov	r0, r7
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	9103      	str	r1, [sp, #12]
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	e7f0      	b.n	8005536 <__cvt+0xa6>

08005554 <__exponent>:
 8005554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005556:	4603      	mov	r3, r0
 8005558:	2900      	cmp	r1, #0
 800555a:	bfb8      	it	lt
 800555c:	4249      	neglt	r1, r1
 800555e:	f803 2b02 	strb.w	r2, [r3], #2
 8005562:	bfb4      	ite	lt
 8005564:	222d      	movlt	r2, #45	; 0x2d
 8005566:	222b      	movge	r2, #43	; 0x2b
 8005568:	2909      	cmp	r1, #9
 800556a:	7042      	strb	r2, [r0, #1]
 800556c:	dd2a      	ble.n	80055c4 <__exponent+0x70>
 800556e:	f10d 0207 	add.w	r2, sp, #7
 8005572:	4617      	mov	r7, r2
 8005574:	260a      	movs	r6, #10
 8005576:	4694      	mov	ip, r2
 8005578:	fb91 f5f6 	sdiv	r5, r1, r6
 800557c:	fb06 1415 	mls	r4, r6, r5, r1
 8005580:	3430      	adds	r4, #48	; 0x30
 8005582:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005586:	460c      	mov	r4, r1
 8005588:	2c63      	cmp	r4, #99	; 0x63
 800558a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800558e:	4629      	mov	r1, r5
 8005590:	dcf1      	bgt.n	8005576 <__exponent+0x22>
 8005592:	3130      	adds	r1, #48	; 0x30
 8005594:	f1ac 0402 	sub.w	r4, ip, #2
 8005598:	f802 1c01 	strb.w	r1, [r2, #-1]
 800559c:	1c41      	adds	r1, r0, #1
 800559e:	4622      	mov	r2, r4
 80055a0:	42ba      	cmp	r2, r7
 80055a2:	d30a      	bcc.n	80055ba <__exponent+0x66>
 80055a4:	f10d 0209 	add.w	r2, sp, #9
 80055a8:	eba2 020c 	sub.w	r2, r2, ip
 80055ac:	42bc      	cmp	r4, r7
 80055ae:	bf88      	it	hi
 80055b0:	2200      	movhi	r2, #0
 80055b2:	4413      	add	r3, r2
 80055b4:	1a18      	subs	r0, r3, r0
 80055b6:	b003      	add	sp, #12
 80055b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80055be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80055c2:	e7ed      	b.n	80055a0 <__exponent+0x4c>
 80055c4:	2330      	movs	r3, #48	; 0x30
 80055c6:	3130      	adds	r1, #48	; 0x30
 80055c8:	7083      	strb	r3, [r0, #2]
 80055ca:	70c1      	strb	r1, [r0, #3]
 80055cc:	1d03      	adds	r3, r0, #4
 80055ce:	e7f1      	b.n	80055b4 <__exponent+0x60>

080055d0 <_printf_float>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	ed2d 8b02 	vpush	{d8}
 80055d8:	b08d      	sub	sp, #52	; 0x34
 80055da:	460c      	mov	r4, r1
 80055dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055e0:	4616      	mov	r6, r2
 80055e2:	461f      	mov	r7, r3
 80055e4:	4605      	mov	r5, r0
 80055e6:	f000 fde9 	bl	80061bc <_localeconv_r>
 80055ea:	f8d0 a000 	ldr.w	sl, [r0]
 80055ee:	4650      	mov	r0, sl
 80055f0:	f7fa fe5e 	bl	80002b0 <strlen>
 80055f4:	2300      	movs	r3, #0
 80055f6:	930a      	str	r3, [sp, #40]	; 0x28
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005600:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005604:	3307      	adds	r3, #7
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	f103 0208 	add.w	r2, r3, #8
 800560e:	f8c8 2000 	str.w	r2, [r8]
 8005612:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800561a:	9307      	str	r3, [sp, #28]
 800561c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005620:	ee08 0a10 	vmov	s16, r0
 8005624:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562c:	4b9e      	ldr	r3, [pc, #632]	; (80058a8 <_printf_float+0x2d8>)
 800562e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005632:	f7fb fa9b 	bl	8000b6c <__aeabi_dcmpun>
 8005636:	bb88      	cbnz	r0, 800569c <_printf_float+0xcc>
 8005638:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800563c:	4b9a      	ldr	r3, [pc, #616]	; (80058a8 <_printf_float+0x2d8>)
 800563e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005642:	f7fb fa75 	bl	8000b30 <__aeabi_dcmple>
 8005646:	bb48      	cbnz	r0, 800569c <_printf_float+0xcc>
 8005648:	2200      	movs	r2, #0
 800564a:	2300      	movs	r3, #0
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fb fa64 	bl	8000b1c <__aeabi_dcmplt>
 8005654:	b110      	cbz	r0, 800565c <_printf_float+0x8c>
 8005656:	232d      	movs	r3, #45	; 0x2d
 8005658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800565c:	4a93      	ldr	r2, [pc, #588]	; (80058ac <_printf_float+0x2dc>)
 800565e:	4b94      	ldr	r3, [pc, #592]	; (80058b0 <_printf_float+0x2e0>)
 8005660:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005664:	bf94      	ite	ls
 8005666:	4690      	movls	r8, r2
 8005668:	4698      	movhi	r8, r3
 800566a:	2303      	movs	r3, #3
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	9b05      	ldr	r3, [sp, #20]
 8005670:	f023 0304 	bic.w	r3, r3, #4
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	f04f 0900 	mov.w	r9, #0
 800567a:	9700      	str	r7, [sp, #0]
 800567c:	4633      	mov	r3, r6
 800567e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005680:	4621      	mov	r1, r4
 8005682:	4628      	mov	r0, r5
 8005684:	f000 f9da 	bl	8005a3c <_printf_common>
 8005688:	3001      	adds	r0, #1
 800568a:	f040 8090 	bne.w	80057ae <_printf_float+0x1de>
 800568e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005692:	b00d      	add	sp, #52	; 0x34
 8005694:	ecbd 8b02 	vpop	{d8}
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	4642      	mov	r2, r8
 800569e:	464b      	mov	r3, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	4649      	mov	r1, r9
 80056a4:	f7fb fa62 	bl	8000b6c <__aeabi_dcmpun>
 80056a8:	b140      	cbz	r0, 80056bc <_printf_float+0xec>
 80056aa:	464b      	mov	r3, r9
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bfbc      	itt	lt
 80056b0:	232d      	movlt	r3, #45	; 0x2d
 80056b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056b6:	4a7f      	ldr	r2, [pc, #508]	; (80058b4 <_printf_float+0x2e4>)
 80056b8:	4b7f      	ldr	r3, [pc, #508]	; (80058b8 <_printf_float+0x2e8>)
 80056ba:	e7d1      	b.n	8005660 <_printf_float+0x90>
 80056bc:	6863      	ldr	r3, [r4, #4]
 80056be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056c2:	9206      	str	r2, [sp, #24]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	d13f      	bne.n	8005748 <_printf_float+0x178>
 80056c8:	2306      	movs	r3, #6
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	9b05      	ldr	r3, [sp, #20]
 80056ce:	6861      	ldr	r1, [r4, #4]
 80056d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056d4:	2300      	movs	r3, #0
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	ab0a      	add	r3, sp, #40	; 0x28
 80056da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056de:	ab09      	add	r3, sp, #36	; 0x24
 80056e0:	ec49 8b10 	vmov	d0, r8, r9
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	6022      	str	r2, [r4, #0]
 80056e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056ec:	4628      	mov	r0, r5
 80056ee:	f7ff fecf 	bl	8005490 <__cvt>
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056f6:	2b47      	cmp	r3, #71	; 0x47
 80056f8:	4680      	mov	r8, r0
 80056fa:	d108      	bne.n	800570e <_printf_float+0x13e>
 80056fc:	1cc8      	adds	r0, r1, #3
 80056fe:	db02      	blt.n	8005706 <_printf_float+0x136>
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	4299      	cmp	r1, r3
 8005704:	dd41      	ble.n	800578a <_printf_float+0x1ba>
 8005706:	f1ab 0302 	sub.w	r3, fp, #2
 800570a:	fa5f fb83 	uxtb.w	fp, r3
 800570e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005712:	d820      	bhi.n	8005756 <_printf_float+0x186>
 8005714:	3901      	subs	r1, #1
 8005716:	465a      	mov	r2, fp
 8005718:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800571c:	9109      	str	r1, [sp, #36]	; 0x24
 800571e:	f7ff ff19 	bl	8005554 <__exponent>
 8005722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005724:	1813      	adds	r3, r2, r0
 8005726:	2a01      	cmp	r2, #1
 8005728:	4681      	mov	r9, r0
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	dc02      	bgt.n	8005734 <_printf_float+0x164>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	07d2      	lsls	r2, r2, #31
 8005732:	d501      	bpl.n	8005738 <_printf_float+0x168>
 8005734:	3301      	adds	r3, #1
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800573c:	2b00      	cmp	r3, #0
 800573e:	d09c      	beq.n	800567a <_printf_float+0xaa>
 8005740:	232d      	movs	r3, #45	; 0x2d
 8005742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005746:	e798      	b.n	800567a <_printf_float+0xaa>
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	2a47      	cmp	r2, #71	; 0x47
 800574c:	d1be      	bne.n	80056cc <_printf_float+0xfc>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1bc      	bne.n	80056cc <_printf_float+0xfc>
 8005752:	2301      	movs	r3, #1
 8005754:	e7b9      	b.n	80056ca <_printf_float+0xfa>
 8005756:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800575a:	d118      	bne.n	800578e <_printf_float+0x1be>
 800575c:	2900      	cmp	r1, #0
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	dd0b      	ble.n	800577a <_printf_float+0x1aa>
 8005762:	6121      	str	r1, [r4, #16]
 8005764:	b913      	cbnz	r3, 800576c <_printf_float+0x19c>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	07d0      	lsls	r0, r2, #31
 800576a:	d502      	bpl.n	8005772 <_printf_float+0x1a2>
 800576c:	3301      	adds	r3, #1
 800576e:	440b      	add	r3, r1
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	65a1      	str	r1, [r4, #88]	; 0x58
 8005774:	f04f 0900 	mov.w	r9, #0
 8005778:	e7de      	b.n	8005738 <_printf_float+0x168>
 800577a:	b913      	cbnz	r3, 8005782 <_printf_float+0x1b2>
 800577c:	6822      	ldr	r2, [r4, #0]
 800577e:	07d2      	lsls	r2, r2, #31
 8005780:	d501      	bpl.n	8005786 <_printf_float+0x1b6>
 8005782:	3302      	adds	r3, #2
 8005784:	e7f4      	b.n	8005770 <_printf_float+0x1a0>
 8005786:	2301      	movs	r3, #1
 8005788:	e7f2      	b.n	8005770 <_printf_float+0x1a0>
 800578a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005790:	4299      	cmp	r1, r3
 8005792:	db05      	blt.n	80057a0 <_printf_float+0x1d0>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	6121      	str	r1, [r4, #16]
 8005798:	07d8      	lsls	r0, r3, #31
 800579a:	d5ea      	bpl.n	8005772 <_printf_float+0x1a2>
 800579c:	1c4b      	adds	r3, r1, #1
 800579e:	e7e7      	b.n	8005770 <_printf_float+0x1a0>
 80057a0:	2900      	cmp	r1, #0
 80057a2:	bfd4      	ite	le
 80057a4:	f1c1 0202 	rsble	r2, r1, #2
 80057a8:	2201      	movgt	r2, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	e7e0      	b.n	8005770 <_printf_float+0x1a0>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	055a      	lsls	r2, r3, #21
 80057b2:	d407      	bmi.n	80057c4 <_printf_float+0x1f4>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	4642      	mov	r2, r8
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d12c      	bne.n	800581c <_printf_float+0x24c>
 80057c2:	e764      	b.n	800568e <_printf_float+0xbe>
 80057c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057c8:	f240 80e0 	bls.w	800598c <_printf_float+0x3bc>
 80057cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f7fb f998 	bl	8000b08 <__aeabi_dcmpeq>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d034      	beq.n	8005846 <_printf_float+0x276>
 80057dc:	4a37      	ldr	r2, [pc, #220]	; (80058bc <_printf_float+0x2ec>)
 80057de:	2301      	movs	r3, #1
 80057e0:	4631      	mov	r1, r6
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f af51 	beq.w	800568e <_printf_float+0xbe>
 80057ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f0:	429a      	cmp	r2, r3
 80057f2:	db02      	blt.n	80057fa <_printf_float+0x22a>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07d8      	lsls	r0, r3, #31
 80057f8:	d510      	bpl.n	800581c <_printf_float+0x24c>
 80057fa:	ee18 3a10 	vmov	r3, s16
 80057fe:	4652      	mov	r2, sl
 8005800:	4631      	mov	r1, r6
 8005802:	4628      	mov	r0, r5
 8005804:	47b8      	blx	r7
 8005806:	3001      	adds	r0, #1
 8005808:	f43f af41 	beq.w	800568e <_printf_float+0xbe>
 800580c:	f04f 0800 	mov.w	r8, #0
 8005810:	f104 091a 	add.w	r9, r4, #26
 8005814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005816:	3b01      	subs	r3, #1
 8005818:	4543      	cmp	r3, r8
 800581a:	dc09      	bgt.n	8005830 <_printf_float+0x260>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	079b      	lsls	r3, r3, #30
 8005820:	f100 8107 	bmi.w	8005a32 <_printf_float+0x462>
 8005824:	68e0      	ldr	r0, [r4, #12]
 8005826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005828:	4298      	cmp	r0, r3
 800582a:	bfb8      	it	lt
 800582c:	4618      	movlt	r0, r3
 800582e:	e730      	b.n	8005692 <_printf_float+0xc2>
 8005830:	2301      	movs	r3, #1
 8005832:	464a      	mov	r2, r9
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f af27 	beq.w	800568e <_printf_float+0xbe>
 8005840:	f108 0801 	add.w	r8, r8, #1
 8005844:	e7e6      	b.n	8005814 <_printf_float+0x244>
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	dc39      	bgt.n	80058c0 <_printf_float+0x2f0>
 800584c:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <_printf_float+0x2ec>)
 800584e:	2301      	movs	r3, #1
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f af19 	beq.w	800568e <_printf_float+0xbe>
 800585c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005860:	4313      	orrs	r3, r2
 8005862:	d102      	bne.n	800586a <_printf_float+0x29a>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07d9      	lsls	r1, r3, #31
 8005868:	d5d8      	bpl.n	800581c <_printf_float+0x24c>
 800586a:	ee18 3a10 	vmov	r3, s16
 800586e:	4652      	mov	r2, sl
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f af09 	beq.w	800568e <_printf_float+0xbe>
 800587c:	f04f 0900 	mov.w	r9, #0
 8005880:	f104 0a1a 	add.w	sl, r4, #26
 8005884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005886:	425b      	negs	r3, r3
 8005888:	454b      	cmp	r3, r9
 800588a:	dc01      	bgt.n	8005890 <_printf_float+0x2c0>
 800588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588e:	e792      	b.n	80057b6 <_printf_float+0x1e6>
 8005890:	2301      	movs	r3, #1
 8005892:	4652      	mov	r2, sl
 8005894:	4631      	mov	r1, r6
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f aef7 	beq.w	800568e <_printf_float+0xbe>
 80058a0:	f109 0901 	add.w	r9, r9, #1
 80058a4:	e7ee      	b.n	8005884 <_printf_float+0x2b4>
 80058a6:	bf00      	nop
 80058a8:	7fefffff 	.word	0x7fefffff
 80058ac:	0800880e 	.word	0x0800880e
 80058b0:	08008812 	.word	0x08008812
 80058b4:	08008816 	.word	0x08008816
 80058b8:	0800881a 	.word	0x0800881a
 80058bc:	0800881e 	.word	0x0800881e
 80058c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c4:	429a      	cmp	r2, r3
 80058c6:	bfa8      	it	ge
 80058c8:	461a      	movge	r2, r3
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	4691      	mov	r9, r2
 80058ce:	dc37      	bgt.n	8005940 <_printf_float+0x370>
 80058d0:	f04f 0b00 	mov.w	fp, #0
 80058d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058d8:	f104 021a 	add.w	r2, r4, #26
 80058dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	eba3 0309 	sub.w	r3, r3, r9
 80058e4:	455b      	cmp	r3, fp
 80058e6:	dc33      	bgt.n	8005950 <_printf_float+0x380>
 80058e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058ec:	429a      	cmp	r2, r3
 80058ee:	db3b      	blt.n	8005968 <_printf_float+0x398>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	07da      	lsls	r2, r3, #31
 80058f4:	d438      	bmi.n	8005968 <_printf_float+0x398>
 80058f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058fa:	eba2 0903 	sub.w	r9, r2, r3
 80058fe:	9b05      	ldr	r3, [sp, #20]
 8005900:	1ad2      	subs	r2, r2, r3
 8005902:	4591      	cmp	r9, r2
 8005904:	bfa8      	it	ge
 8005906:	4691      	movge	r9, r2
 8005908:	f1b9 0f00 	cmp.w	r9, #0
 800590c:	dc35      	bgt.n	800597a <_printf_float+0x3aa>
 800590e:	f04f 0800 	mov.w	r8, #0
 8005912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005916:	f104 0a1a 	add.w	sl, r4, #26
 800591a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	eba3 0309 	sub.w	r3, r3, r9
 8005924:	4543      	cmp	r3, r8
 8005926:	f77f af79 	ble.w	800581c <_printf_float+0x24c>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	f43f aeaa 	beq.w	800568e <_printf_float+0xbe>
 800593a:	f108 0801 	add.w	r8, r8, #1
 800593e:	e7ec      	b.n	800591a <_printf_float+0x34a>
 8005940:	4613      	mov	r3, r2
 8005942:	4631      	mov	r1, r6
 8005944:	4642      	mov	r2, r8
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	d1c0      	bne.n	80058d0 <_printf_float+0x300>
 800594e:	e69e      	b.n	800568e <_printf_float+0xbe>
 8005950:	2301      	movs	r3, #1
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	9205      	str	r2, [sp, #20]
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f ae97 	beq.w	800568e <_printf_float+0xbe>
 8005960:	9a05      	ldr	r2, [sp, #20]
 8005962:	f10b 0b01 	add.w	fp, fp, #1
 8005966:	e7b9      	b.n	80058dc <_printf_float+0x30c>
 8005968:	ee18 3a10 	vmov	r3, s16
 800596c:	4652      	mov	r2, sl
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	d1be      	bne.n	80058f6 <_printf_float+0x326>
 8005978:	e689      	b.n	800568e <_printf_float+0xbe>
 800597a:	9a05      	ldr	r2, [sp, #20]
 800597c:	464b      	mov	r3, r9
 800597e:	4442      	add	r2, r8
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	d1c1      	bne.n	800590e <_printf_float+0x33e>
 800598a:	e680      	b.n	800568e <_printf_float+0xbe>
 800598c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800598e:	2a01      	cmp	r2, #1
 8005990:	dc01      	bgt.n	8005996 <_printf_float+0x3c6>
 8005992:	07db      	lsls	r3, r3, #31
 8005994:	d53a      	bpl.n	8005a0c <_printf_float+0x43c>
 8005996:	2301      	movs	r3, #1
 8005998:	4642      	mov	r2, r8
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	f43f ae74 	beq.w	800568e <_printf_float+0xbe>
 80059a6:	ee18 3a10 	vmov	r3, s16
 80059aa:	4652      	mov	r2, sl
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f ae6b 	beq.w	800568e <_printf_float+0xbe>
 80059b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80059c4:	f7fb f8a0 	bl	8000b08 <__aeabi_dcmpeq>
 80059c8:	b9d8      	cbnz	r0, 8005a02 <_printf_float+0x432>
 80059ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80059ce:	f108 0201 	add.w	r2, r8, #1
 80059d2:	4631      	mov	r1, r6
 80059d4:	4628      	mov	r0, r5
 80059d6:	47b8      	blx	r7
 80059d8:	3001      	adds	r0, #1
 80059da:	d10e      	bne.n	80059fa <_printf_float+0x42a>
 80059dc:	e657      	b.n	800568e <_printf_float+0xbe>
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	f43f ae50 	beq.w	800568e <_printf_float+0xbe>
 80059ee:	f108 0801 	add.w	r8, r8, #1
 80059f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f4:	3b01      	subs	r3, #1
 80059f6:	4543      	cmp	r3, r8
 80059f8:	dcf1      	bgt.n	80059de <_printf_float+0x40e>
 80059fa:	464b      	mov	r3, r9
 80059fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a00:	e6da      	b.n	80057b8 <_printf_float+0x1e8>
 8005a02:	f04f 0800 	mov.w	r8, #0
 8005a06:	f104 0a1a 	add.w	sl, r4, #26
 8005a0a:	e7f2      	b.n	80059f2 <_printf_float+0x422>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4642      	mov	r2, r8
 8005a10:	e7df      	b.n	80059d2 <_printf_float+0x402>
 8005a12:	2301      	movs	r3, #1
 8005a14:	464a      	mov	r2, r9
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f ae36 	beq.w	800568e <_printf_float+0xbe>
 8005a22:	f108 0801 	add.w	r8, r8, #1
 8005a26:	68e3      	ldr	r3, [r4, #12]
 8005a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a2a:	1a5b      	subs	r3, r3, r1
 8005a2c:	4543      	cmp	r3, r8
 8005a2e:	dcf0      	bgt.n	8005a12 <_printf_float+0x442>
 8005a30:	e6f8      	b.n	8005824 <_printf_float+0x254>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 0919 	add.w	r9, r4, #25
 8005a3a:	e7f4      	b.n	8005a26 <_printf_float+0x456>

08005a3c <_printf_common>:
 8005a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	4616      	mov	r6, r2
 8005a42:	4699      	mov	r9, r3
 8005a44:	688a      	ldr	r2, [r1, #8]
 8005a46:	690b      	ldr	r3, [r1, #16]
 8005a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bfb8      	it	lt
 8005a50:	4613      	movlt	r3, r2
 8005a52:	6033      	str	r3, [r6, #0]
 8005a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a58:	4607      	mov	r7, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	b10a      	cbz	r2, 8005a62 <_printf_common+0x26>
 8005a5e:	3301      	adds	r3, #1
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	0699      	lsls	r1, r3, #26
 8005a66:	bf42      	ittt	mi
 8005a68:	6833      	ldrmi	r3, [r6, #0]
 8005a6a:	3302      	addmi	r3, #2
 8005a6c:	6033      	strmi	r3, [r6, #0]
 8005a6e:	6825      	ldr	r5, [r4, #0]
 8005a70:	f015 0506 	ands.w	r5, r5, #6
 8005a74:	d106      	bne.n	8005a84 <_printf_common+0x48>
 8005a76:	f104 0a19 	add.w	sl, r4, #25
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	6832      	ldr	r2, [r6, #0]
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dc26      	bgt.n	8005ad2 <_printf_common+0x96>
 8005a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a88:	1e13      	subs	r3, r2, #0
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	bf18      	it	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	0692      	lsls	r2, r2, #26
 8005a92:	d42b      	bmi.n	8005aec <_printf_common+0xb0>
 8005a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d01e      	beq.n	8005ae0 <_printf_common+0xa4>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	6922      	ldr	r2, [r4, #16]
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	bf02      	ittt	eq
 8005aae:	68e5      	ldreq	r5, [r4, #12]
 8005ab0:	6833      	ldreq	r3, [r6, #0]
 8005ab2:	1aed      	subeq	r5, r5, r3
 8005ab4:	68a3      	ldr	r3, [r4, #8]
 8005ab6:	bf0c      	ite	eq
 8005ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005abc:	2500      	movne	r5, #0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bfc4      	itt	gt
 8005ac2:	1a9b      	subgt	r3, r3, r2
 8005ac4:	18ed      	addgt	r5, r5, r3
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	341a      	adds	r4, #26
 8005aca:	42b5      	cmp	r5, r6
 8005acc:	d11a      	bne.n	8005b04 <_printf_common+0xc8>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e008      	b.n	8005ae4 <_printf_common+0xa8>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4652      	mov	r2, sl
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4638      	mov	r0, r7
 8005ada:	47c0      	blx	r8
 8005adc:	3001      	adds	r0, #1
 8005ade:	d103      	bne.n	8005ae8 <_printf_common+0xac>
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	3501      	adds	r5, #1
 8005aea:	e7c6      	b.n	8005a7a <_printf_common+0x3e>
 8005aec:	18e1      	adds	r1, r4, r3
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	2030      	movs	r0, #48	; 0x30
 8005af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af6:	4422      	add	r2, r4
 8005af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b00:	3302      	adds	r3, #2
 8005b02:	e7c7      	b.n	8005a94 <_printf_common+0x58>
 8005b04:	2301      	movs	r3, #1
 8005b06:	4622      	mov	r2, r4
 8005b08:	4649      	mov	r1, r9
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	47c0      	blx	r8
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d0e6      	beq.n	8005ae0 <_printf_common+0xa4>
 8005b12:	3601      	adds	r6, #1
 8005b14:	e7d9      	b.n	8005aca <_printf_common+0x8e>
	...

08005b18 <_printf_i>:
 8005b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	7e0f      	ldrb	r7, [r1, #24]
 8005b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b20:	2f78      	cmp	r7, #120	; 0x78
 8005b22:	4691      	mov	r9, r2
 8005b24:	4680      	mov	r8, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	469a      	mov	sl, r3
 8005b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b2e:	d807      	bhi.n	8005b40 <_printf_i+0x28>
 8005b30:	2f62      	cmp	r7, #98	; 0x62
 8005b32:	d80a      	bhi.n	8005b4a <_printf_i+0x32>
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	f000 80d4 	beq.w	8005ce2 <_printf_i+0x1ca>
 8005b3a:	2f58      	cmp	r7, #88	; 0x58
 8005b3c:	f000 80c0 	beq.w	8005cc0 <_printf_i+0x1a8>
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b48:	e03a      	b.n	8005bc0 <_printf_i+0xa8>
 8005b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b4e:	2b15      	cmp	r3, #21
 8005b50:	d8f6      	bhi.n	8005b40 <_printf_i+0x28>
 8005b52:	a101      	add	r1, pc, #4	; (adr r1, 8005b58 <_printf_i+0x40>)
 8005b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b58:	08005bb1 	.word	0x08005bb1
 8005b5c:	08005bc5 	.word	0x08005bc5
 8005b60:	08005b41 	.word	0x08005b41
 8005b64:	08005b41 	.word	0x08005b41
 8005b68:	08005b41 	.word	0x08005b41
 8005b6c:	08005b41 	.word	0x08005b41
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005b41 	.word	0x08005b41
 8005b78:	08005b41 	.word	0x08005b41
 8005b7c:	08005b41 	.word	0x08005b41
 8005b80:	08005b41 	.word	0x08005b41
 8005b84:	08005cc9 	.word	0x08005cc9
 8005b88:	08005bf1 	.word	0x08005bf1
 8005b8c:	08005c83 	.word	0x08005c83
 8005b90:	08005b41 	.word	0x08005b41
 8005b94:	08005b41 	.word	0x08005b41
 8005b98:	08005ceb 	.word	0x08005ceb
 8005b9c:	08005b41 	.word	0x08005b41
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005b41 	.word	0x08005b41
 8005ba8:	08005b41 	.word	0x08005b41
 8005bac:	08005c8b 	.word	0x08005c8b
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	1d1a      	adds	r2, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	602a      	str	r2, [r5, #0]
 8005bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e09f      	b.n	8005d04 <_printf_i+0x1ec>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	682b      	ldr	r3, [r5, #0]
 8005bc8:	0607      	lsls	r7, r0, #24
 8005bca:	f103 0104 	add.w	r1, r3, #4
 8005bce:	6029      	str	r1, [r5, #0]
 8005bd0:	d501      	bpl.n	8005bd6 <_printf_i+0xbe>
 8005bd2:	681e      	ldr	r6, [r3, #0]
 8005bd4:	e003      	b.n	8005bde <_printf_i+0xc6>
 8005bd6:	0646      	lsls	r6, r0, #25
 8005bd8:	d5fb      	bpl.n	8005bd2 <_printf_i+0xba>
 8005bda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	da03      	bge.n	8005bea <_printf_i+0xd2>
 8005be2:	232d      	movs	r3, #45	; 0x2d
 8005be4:	4276      	negs	r6, r6
 8005be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bea:	485a      	ldr	r0, [pc, #360]	; (8005d54 <_printf_i+0x23c>)
 8005bec:	230a      	movs	r3, #10
 8005bee:	e012      	b.n	8005c16 <_printf_i+0xfe>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	6029      	str	r1, [r5, #0]
 8005bf8:	0605      	lsls	r5, r0, #24
 8005bfa:	d501      	bpl.n	8005c00 <_printf_i+0xe8>
 8005bfc:	681e      	ldr	r6, [r3, #0]
 8005bfe:	e002      	b.n	8005c06 <_printf_i+0xee>
 8005c00:	0641      	lsls	r1, r0, #25
 8005c02:	d5fb      	bpl.n	8005bfc <_printf_i+0xe4>
 8005c04:	881e      	ldrh	r6, [r3, #0]
 8005c06:	4853      	ldr	r0, [pc, #332]	; (8005d54 <_printf_i+0x23c>)
 8005c08:	2f6f      	cmp	r7, #111	; 0x6f
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2308      	moveq	r3, #8
 8005c0e:	230a      	movne	r3, #10
 8005c10:	2100      	movs	r1, #0
 8005c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c16:	6865      	ldr	r5, [r4, #4]
 8005c18:	60a5      	str	r5, [r4, #8]
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	bfa2      	ittt	ge
 8005c1e:	6821      	ldrge	r1, [r4, #0]
 8005c20:	f021 0104 	bicge.w	r1, r1, #4
 8005c24:	6021      	strge	r1, [r4, #0]
 8005c26:	b90e      	cbnz	r6, 8005c2c <_printf_i+0x114>
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	d04b      	beq.n	8005cc4 <_printf_i+0x1ac>
 8005c2c:	4615      	mov	r5, r2
 8005c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c32:	fb03 6711 	mls	r7, r3, r1, r6
 8005c36:	5dc7      	ldrb	r7, [r0, r7]
 8005c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c3c:	4637      	mov	r7, r6
 8005c3e:	42bb      	cmp	r3, r7
 8005c40:	460e      	mov	r6, r1
 8005c42:	d9f4      	bls.n	8005c2e <_printf_i+0x116>
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d10b      	bne.n	8005c60 <_printf_i+0x148>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	07de      	lsls	r6, r3, #31
 8005c4c:	d508      	bpl.n	8005c60 <_printf_i+0x148>
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	6861      	ldr	r1, [r4, #4]
 8005c52:	4299      	cmp	r1, r3
 8005c54:	bfde      	ittt	le
 8005c56:	2330      	movle	r3, #48	; 0x30
 8005c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c60:	1b52      	subs	r2, r2, r5
 8005c62:	6122      	str	r2, [r4, #16]
 8005c64:	f8cd a000 	str.w	sl, [sp]
 8005c68:	464b      	mov	r3, r9
 8005c6a:	aa03      	add	r2, sp, #12
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	4640      	mov	r0, r8
 8005c70:	f7ff fee4 	bl	8005a3c <_printf_common>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d14a      	bne.n	8005d0e <_printf_i+0x1f6>
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	b004      	add	sp, #16
 8005c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	f043 0320 	orr.w	r3, r3, #32
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	4833      	ldr	r0, [pc, #204]	; (8005d58 <_printf_i+0x240>)
 8005c8c:	2778      	movs	r7, #120	; 0x78
 8005c8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	6829      	ldr	r1, [r5, #0]
 8005c96:	061f      	lsls	r7, r3, #24
 8005c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c9c:	d402      	bmi.n	8005ca4 <_printf_i+0x18c>
 8005c9e:	065f      	lsls	r7, r3, #25
 8005ca0:	bf48      	it	mi
 8005ca2:	b2b6      	uxthmi	r6, r6
 8005ca4:	07df      	lsls	r7, r3, #31
 8005ca6:	bf48      	it	mi
 8005ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8005cac:	6029      	str	r1, [r5, #0]
 8005cae:	bf48      	it	mi
 8005cb0:	6023      	strmi	r3, [r4, #0]
 8005cb2:	b91e      	cbnz	r6, 8005cbc <_printf_i+0x1a4>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	f023 0320 	bic.w	r3, r3, #32
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	e7a7      	b.n	8005c10 <_printf_i+0xf8>
 8005cc0:	4824      	ldr	r0, [pc, #144]	; (8005d54 <_printf_i+0x23c>)
 8005cc2:	e7e4      	b.n	8005c8e <_printf_i+0x176>
 8005cc4:	4615      	mov	r5, r2
 8005cc6:	e7bd      	b.n	8005c44 <_printf_i+0x12c>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	6826      	ldr	r6, [r4, #0]
 8005ccc:	6961      	ldr	r1, [r4, #20]
 8005cce:	1d18      	adds	r0, r3, #4
 8005cd0:	6028      	str	r0, [r5, #0]
 8005cd2:	0635      	lsls	r5, r6, #24
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	d501      	bpl.n	8005cdc <_printf_i+0x1c4>
 8005cd8:	6019      	str	r1, [r3, #0]
 8005cda:	e002      	b.n	8005ce2 <_printf_i+0x1ca>
 8005cdc:	0670      	lsls	r0, r6, #25
 8005cde:	d5fb      	bpl.n	8005cd8 <_printf_i+0x1c0>
 8005ce0:	8019      	strh	r1, [r3, #0]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6123      	str	r3, [r4, #16]
 8005ce6:	4615      	mov	r5, r2
 8005ce8:	e7bc      	b.n	8005c64 <_printf_i+0x14c>
 8005cea:	682b      	ldr	r3, [r5, #0]
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	602a      	str	r2, [r5, #0]
 8005cf0:	681d      	ldr	r5, [r3, #0]
 8005cf2:	6862      	ldr	r2, [r4, #4]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f7fa fa8a 	bl	8000210 <memchr>
 8005cfc:	b108      	cbz	r0, 8005d02 <_printf_i+0x1ea>
 8005cfe:	1b40      	subs	r0, r0, r5
 8005d00:	6060      	str	r0, [r4, #4]
 8005d02:	6863      	ldr	r3, [r4, #4]
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	2300      	movs	r3, #0
 8005d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d0c:	e7aa      	b.n	8005c64 <_printf_i+0x14c>
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	462a      	mov	r2, r5
 8005d12:	4649      	mov	r1, r9
 8005d14:	4640      	mov	r0, r8
 8005d16:	47d0      	blx	sl
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d0ad      	beq.n	8005c78 <_printf_i+0x160>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	079b      	lsls	r3, r3, #30
 8005d20:	d413      	bmi.n	8005d4a <_printf_i+0x232>
 8005d22:	68e0      	ldr	r0, [r4, #12]
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	4298      	cmp	r0, r3
 8005d28:	bfb8      	it	lt
 8005d2a:	4618      	movlt	r0, r3
 8005d2c:	e7a6      	b.n	8005c7c <_printf_i+0x164>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4632      	mov	r2, r6
 8005d32:	4649      	mov	r1, r9
 8005d34:	4640      	mov	r0, r8
 8005d36:	47d0      	blx	sl
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d09d      	beq.n	8005c78 <_printf_i+0x160>
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	9903      	ldr	r1, [sp, #12]
 8005d42:	1a5b      	subs	r3, r3, r1
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dcf2      	bgt.n	8005d2e <_printf_i+0x216>
 8005d48:	e7eb      	b.n	8005d22 <_printf_i+0x20a>
 8005d4a:	2500      	movs	r5, #0
 8005d4c:	f104 0619 	add.w	r6, r4, #25
 8005d50:	e7f5      	b.n	8005d3e <_printf_i+0x226>
 8005d52:	bf00      	nop
 8005d54:	08008820 	.word	0x08008820
 8005d58:	08008831 	.word	0x08008831

08005d5c <std>:
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	4604      	mov	r4, r0
 8005d62:	e9c0 3300 	strd	r3, r3, [r0]
 8005d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d6a:	6083      	str	r3, [r0, #8]
 8005d6c:	8181      	strh	r1, [r0, #12]
 8005d6e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d70:	81c2      	strh	r2, [r0, #14]
 8005d72:	6183      	str	r3, [r0, #24]
 8005d74:	4619      	mov	r1, r3
 8005d76:	2208      	movs	r2, #8
 8005d78:	305c      	adds	r0, #92	; 0x5c
 8005d7a:	f000 fa17 	bl	80061ac <memset>
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <std+0x58>)
 8005d80:	6263      	str	r3, [r4, #36]	; 0x24
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <std+0x5c>)
 8005d84:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d86:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <std+0x60>)
 8005d88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <std+0x64>)
 8005d8c:	6323      	str	r3, [r4, #48]	; 0x30
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <std+0x68>)
 8005d90:	6224      	str	r4, [r4, #32]
 8005d92:	429c      	cmp	r4, r3
 8005d94:	d006      	beq.n	8005da4 <std+0x48>
 8005d96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d9a:	4294      	cmp	r4, r2
 8005d9c:	d002      	beq.n	8005da4 <std+0x48>
 8005d9e:	33d0      	adds	r3, #208	; 0xd0
 8005da0:	429c      	cmp	r4, r3
 8005da2:	d105      	bne.n	8005db0 <std+0x54>
 8005da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	f000 ba7a 	b.w	80062a4 <__retarget_lock_init_recursive>
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	bf00      	nop
 8005db4:	08005ffd 	.word	0x08005ffd
 8005db8:	0800601f 	.word	0x0800601f
 8005dbc:	08006057 	.word	0x08006057
 8005dc0:	0800607b 	.word	0x0800607b
 8005dc4:	20000398 	.word	0x20000398

08005dc8 <stdio_exit_handler>:
 8005dc8:	4a02      	ldr	r2, [pc, #8]	; (8005dd4 <stdio_exit_handler+0xc>)
 8005dca:	4903      	ldr	r1, [pc, #12]	; (8005dd8 <stdio_exit_handler+0x10>)
 8005dcc:	4803      	ldr	r0, [pc, #12]	; (8005ddc <stdio_exit_handler+0x14>)
 8005dce:	f000 b869 	b.w	8005ea4 <_fwalk_sglue>
 8005dd2:	bf00      	nop
 8005dd4:	2000005c 	.word	0x2000005c
 8005dd8:	08007ee1 	.word	0x08007ee1
 8005ddc:	20000068 	.word	0x20000068

08005de0 <cleanup_stdio>:
 8005de0:	6841      	ldr	r1, [r0, #4]
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <cleanup_stdio+0x34>)
 8005de4:	4299      	cmp	r1, r3
 8005de6:	b510      	push	{r4, lr}
 8005de8:	4604      	mov	r4, r0
 8005dea:	d001      	beq.n	8005df0 <cleanup_stdio+0x10>
 8005dec:	f002 f878 	bl	8007ee0 <_fflush_r>
 8005df0:	68a1      	ldr	r1, [r4, #8]
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <cleanup_stdio+0x38>)
 8005df4:	4299      	cmp	r1, r3
 8005df6:	d002      	beq.n	8005dfe <cleanup_stdio+0x1e>
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f002 f871 	bl	8007ee0 <_fflush_r>
 8005dfe:	68e1      	ldr	r1, [r4, #12]
 8005e00:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <cleanup_stdio+0x3c>)
 8005e02:	4299      	cmp	r1, r3
 8005e04:	d004      	beq.n	8005e10 <cleanup_stdio+0x30>
 8005e06:	4620      	mov	r0, r4
 8005e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0c:	f002 b868 	b.w	8007ee0 <_fflush_r>
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	20000398 	.word	0x20000398
 8005e18:	20000400 	.word	0x20000400
 8005e1c:	20000468 	.word	0x20000468

08005e20 <global_stdio_init.part.0>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <global_stdio_init.part.0+0x30>)
 8005e24:	4c0b      	ldr	r4, [pc, #44]	; (8005e54 <global_stdio_init.part.0+0x34>)
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <global_stdio_init.part.0+0x38>)
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2104      	movs	r1, #4
 8005e30:	f7ff ff94 	bl	8005d5c <std>
 8005e34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e38:	2201      	movs	r2, #1
 8005e3a:	2109      	movs	r1, #9
 8005e3c:	f7ff ff8e 	bl	8005d5c <std>
 8005e40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e44:	2202      	movs	r2, #2
 8005e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4a:	2112      	movs	r1, #18
 8005e4c:	f7ff bf86 	b.w	8005d5c <std>
 8005e50:	200004d0 	.word	0x200004d0
 8005e54:	20000398 	.word	0x20000398
 8005e58:	08005dc9 	.word	0x08005dc9

08005e5c <__sfp_lock_acquire>:
 8005e5c:	4801      	ldr	r0, [pc, #4]	; (8005e64 <__sfp_lock_acquire+0x8>)
 8005e5e:	f000 ba22 	b.w	80062a6 <__retarget_lock_acquire_recursive>
 8005e62:	bf00      	nop
 8005e64:	200004d9 	.word	0x200004d9

08005e68 <__sfp_lock_release>:
 8005e68:	4801      	ldr	r0, [pc, #4]	; (8005e70 <__sfp_lock_release+0x8>)
 8005e6a:	f000 ba1d 	b.w	80062a8 <__retarget_lock_release_recursive>
 8005e6e:	bf00      	nop
 8005e70:	200004d9 	.word	0x200004d9

08005e74 <__sinit>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	4604      	mov	r4, r0
 8005e78:	f7ff fff0 	bl	8005e5c <__sfp_lock_acquire>
 8005e7c:	6a23      	ldr	r3, [r4, #32]
 8005e7e:	b11b      	cbz	r3, 8005e88 <__sinit+0x14>
 8005e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e84:	f7ff bff0 	b.w	8005e68 <__sfp_lock_release>
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <__sinit+0x28>)
 8005e8a:	6223      	str	r3, [r4, #32]
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <__sinit+0x2c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f5      	bne.n	8005e80 <__sinit+0xc>
 8005e94:	f7ff ffc4 	bl	8005e20 <global_stdio_init.part.0>
 8005e98:	e7f2      	b.n	8005e80 <__sinit+0xc>
 8005e9a:	bf00      	nop
 8005e9c:	08005de1 	.word	0x08005de1
 8005ea0:	200004d0 	.word	0x200004d0

08005ea4 <_fwalk_sglue>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	4688      	mov	r8, r1
 8005eac:	4614      	mov	r4, r2
 8005eae:	2600      	movs	r6, #0
 8005eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb8:	d505      	bpl.n	8005ec6 <_fwalk_sglue+0x22>
 8005eba:	6824      	ldr	r4, [r4, #0]
 8005ebc:	2c00      	cmp	r4, #0
 8005ebe:	d1f7      	bne.n	8005eb0 <_fwalk_sglue+0xc>
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d907      	bls.n	8005edc <_fwalk_sglue+0x38>
 8005ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	d003      	beq.n	8005edc <_fwalk_sglue+0x38>
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	4306      	orrs	r6, r0
 8005edc:	3568      	adds	r5, #104	; 0x68
 8005ede:	e7e9      	b.n	8005eb4 <_fwalk_sglue+0x10>

08005ee0 <iprintf>:
 8005ee0:	b40f      	push	{r0, r1, r2, r3}
 8005ee2:	b507      	push	{r0, r1, r2, lr}
 8005ee4:	4906      	ldr	r1, [pc, #24]	; (8005f00 <iprintf+0x20>)
 8005ee6:	ab04      	add	r3, sp, #16
 8005ee8:	6808      	ldr	r0, [r1, #0]
 8005eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eee:	6881      	ldr	r1, [r0, #8]
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	f001 fe55 	bl	8007ba0 <_vfiprintf_r>
 8005ef6:	b003      	add	sp, #12
 8005ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005efc:	b004      	add	sp, #16
 8005efe:	4770      	bx	lr
 8005f00:	200000b4 	.word	0x200000b4

08005f04 <_puts_r>:
 8005f04:	6a03      	ldr	r3, [r0, #32]
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	6884      	ldr	r4, [r0, #8]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	460e      	mov	r6, r1
 8005f0e:	b90b      	cbnz	r3, 8005f14 <_puts_r+0x10>
 8005f10:	f7ff ffb0 	bl	8005e74 <__sinit>
 8005f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f16:	07db      	lsls	r3, r3, #31
 8005f18:	d405      	bmi.n	8005f26 <_puts_r+0x22>
 8005f1a:	89a3      	ldrh	r3, [r4, #12]
 8005f1c:	0598      	lsls	r0, r3, #22
 8005f1e:	d402      	bmi.n	8005f26 <_puts_r+0x22>
 8005f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f22:	f000 f9c0 	bl	80062a6 <__retarget_lock_acquire_recursive>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	0719      	lsls	r1, r3, #28
 8005f2a:	d513      	bpl.n	8005f54 <_puts_r+0x50>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	b18b      	cbz	r3, 8005f54 <_puts_r+0x50>
 8005f30:	3e01      	subs	r6, #1
 8005f32:	68a3      	ldr	r3, [r4, #8]
 8005f34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60a3      	str	r3, [r4, #8]
 8005f3c:	b9e9      	cbnz	r1, 8005f7a <_puts_r+0x76>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da2e      	bge.n	8005fa0 <_puts_r+0x9c>
 8005f42:	4622      	mov	r2, r4
 8005f44:	210a      	movs	r1, #10
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f89b 	bl	8006082 <__swbuf_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d007      	beq.n	8005f60 <_puts_r+0x5c>
 8005f50:	250a      	movs	r5, #10
 8005f52:	e007      	b.n	8005f64 <_puts_r+0x60>
 8005f54:	4621      	mov	r1, r4
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 f8d0 	bl	80060fc <__swsetup_r>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d0e7      	beq.n	8005f30 <_puts_r+0x2c>
 8005f60:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f66:	07da      	lsls	r2, r3, #31
 8005f68:	d405      	bmi.n	8005f76 <_puts_r+0x72>
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	059b      	lsls	r3, r3, #22
 8005f6e:	d402      	bmi.n	8005f76 <_puts_r+0x72>
 8005f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f72:	f000 f999 	bl	80062a8 <__retarget_lock_release_recursive>
 8005f76:	4628      	mov	r0, r5
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da04      	bge.n	8005f88 <_puts_r+0x84>
 8005f7e:	69a2      	ldr	r2, [r4, #24]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	dc06      	bgt.n	8005f92 <_puts_r+0x8e>
 8005f84:	290a      	cmp	r1, #10
 8005f86:	d004      	beq.n	8005f92 <_puts_r+0x8e>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	6022      	str	r2, [r4, #0]
 8005f8e:	7019      	strb	r1, [r3, #0]
 8005f90:	e7cf      	b.n	8005f32 <_puts_r+0x2e>
 8005f92:	4622      	mov	r2, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	f000 f874 	bl	8006082 <__swbuf_r>
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d1c9      	bne.n	8005f32 <_puts_r+0x2e>
 8005f9e:	e7df      	b.n	8005f60 <_puts_r+0x5c>
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	250a      	movs	r5, #10
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	6022      	str	r2, [r4, #0]
 8005fa8:	701d      	strb	r5, [r3, #0]
 8005faa:	e7db      	b.n	8005f64 <_puts_r+0x60>

08005fac <puts>:
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <puts+0xc>)
 8005fae:	4601      	mov	r1, r0
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	f7ff bfa7 	b.w	8005f04 <_puts_r>
 8005fb6:	bf00      	nop
 8005fb8:	200000b4 	.word	0x200000b4

08005fbc <siprintf>:
 8005fbc:	b40e      	push	{r1, r2, r3}
 8005fbe:	b500      	push	{lr}
 8005fc0:	b09c      	sub	sp, #112	; 0x70
 8005fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fc4:	9002      	str	r0, [sp, #8]
 8005fc6:	9006      	str	r0, [sp, #24]
 8005fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fcc:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <siprintf+0x38>)
 8005fce:	9107      	str	r1, [sp, #28]
 8005fd0:	9104      	str	r1, [sp, #16]
 8005fd2:	4909      	ldr	r1, [pc, #36]	; (8005ff8 <siprintf+0x3c>)
 8005fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fd8:	9105      	str	r1, [sp, #20]
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	a902      	add	r1, sp, #8
 8005fe0:	f001 fcb6 	bl	8007950 <_svfiprintf_r>
 8005fe4:	9b02      	ldr	r3, [sp, #8]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	b01c      	add	sp, #112	; 0x70
 8005fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff0:	b003      	add	sp, #12
 8005ff2:	4770      	bx	lr
 8005ff4:	200000b4 	.word	0x200000b4
 8005ff8:	ffff0208 	.word	0xffff0208

08005ffc <__sread>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	460c      	mov	r4, r1
 8006000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006004:	f000 f900 	bl	8006208 <_read_r>
 8006008:	2800      	cmp	r0, #0
 800600a:	bfab      	itete	ge
 800600c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800600e:	89a3      	ldrhlt	r3, [r4, #12]
 8006010:	181b      	addge	r3, r3, r0
 8006012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006016:	bfac      	ite	ge
 8006018:	6563      	strge	r3, [r4, #84]	; 0x54
 800601a:	81a3      	strhlt	r3, [r4, #12]
 800601c:	bd10      	pop	{r4, pc}

0800601e <__swrite>:
 800601e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006022:	461f      	mov	r7, r3
 8006024:	898b      	ldrh	r3, [r1, #12]
 8006026:	05db      	lsls	r3, r3, #23
 8006028:	4605      	mov	r5, r0
 800602a:	460c      	mov	r4, r1
 800602c:	4616      	mov	r6, r2
 800602e:	d505      	bpl.n	800603c <__swrite+0x1e>
 8006030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006034:	2302      	movs	r3, #2
 8006036:	2200      	movs	r2, #0
 8006038:	f000 f8d4 	bl	80061e4 <_lseek_r>
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006046:	81a3      	strh	r3, [r4, #12]
 8006048:	4632      	mov	r2, r6
 800604a:	463b      	mov	r3, r7
 800604c:	4628      	mov	r0, r5
 800604e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	f000 b8eb 	b.w	800622c <_write_r>

08006056 <__sseek>:
 8006056:	b510      	push	{r4, lr}
 8006058:	460c      	mov	r4, r1
 800605a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605e:	f000 f8c1 	bl	80061e4 <_lseek_r>
 8006062:	1c43      	adds	r3, r0, #1
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	bf15      	itete	ne
 8006068:	6560      	strne	r0, [r4, #84]	; 0x54
 800606a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800606e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006072:	81a3      	strheq	r3, [r4, #12]
 8006074:	bf18      	it	ne
 8006076:	81a3      	strhne	r3, [r4, #12]
 8006078:	bd10      	pop	{r4, pc}

0800607a <__sclose>:
 800607a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607e:	f000 b8a1 	b.w	80061c4 <_close_r>

08006082 <__swbuf_r>:
 8006082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006084:	460e      	mov	r6, r1
 8006086:	4614      	mov	r4, r2
 8006088:	4605      	mov	r5, r0
 800608a:	b118      	cbz	r0, 8006094 <__swbuf_r+0x12>
 800608c:	6a03      	ldr	r3, [r0, #32]
 800608e:	b90b      	cbnz	r3, 8006094 <__swbuf_r+0x12>
 8006090:	f7ff fef0 	bl	8005e74 <__sinit>
 8006094:	69a3      	ldr	r3, [r4, #24]
 8006096:	60a3      	str	r3, [r4, #8]
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	071a      	lsls	r2, r3, #28
 800609c:	d525      	bpl.n	80060ea <__swbuf_r+0x68>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	b31b      	cbz	r3, 80060ea <__swbuf_r+0x68>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	1a98      	subs	r0, r3, r2
 80060a8:	6963      	ldr	r3, [r4, #20]
 80060aa:	b2f6      	uxtb	r6, r6
 80060ac:	4283      	cmp	r3, r0
 80060ae:	4637      	mov	r7, r6
 80060b0:	dc04      	bgt.n	80060bc <__swbuf_r+0x3a>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f001 ff13 	bl	8007ee0 <_fflush_r>
 80060ba:	b9e0      	cbnz	r0, 80060f6 <__swbuf_r+0x74>
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	3b01      	subs	r3, #1
 80060c0:	60a3      	str	r3, [r4, #8]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	6022      	str	r2, [r4, #0]
 80060c8:	701e      	strb	r6, [r3, #0]
 80060ca:	6962      	ldr	r2, [r4, #20]
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d004      	beq.n	80060dc <__swbuf_r+0x5a>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	07db      	lsls	r3, r3, #31
 80060d6:	d506      	bpl.n	80060e6 <__swbuf_r+0x64>
 80060d8:	2e0a      	cmp	r6, #10
 80060da:	d104      	bne.n	80060e6 <__swbuf_r+0x64>
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f001 fefe 	bl	8007ee0 <_fflush_r>
 80060e4:	b938      	cbnz	r0, 80060f6 <__swbuf_r+0x74>
 80060e6:	4638      	mov	r0, r7
 80060e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ea:	4621      	mov	r1, r4
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 f805 	bl	80060fc <__swsetup_r>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d0d5      	beq.n	80060a2 <__swbuf_r+0x20>
 80060f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060fa:	e7f4      	b.n	80060e6 <__swbuf_r+0x64>

080060fc <__swsetup_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <__swsetup_r+0xac>)
 8006100:	4605      	mov	r5, r0
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	460c      	mov	r4, r1
 8006106:	b118      	cbz	r0, 8006110 <__swsetup_r+0x14>
 8006108:	6a03      	ldr	r3, [r0, #32]
 800610a:	b90b      	cbnz	r3, 8006110 <__swsetup_r+0x14>
 800610c:	f7ff feb2 	bl	8005e74 <__sinit>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006116:	0718      	lsls	r0, r3, #28
 8006118:	d422      	bmi.n	8006160 <__swsetup_r+0x64>
 800611a:	06d9      	lsls	r1, r3, #27
 800611c:	d407      	bmi.n	800612e <__swsetup_r+0x32>
 800611e:	2309      	movs	r3, #9
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612c:	e034      	b.n	8006198 <__swsetup_r+0x9c>
 800612e:	0758      	lsls	r0, r3, #29
 8006130:	d512      	bpl.n	8006158 <__swsetup_r+0x5c>
 8006132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006134:	b141      	cbz	r1, 8006148 <__swsetup_r+0x4c>
 8006136:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800613a:	4299      	cmp	r1, r3
 800613c:	d002      	beq.n	8006144 <__swsetup_r+0x48>
 800613e:	4628      	mov	r0, r5
 8006140:	f000 ff30 	bl	8006fa4 <_free_r>
 8006144:	2300      	movs	r3, #0
 8006146:	6363      	str	r3, [r4, #52]	; 0x34
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800614e:	81a3      	strh	r3, [r4, #12]
 8006150:	2300      	movs	r3, #0
 8006152:	6063      	str	r3, [r4, #4]
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f043 0308 	orr.w	r3, r3, #8
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	b94b      	cbnz	r3, 8006178 <__swsetup_r+0x7c>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800616a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616e:	d003      	beq.n	8006178 <__swsetup_r+0x7c>
 8006170:	4621      	mov	r1, r4
 8006172:	4628      	mov	r0, r5
 8006174:	f001 ff02 	bl	8007f7c <__smakebuf_r>
 8006178:	89a0      	ldrh	r0, [r4, #12]
 800617a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800617e:	f010 0301 	ands.w	r3, r0, #1
 8006182:	d00a      	beq.n	800619a <__swsetup_r+0x9e>
 8006184:	2300      	movs	r3, #0
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	6963      	ldr	r3, [r4, #20]
 800618a:	425b      	negs	r3, r3
 800618c:	61a3      	str	r3, [r4, #24]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	b943      	cbnz	r3, 80061a4 <__swsetup_r+0xa8>
 8006192:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006196:	d1c4      	bne.n	8006122 <__swsetup_r+0x26>
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	0781      	lsls	r1, r0, #30
 800619c:	bf58      	it	pl
 800619e:	6963      	ldrpl	r3, [r4, #20]
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	e7f4      	b.n	800618e <__swsetup_r+0x92>
 80061a4:	2000      	movs	r0, #0
 80061a6:	e7f7      	b.n	8006198 <__swsetup_r+0x9c>
 80061a8:	200000b4 	.word	0x200000b4

080061ac <memset>:
 80061ac:	4402      	add	r2, r0
 80061ae:	4603      	mov	r3, r0
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d100      	bne.n	80061b6 <memset+0xa>
 80061b4:	4770      	bx	lr
 80061b6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ba:	e7f9      	b.n	80061b0 <memset+0x4>

080061bc <_localeconv_r>:
 80061bc:	4800      	ldr	r0, [pc, #0]	; (80061c0 <_localeconv_r+0x4>)
 80061be:	4770      	bx	lr
 80061c0:	200001a8 	.word	0x200001a8

080061c4 <_close_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d06      	ldr	r5, [pc, #24]	; (80061e0 <_close_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fb fa39 	bl	8001646 <_close>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_close_r+0x1a>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_close_r+0x1a>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	200004d4 	.word	0x200004d4

080061e4 <_lseek_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d07      	ldr	r5, [pc, #28]	; (8006204 <_lseek_r+0x20>)
 80061e8:	4604      	mov	r4, r0
 80061ea:	4608      	mov	r0, r1
 80061ec:	4611      	mov	r1, r2
 80061ee:	2200      	movs	r2, #0
 80061f0:	602a      	str	r2, [r5, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	f7fb fa4e 	bl	8001694 <_lseek>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_lseek_r+0x1e>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_lseek_r+0x1e>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	200004d4 	.word	0x200004d4

08006208 <_read_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_read_r+0x20>)
 800620c:	4604      	mov	r4, r0
 800620e:	4608      	mov	r0, r1
 8006210:	4611      	mov	r1, r2
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f7fb f9dc 	bl	80015d4 <_read>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_read_r+0x1e>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_read_r+0x1e>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	200004d4 	.word	0x200004d4

0800622c <_write_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d07      	ldr	r5, [pc, #28]	; (800624c <_write_r+0x20>)
 8006230:	4604      	mov	r4, r0
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	2200      	movs	r2, #0
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f7fb f9e7 	bl	800160e <_write>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_write_r+0x1e>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_write_r+0x1e>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	200004d4 	.word	0x200004d4

08006250 <__errno>:
 8006250:	4b01      	ldr	r3, [pc, #4]	; (8006258 <__errno+0x8>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	200000b4 	.word	0x200000b4

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4d0d      	ldr	r5, [pc, #52]	; (8006294 <__libc_init_array+0x38>)
 8006260:	4c0d      	ldr	r4, [pc, #52]	; (8006298 <__libc_init_array+0x3c>)
 8006262:	1b64      	subs	r4, r4, r5
 8006264:	10a4      	asrs	r4, r4, #2
 8006266:	2600      	movs	r6, #0
 8006268:	42a6      	cmp	r6, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	4d0b      	ldr	r5, [pc, #44]	; (800629c <__libc_init_array+0x40>)
 800626e:	4c0c      	ldr	r4, [pc, #48]	; (80062a0 <__libc_init_array+0x44>)
 8006270:	f002 f802 	bl	8008278 <_init>
 8006274:	1b64      	subs	r4, r4, r5
 8006276:	10a4      	asrs	r4, r4, #2
 8006278:	2600      	movs	r6, #0
 800627a:	42a6      	cmp	r6, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	f855 3b04 	ldr.w	r3, [r5], #4
 8006284:	4798      	blx	r3
 8006286:	3601      	adds	r6, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	f855 3b04 	ldr.w	r3, [r5], #4
 800628e:	4798      	blx	r3
 8006290:	3601      	adds	r6, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	08008b84 	.word	0x08008b84
 8006298:	08008b84 	.word	0x08008b84
 800629c:	08008b84 	.word	0x08008b84
 80062a0:	08008b88 	.word	0x08008b88

080062a4 <__retarget_lock_init_recursive>:
 80062a4:	4770      	bx	lr

080062a6 <__retarget_lock_acquire_recursive>:
 80062a6:	4770      	bx	lr

080062a8 <__retarget_lock_release_recursive>:
 80062a8:	4770      	bx	lr

080062aa <quorem>:
 80062aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ae:	6903      	ldr	r3, [r0, #16]
 80062b0:	690c      	ldr	r4, [r1, #16]
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	4607      	mov	r7, r0
 80062b6:	db7e      	blt.n	80063b6 <quorem+0x10c>
 80062b8:	3c01      	subs	r4, #1
 80062ba:	f101 0814 	add.w	r8, r1, #20
 80062be:	f100 0514 	add.w	r5, r0, #20
 80062c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062d0:	3301      	adds	r3, #1
 80062d2:	429a      	cmp	r2, r3
 80062d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80062e0:	d331      	bcc.n	8006346 <quorem+0x9c>
 80062e2:	f04f 0e00 	mov.w	lr, #0
 80062e6:	4640      	mov	r0, r8
 80062e8:	46ac      	mov	ip, r5
 80062ea:	46f2      	mov	sl, lr
 80062ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80062f0:	b293      	uxth	r3, r2
 80062f2:	fb06 e303 	mla	r3, r6, r3, lr
 80062f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062fa:	0c1a      	lsrs	r2, r3, #16
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006302:	f8dc a000 	ldr.w	sl, [ip]
 8006306:	fa13 f38a 	uxtah	r3, r3, sl
 800630a:	fb06 220e 	mla	r2, r6, lr, r2
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	9b00      	ldr	r3, [sp, #0]
 8006312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006316:	b292      	uxth	r2, r2
 8006318:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800631c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006320:	f8bd 3000 	ldrh.w	r3, [sp]
 8006324:	4581      	cmp	r9, r0
 8006326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800632a:	f84c 3b04 	str.w	r3, [ip], #4
 800632e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006332:	d2db      	bcs.n	80062ec <quorem+0x42>
 8006334:	f855 300b 	ldr.w	r3, [r5, fp]
 8006338:	b92b      	cbnz	r3, 8006346 <quorem+0x9c>
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	3b04      	subs	r3, #4
 800633e:	429d      	cmp	r5, r3
 8006340:	461a      	mov	r2, r3
 8006342:	d32c      	bcc.n	800639e <quorem+0xf4>
 8006344:	613c      	str	r4, [r7, #16]
 8006346:	4638      	mov	r0, r7
 8006348:	f001 f9a8 	bl	800769c <__mcmp>
 800634c:	2800      	cmp	r0, #0
 800634e:	db22      	blt.n	8006396 <quorem+0xec>
 8006350:	3601      	adds	r6, #1
 8006352:	4629      	mov	r1, r5
 8006354:	2000      	movs	r0, #0
 8006356:	f858 2b04 	ldr.w	r2, [r8], #4
 800635a:	f8d1 c000 	ldr.w	ip, [r1]
 800635e:	b293      	uxth	r3, r2
 8006360:	1ac3      	subs	r3, r0, r3
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	fa13 f38c 	uxtah	r3, r3, ip
 8006368:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800636c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006376:	45c1      	cmp	r9, r8
 8006378:	f841 3b04 	str.w	r3, [r1], #4
 800637c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006380:	d2e9      	bcs.n	8006356 <quorem+0xac>
 8006382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800638a:	b922      	cbnz	r2, 8006396 <quorem+0xec>
 800638c:	3b04      	subs	r3, #4
 800638e:	429d      	cmp	r5, r3
 8006390:	461a      	mov	r2, r3
 8006392:	d30a      	bcc.n	80063aa <quorem+0x100>
 8006394:	613c      	str	r4, [r7, #16]
 8006396:	4630      	mov	r0, r6
 8006398:	b003      	add	sp, #12
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d1ce      	bne.n	8006344 <quorem+0x9a>
 80063a6:	3c01      	subs	r4, #1
 80063a8:	e7c9      	b.n	800633e <quorem+0x94>
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1f0      	bne.n	8006394 <quorem+0xea>
 80063b2:	3c01      	subs	r4, #1
 80063b4:	e7eb      	b.n	800638e <quorem+0xe4>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e7ee      	b.n	8006398 <quorem+0xee>
 80063ba:	0000      	movs	r0, r0
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <_dtoa_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	ed2d 8b04 	vpush	{d8-d9}
 80063c8:	69c5      	ldr	r5, [r0, #28]
 80063ca:	b093      	sub	sp, #76	; 0x4c
 80063cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063d0:	ec57 6b10 	vmov	r6, r7, d0
 80063d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063d8:	9107      	str	r1, [sp, #28]
 80063da:	4604      	mov	r4, r0
 80063dc:	920a      	str	r2, [sp, #40]	; 0x28
 80063de:	930d      	str	r3, [sp, #52]	; 0x34
 80063e0:	b975      	cbnz	r5, 8006400 <_dtoa_r+0x40>
 80063e2:	2010      	movs	r0, #16
 80063e4:	f000 fe2a 	bl	800703c <malloc>
 80063e8:	4602      	mov	r2, r0
 80063ea:	61e0      	str	r0, [r4, #28]
 80063ec:	b920      	cbnz	r0, 80063f8 <_dtoa_r+0x38>
 80063ee:	4bae      	ldr	r3, [pc, #696]	; (80066a8 <_dtoa_r+0x2e8>)
 80063f0:	21ef      	movs	r1, #239	; 0xef
 80063f2:	48ae      	ldr	r0, [pc, #696]	; (80066ac <_dtoa_r+0x2ec>)
 80063f4:	f001 fe58 	bl	80080a8 <__assert_func>
 80063f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063fc:	6005      	str	r5, [r0, #0]
 80063fe:	60c5      	str	r5, [r0, #12]
 8006400:	69e3      	ldr	r3, [r4, #28]
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	b151      	cbz	r1, 800641c <_dtoa_r+0x5c>
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	604a      	str	r2, [r1, #4]
 800640a:	2301      	movs	r3, #1
 800640c:	4093      	lsls	r3, r2
 800640e:	608b      	str	r3, [r1, #8]
 8006410:	4620      	mov	r0, r4
 8006412:	f000 ff07 	bl	8007224 <_Bfree>
 8006416:	69e3      	ldr	r3, [r4, #28]
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	1e3b      	subs	r3, r7, #0
 800641e:	bfbb      	ittet	lt
 8006420:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006424:	9303      	strlt	r3, [sp, #12]
 8006426:	2300      	movge	r3, #0
 8006428:	2201      	movlt	r2, #1
 800642a:	bfac      	ite	ge
 800642c:	f8c8 3000 	strge.w	r3, [r8]
 8006430:	f8c8 2000 	strlt.w	r2, [r8]
 8006434:	4b9e      	ldr	r3, [pc, #632]	; (80066b0 <_dtoa_r+0x2f0>)
 8006436:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800643a:	ea33 0308 	bics.w	r3, r3, r8
 800643e:	d11b      	bne.n	8006478 <_dtoa_r+0xb8>
 8006440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006442:	f242 730f 	movw	r3, #9999	; 0x270f
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800644c:	4333      	orrs	r3, r6
 800644e:	f000 8593 	beq.w	8006f78 <_dtoa_r+0xbb8>
 8006452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006454:	b963      	cbnz	r3, 8006470 <_dtoa_r+0xb0>
 8006456:	4b97      	ldr	r3, [pc, #604]	; (80066b4 <_dtoa_r+0x2f4>)
 8006458:	e027      	b.n	80064aa <_dtoa_r+0xea>
 800645a:	4b97      	ldr	r3, [pc, #604]	; (80066b8 <_dtoa_r+0x2f8>)
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	9800      	ldr	r0, [sp, #0]
 8006466:	b013      	add	sp, #76	; 0x4c
 8006468:	ecbd 8b04 	vpop	{d8-d9}
 800646c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006470:	4b90      	ldr	r3, [pc, #576]	; (80066b4 <_dtoa_r+0x2f4>)
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	3303      	adds	r3, #3
 8006476:	e7f3      	b.n	8006460 <_dtoa_r+0xa0>
 8006478:	ed9d 7b02 	vldr	d7, [sp, #8]
 800647c:	2200      	movs	r2, #0
 800647e:	ec51 0b17 	vmov	r0, r1, d7
 8006482:	eeb0 8a47 	vmov.f32	s16, s14
 8006486:	eef0 8a67 	vmov.f32	s17, s15
 800648a:	2300      	movs	r3, #0
 800648c:	f7fa fb3c 	bl	8000b08 <__aeabi_dcmpeq>
 8006490:	4681      	mov	r9, r0
 8006492:	b160      	cbz	r0, 80064ae <_dtoa_r+0xee>
 8006494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006496:	2301      	movs	r3, #1
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8568 	beq.w	8006f72 <_dtoa_r+0xbb2>
 80064a2:	4b86      	ldr	r3, [pc, #536]	; (80066bc <_dtoa_r+0x2fc>)
 80064a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	e7da      	b.n	8006464 <_dtoa_r+0xa4>
 80064ae:	aa10      	add	r2, sp, #64	; 0x40
 80064b0:	a911      	add	r1, sp, #68	; 0x44
 80064b2:	4620      	mov	r0, r4
 80064b4:	eeb0 0a48 	vmov.f32	s0, s16
 80064b8:	eef0 0a68 	vmov.f32	s1, s17
 80064bc:	f001 f994 	bl	80077e8 <__d2b>
 80064c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80064c4:	4682      	mov	sl, r0
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	d07f      	beq.n	80065ca <_dtoa_r+0x20a>
 80064ca:	ee18 3a90 	vmov	r3, s17
 80064ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80064d6:	ec51 0b18 	vmov	r0, r1, d8
 80064da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80064de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80064e6:	4619      	mov	r1, r3
 80064e8:	2200      	movs	r2, #0
 80064ea:	4b75      	ldr	r3, [pc, #468]	; (80066c0 <_dtoa_r+0x300>)
 80064ec:	f7f9 feec 	bl	80002c8 <__aeabi_dsub>
 80064f0:	a367      	add	r3, pc, #412	; (adr r3, 8006690 <_dtoa_r+0x2d0>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f89f 	bl	8000638 <__aeabi_dmul>
 80064fa:	a367      	add	r3, pc, #412	; (adr r3, 8006698 <_dtoa_r+0x2d8>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7f9 fee4 	bl	80002cc <__adddf3>
 8006504:	4606      	mov	r6, r0
 8006506:	4628      	mov	r0, r5
 8006508:	460f      	mov	r7, r1
 800650a:	f7fa f82b 	bl	8000564 <__aeabi_i2d>
 800650e:	a364      	add	r3, pc, #400	; (adr r3, 80066a0 <_dtoa_r+0x2e0>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f7fa f890 	bl	8000638 <__aeabi_dmul>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	f7f9 fed4 	bl	80002cc <__adddf3>
 8006524:	4606      	mov	r6, r0
 8006526:	460f      	mov	r7, r1
 8006528:	f7fa fb36 	bl	8000b98 <__aeabi_d2iz>
 800652c:	2200      	movs	r2, #0
 800652e:	4683      	mov	fp, r0
 8006530:	2300      	movs	r3, #0
 8006532:	4630      	mov	r0, r6
 8006534:	4639      	mov	r1, r7
 8006536:	f7fa faf1 	bl	8000b1c <__aeabi_dcmplt>
 800653a:	b148      	cbz	r0, 8006550 <_dtoa_r+0x190>
 800653c:	4658      	mov	r0, fp
 800653e:	f7fa f811 	bl	8000564 <__aeabi_i2d>
 8006542:	4632      	mov	r2, r6
 8006544:	463b      	mov	r3, r7
 8006546:	f7fa fadf 	bl	8000b08 <__aeabi_dcmpeq>
 800654a:	b908      	cbnz	r0, 8006550 <_dtoa_r+0x190>
 800654c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006550:	f1bb 0f16 	cmp.w	fp, #22
 8006554:	d857      	bhi.n	8006606 <_dtoa_r+0x246>
 8006556:	4b5b      	ldr	r3, [pc, #364]	; (80066c4 <_dtoa_r+0x304>)
 8006558:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	ec51 0b18 	vmov	r0, r1, d8
 8006564:	f7fa fada 	bl	8000b1c <__aeabi_dcmplt>
 8006568:	2800      	cmp	r0, #0
 800656a:	d04e      	beq.n	800660a <_dtoa_r+0x24a>
 800656c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006570:	2300      	movs	r3, #0
 8006572:	930c      	str	r3, [sp, #48]	; 0x30
 8006574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006576:	1b5b      	subs	r3, r3, r5
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	bf45      	ittet	mi
 800657c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006580:	9305      	strmi	r3, [sp, #20]
 8006582:	2300      	movpl	r3, #0
 8006584:	2300      	movmi	r3, #0
 8006586:	9206      	str	r2, [sp, #24]
 8006588:	bf54      	ite	pl
 800658a:	9305      	strpl	r3, [sp, #20]
 800658c:	9306      	strmi	r3, [sp, #24]
 800658e:	f1bb 0f00 	cmp.w	fp, #0
 8006592:	db3c      	blt.n	800660e <_dtoa_r+0x24e>
 8006594:	9b06      	ldr	r3, [sp, #24]
 8006596:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800659a:	445b      	add	r3, fp
 800659c:	9306      	str	r3, [sp, #24]
 800659e:	2300      	movs	r3, #0
 80065a0:	9308      	str	r3, [sp, #32]
 80065a2:	9b07      	ldr	r3, [sp, #28]
 80065a4:	2b09      	cmp	r3, #9
 80065a6:	d868      	bhi.n	800667a <_dtoa_r+0x2ba>
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	bfc4      	itt	gt
 80065ac:	3b04      	subgt	r3, #4
 80065ae:	9307      	strgt	r3, [sp, #28]
 80065b0:	9b07      	ldr	r3, [sp, #28]
 80065b2:	f1a3 0302 	sub.w	r3, r3, #2
 80065b6:	bfcc      	ite	gt
 80065b8:	2500      	movgt	r5, #0
 80065ba:	2501      	movle	r5, #1
 80065bc:	2b03      	cmp	r3, #3
 80065be:	f200 8085 	bhi.w	80066cc <_dtoa_r+0x30c>
 80065c2:	e8df f003 	tbb	[pc, r3]
 80065c6:	3b2e      	.short	0x3b2e
 80065c8:	5839      	.short	0x5839
 80065ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065ce:	441d      	add	r5, r3
 80065d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	bfc1      	itttt	gt
 80065d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80065e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80065e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80065e8:	bfd6      	itet	le
 80065ea:	f1c3 0320 	rsble	r3, r3, #32
 80065ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80065f2:	fa06 f003 	lslle.w	r0, r6, r3
 80065f6:	f7f9 ffa5 	bl	8000544 <__aeabi_ui2d>
 80065fa:	2201      	movs	r2, #1
 80065fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006600:	3d01      	subs	r5, #1
 8006602:	920e      	str	r2, [sp, #56]	; 0x38
 8006604:	e76f      	b.n	80064e6 <_dtoa_r+0x126>
 8006606:	2301      	movs	r3, #1
 8006608:	e7b3      	b.n	8006572 <_dtoa_r+0x1b2>
 800660a:	900c      	str	r0, [sp, #48]	; 0x30
 800660c:	e7b2      	b.n	8006574 <_dtoa_r+0x1b4>
 800660e:	9b05      	ldr	r3, [sp, #20]
 8006610:	eba3 030b 	sub.w	r3, r3, fp
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	f1cb 0300 	rsb	r3, fp, #0
 800661a:	9308      	str	r3, [sp, #32]
 800661c:	2300      	movs	r3, #0
 800661e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006620:	e7bf      	b.n	80065a2 <_dtoa_r+0x1e2>
 8006622:	2300      	movs	r3, #0
 8006624:	9309      	str	r3, [sp, #36]	; 0x24
 8006626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc52      	bgt.n	80066d2 <_dtoa_r+0x312>
 800662c:	2301      	movs	r3, #1
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	461a      	mov	r2, r3
 8006634:	920a      	str	r2, [sp, #40]	; 0x28
 8006636:	e00b      	b.n	8006650 <_dtoa_r+0x290>
 8006638:	2301      	movs	r3, #1
 800663a:	e7f3      	b.n	8006624 <_dtoa_r+0x264>
 800663c:	2300      	movs	r3, #0
 800663e:	9309      	str	r3, [sp, #36]	; 0x24
 8006640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006642:	445b      	add	r3, fp
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	3301      	adds	r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	bfb8      	it	lt
 800664e:	2301      	movlt	r3, #1
 8006650:	69e0      	ldr	r0, [r4, #28]
 8006652:	2100      	movs	r1, #0
 8006654:	2204      	movs	r2, #4
 8006656:	f102 0614 	add.w	r6, r2, #20
 800665a:	429e      	cmp	r6, r3
 800665c:	d93d      	bls.n	80066da <_dtoa_r+0x31a>
 800665e:	6041      	str	r1, [r0, #4]
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fd9f 	bl	80071a4 <_Balloc>
 8006666:	9000      	str	r0, [sp, #0]
 8006668:	2800      	cmp	r0, #0
 800666a:	d139      	bne.n	80066e0 <_dtoa_r+0x320>
 800666c:	4b16      	ldr	r3, [pc, #88]	; (80066c8 <_dtoa_r+0x308>)
 800666e:	4602      	mov	r2, r0
 8006670:	f240 11af 	movw	r1, #431	; 0x1af
 8006674:	e6bd      	b.n	80063f2 <_dtoa_r+0x32>
 8006676:	2301      	movs	r3, #1
 8006678:	e7e1      	b.n	800663e <_dtoa_r+0x27e>
 800667a:	2501      	movs	r5, #1
 800667c:	2300      	movs	r3, #0
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	9509      	str	r5, [sp, #36]	; 0x24
 8006682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006686:	9301      	str	r3, [sp, #4]
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	2200      	movs	r2, #0
 800668c:	2312      	movs	r3, #18
 800668e:	e7d1      	b.n	8006634 <_dtoa_r+0x274>
 8006690:	636f4361 	.word	0x636f4361
 8006694:	3fd287a7 	.word	0x3fd287a7
 8006698:	8b60c8b3 	.word	0x8b60c8b3
 800669c:	3fc68a28 	.word	0x3fc68a28
 80066a0:	509f79fb 	.word	0x509f79fb
 80066a4:	3fd34413 	.word	0x3fd34413
 80066a8:	0800884f 	.word	0x0800884f
 80066ac:	08008866 	.word	0x08008866
 80066b0:	7ff00000 	.word	0x7ff00000
 80066b4:	0800884b 	.word	0x0800884b
 80066b8:	08008842 	.word	0x08008842
 80066bc:	0800881f 	.word	0x0800881f
 80066c0:	3ff80000 	.word	0x3ff80000
 80066c4:	08008950 	.word	0x08008950
 80066c8:	080088be 	.word	0x080088be
 80066cc:	2301      	movs	r3, #1
 80066ce:	9309      	str	r3, [sp, #36]	; 0x24
 80066d0:	e7d7      	b.n	8006682 <_dtoa_r+0x2c2>
 80066d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	e7ba      	b.n	8006650 <_dtoa_r+0x290>
 80066da:	3101      	adds	r1, #1
 80066dc:	0052      	lsls	r2, r2, #1
 80066de:	e7ba      	b.n	8006656 <_dtoa_r+0x296>
 80066e0:	69e3      	ldr	r3, [r4, #28]
 80066e2:	9a00      	ldr	r2, [sp, #0]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	9b04      	ldr	r3, [sp, #16]
 80066e8:	2b0e      	cmp	r3, #14
 80066ea:	f200 80a8 	bhi.w	800683e <_dtoa_r+0x47e>
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	f000 80a5 	beq.w	800683e <_dtoa_r+0x47e>
 80066f4:	f1bb 0f00 	cmp.w	fp, #0
 80066f8:	dd38      	ble.n	800676c <_dtoa_r+0x3ac>
 80066fa:	4bc0      	ldr	r3, [pc, #768]	; (80069fc <_dtoa_r+0x63c>)
 80066fc:	f00b 020f 	and.w	r2, fp, #15
 8006700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006704:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006708:	e9d3 6700 	ldrd	r6, r7, [r3]
 800670c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006710:	d019      	beq.n	8006746 <_dtoa_r+0x386>
 8006712:	4bbb      	ldr	r3, [pc, #748]	; (8006a00 <_dtoa_r+0x640>)
 8006714:	ec51 0b18 	vmov	r0, r1, d8
 8006718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800671c:	f7fa f8b6 	bl	800088c <__aeabi_ddiv>
 8006720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006724:	f008 080f 	and.w	r8, r8, #15
 8006728:	2503      	movs	r5, #3
 800672a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006a00 <_dtoa_r+0x640>
 800672e:	f1b8 0f00 	cmp.w	r8, #0
 8006732:	d10a      	bne.n	800674a <_dtoa_r+0x38a>
 8006734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006738:	4632      	mov	r2, r6
 800673a:	463b      	mov	r3, r7
 800673c:	f7fa f8a6 	bl	800088c <__aeabi_ddiv>
 8006740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006744:	e02b      	b.n	800679e <_dtoa_r+0x3de>
 8006746:	2502      	movs	r5, #2
 8006748:	e7ef      	b.n	800672a <_dtoa_r+0x36a>
 800674a:	f018 0f01 	tst.w	r8, #1
 800674e:	d008      	beq.n	8006762 <_dtoa_r+0x3a2>
 8006750:	4630      	mov	r0, r6
 8006752:	4639      	mov	r1, r7
 8006754:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006758:	f7f9 ff6e 	bl	8000638 <__aeabi_dmul>
 800675c:	3501      	adds	r5, #1
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006766:	f109 0908 	add.w	r9, r9, #8
 800676a:	e7e0      	b.n	800672e <_dtoa_r+0x36e>
 800676c:	f000 809f 	beq.w	80068ae <_dtoa_r+0x4ee>
 8006770:	f1cb 0600 	rsb	r6, fp, #0
 8006774:	4ba1      	ldr	r3, [pc, #644]	; (80069fc <_dtoa_r+0x63c>)
 8006776:	4fa2      	ldr	r7, [pc, #648]	; (8006a00 <_dtoa_r+0x640>)
 8006778:	f006 020f 	and.w	r2, r6, #15
 800677c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	ec51 0b18 	vmov	r0, r1, d8
 8006788:	f7f9 ff56 	bl	8000638 <__aeabi_dmul>
 800678c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006790:	1136      	asrs	r6, r6, #4
 8006792:	2300      	movs	r3, #0
 8006794:	2502      	movs	r5, #2
 8006796:	2e00      	cmp	r6, #0
 8006798:	d17e      	bne.n	8006898 <_dtoa_r+0x4d8>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1d0      	bne.n	8006740 <_dtoa_r+0x380>
 800679e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8084 	beq.w	80068b2 <_dtoa_r+0x4f2>
 80067aa:	4b96      	ldr	r3, [pc, #600]	; (8006a04 <_dtoa_r+0x644>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7fa f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d07b      	beq.n	80068b2 <_dtoa_r+0x4f2>
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d078      	beq.n	80068b2 <_dtoa_r+0x4f2>
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd39      	ble.n	800683a <_dtoa_r+0x47a>
 80067c6:	4b90      	ldr	r3, [pc, #576]	; (8006a08 <_dtoa_r+0x648>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f7f9 ff33 	bl	8000638 <__aeabi_dmul>
 80067d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067d6:	9e01      	ldr	r6, [sp, #4]
 80067d8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80067dc:	3501      	adds	r5, #1
 80067de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7f9 febe 	bl	8000564 <__aeabi_i2d>
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	f7f9 ff24 	bl	8000638 <__aeabi_dmul>
 80067f0:	4b86      	ldr	r3, [pc, #536]	; (8006a0c <_dtoa_r+0x64c>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	f7f9 fd6a 	bl	80002cc <__adddf3>
 80067f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80067fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006800:	9303      	str	r3, [sp, #12]
 8006802:	2e00      	cmp	r6, #0
 8006804:	d158      	bne.n	80068b8 <_dtoa_r+0x4f8>
 8006806:	4b82      	ldr	r3, [pc, #520]	; (8006a10 <_dtoa_r+0x650>)
 8006808:	2200      	movs	r2, #0
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7f9 fd5b 	bl	80002c8 <__aeabi_dsub>
 8006812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006816:	4680      	mov	r8, r0
 8006818:	4689      	mov	r9, r1
 800681a:	f7fa f99d 	bl	8000b58 <__aeabi_dcmpgt>
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 8296 	bne.w	8006d50 <_dtoa_r+0x990>
 8006824:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006828:	4640      	mov	r0, r8
 800682a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800682e:	4649      	mov	r1, r9
 8006830:	f7fa f974 	bl	8000b1c <__aeabi_dcmplt>
 8006834:	2800      	cmp	r0, #0
 8006836:	f040 8289 	bne.w	8006d4c <_dtoa_r+0x98c>
 800683a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800683e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006840:	2b00      	cmp	r3, #0
 8006842:	f2c0 814e 	blt.w	8006ae2 <_dtoa_r+0x722>
 8006846:	f1bb 0f0e 	cmp.w	fp, #14
 800684a:	f300 814a 	bgt.w	8006ae2 <_dtoa_r+0x722>
 800684e:	4b6b      	ldr	r3, [pc, #428]	; (80069fc <_dtoa_r+0x63c>)
 8006850:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685a:	2b00      	cmp	r3, #0
 800685c:	f280 80dc 	bge.w	8006a18 <_dtoa_r+0x658>
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f300 80d8 	bgt.w	8006a18 <_dtoa_r+0x658>
 8006868:	f040 826f 	bne.w	8006d4a <_dtoa_r+0x98a>
 800686c:	4b68      	ldr	r3, [pc, #416]	; (8006a10 <_dtoa_r+0x650>)
 800686e:	2200      	movs	r2, #0
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	f7f9 fee0 	bl	8000638 <__aeabi_dmul>
 8006878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800687c:	f7fa f962 	bl	8000b44 <__aeabi_dcmpge>
 8006880:	9e04      	ldr	r6, [sp, #16]
 8006882:	4637      	mov	r7, r6
 8006884:	2800      	cmp	r0, #0
 8006886:	f040 8245 	bne.w	8006d14 <_dtoa_r+0x954>
 800688a:	9d00      	ldr	r5, [sp, #0]
 800688c:	2331      	movs	r3, #49	; 0x31
 800688e:	f805 3b01 	strb.w	r3, [r5], #1
 8006892:	f10b 0b01 	add.w	fp, fp, #1
 8006896:	e241      	b.n	8006d1c <_dtoa_r+0x95c>
 8006898:	07f2      	lsls	r2, r6, #31
 800689a:	d505      	bpl.n	80068a8 <_dtoa_r+0x4e8>
 800689c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a0:	f7f9 feca 	bl	8000638 <__aeabi_dmul>
 80068a4:	3501      	adds	r5, #1
 80068a6:	2301      	movs	r3, #1
 80068a8:	1076      	asrs	r6, r6, #1
 80068aa:	3708      	adds	r7, #8
 80068ac:	e773      	b.n	8006796 <_dtoa_r+0x3d6>
 80068ae:	2502      	movs	r5, #2
 80068b0:	e775      	b.n	800679e <_dtoa_r+0x3de>
 80068b2:	9e04      	ldr	r6, [sp, #16]
 80068b4:	465f      	mov	r7, fp
 80068b6:	e792      	b.n	80067de <_dtoa_r+0x41e>
 80068b8:	9900      	ldr	r1, [sp, #0]
 80068ba:	4b50      	ldr	r3, [pc, #320]	; (80069fc <_dtoa_r+0x63c>)
 80068bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068c0:	4431      	add	r1, r6
 80068c2:	9102      	str	r1, [sp, #8]
 80068c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068c6:	eeb0 9a47 	vmov.f32	s18, s14
 80068ca:	eef0 9a67 	vmov.f32	s19, s15
 80068ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068d6:	2900      	cmp	r1, #0
 80068d8:	d044      	beq.n	8006964 <_dtoa_r+0x5a4>
 80068da:	494e      	ldr	r1, [pc, #312]	; (8006a14 <_dtoa_r+0x654>)
 80068dc:	2000      	movs	r0, #0
 80068de:	f7f9 ffd5 	bl	800088c <__aeabi_ddiv>
 80068e2:	ec53 2b19 	vmov	r2, r3, d9
 80068e6:	f7f9 fcef 	bl	80002c8 <__aeabi_dsub>
 80068ea:	9d00      	ldr	r5, [sp, #0]
 80068ec:	ec41 0b19 	vmov	d9, r0, r1
 80068f0:	4649      	mov	r1, r9
 80068f2:	4640      	mov	r0, r8
 80068f4:	f7fa f950 	bl	8000b98 <__aeabi_d2iz>
 80068f8:	4606      	mov	r6, r0
 80068fa:	f7f9 fe33 	bl	8000564 <__aeabi_i2d>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 fcdf 	bl	80002c8 <__aeabi_dsub>
 800690a:	3630      	adds	r6, #48	; 0x30
 800690c:	f805 6b01 	strb.w	r6, [r5], #1
 8006910:	ec53 2b19 	vmov	r2, r3, d9
 8006914:	4680      	mov	r8, r0
 8006916:	4689      	mov	r9, r1
 8006918:	f7fa f900 	bl	8000b1c <__aeabi_dcmplt>
 800691c:	2800      	cmp	r0, #0
 800691e:	d164      	bne.n	80069ea <_dtoa_r+0x62a>
 8006920:	4642      	mov	r2, r8
 8006922:	464b      	mov	r3, r9
 8006924:	4937      	ldr	r1, [pc, #220]	; (8006a04 <_dtoa_r+0x644>)
 8006926:	2000      	movs	r0, #0
 8006928:	f7f9 fcce 	bl	80002c8 <__aeabi_dsub>
 800692c:	ec53 2b19 	vmov	r2, r3, d9
 8006930:	f7fa f8f4 	bl	8000b1c <__aeabi_dcmplt>
 8006934:	2800      	cmp	r0, #0
 8006936:	f040 80b6 	bne.w	8006aa6 <_dtoa_r+0x6e6>
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	429d      	cmp	r5, r3
 800693e:	f43f af7c 	beq.w	800683a <_dtoa_r+0x47a>
 8006942:	4b31      	ldr	r3, [pc, #196]	; (8006a08 <_dtoa_r+0x648>)
 8006944:	ec51 0b19 	vmov	r0, r1, d9
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fe75 	bl	8000638 <__aeabi_dmul>
 800694e:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <_dtoa_r+0x648>)
 8006950:	ec41 0b19 	vmov	d9, r0, r1
 8006954:	2200      	movs	r2, #0
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7f9 fe6d 	bl	8000638 <__aeabi_dmul>
 800695e:	4680      	mov	r8, r0
 8006960:	4689      	mov	r9, r1
 8006962:	e7c5      	b.n	80068f0 <_dtoa_r+0x530>
 8006964:	ec51 0b17 	vmov	r0, r1, d7
 8006968:	f7f9 fe66 	bl	8000638 <__aeabi_dmul>
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	9d00      	ldr	r5, [sp, #0]
 8006970:	930f      	str	r3, [sp, #60]	; 0x3c
 8006972:	ec41 0b19 	vmov	d9, r0, r1
 8006976:	4649      	mov	r1, r9
 8006978:	4640      	mov	r0, r8
 800697a:	f7fa f90d 	bl	8000b98 <__aeabi_d2iz>
 800697e:	4606      	mov	r6, r0
 8006980:	f7f9 fdf0 	bl	8000564 <__aeabi_i2d>
 8006984:	3630      	adds	r6, #48	; 0x30
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4640      	mov	r0, r8
 800698c:	4649      	mov	r1, r9
 800698e:	f7f9 fc9b 	bl	80002c8 <__aeabi_dsub>
 8006992:	f805 6b01 	strb.w	r6, [r5], #1
 8006996:	9b02      	ldr	r3, [sp, #8]
 8006998:	429d      	cmp	r5, r3
 800699a:	4680      	mov	r8, r0
 800699c:	4689      	mov	r9, r1
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	d124      	bne.n	80069ee <_dtoa_r+0x62e>
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <_dtoa_r+0x654>)
 80069a6:	ec51 0b19 	vmov	r0, r1, d9
 80069aa:	f7f9 fc8f 	bl	80002cc <__adddf3>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7fa f8cf 	bl	8000b58 <__aeabi_dcmpgt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d173      	bne.n	8006aa6 <_dtoa_r+0x6e6>
 80069be:	ec53 2b19 	vmov	r2, r3, d9
 80069c2:	4914      	ldr	r1, [pc, #80]	; (8006a14 <_dtoa_r+0x654>)
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7f9 fc7f 	bl	80002c8 <__aeabi_dsub>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7fa f8a3 	bl	8000b1c <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f af2f 	beq.w	800683a <_dtoa_r+0x47a>
 80069dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069de:	1e6b      	subs	r3, r5, #1
 80069e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80069e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069e6:	2b30      	cmp	r3, #48	; 0x30
 80069e8:	d0f8      	beq.n	80069dc <_dtoa_r+0x61c>
 80069ea:	46bb      	mov	fp, r7
 80069ec:	e04a      	b.n	8006a84 <_dtoa_r+0x6c4>
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <_dtoa_r+0x648>)
 80069f0:	f7f9 fe22 	bl	8000638 <__aeabi_dmul>
 80069f4:	4680      	mov	r8, r0
 80069f6:	4689      	mov	r9, r1
 80069f8:	e7bd      	b.n	8006976 <_dtoa_r+0x5b6>
 80069fa:	bf00      	nop
 80069fc:	08008950 	.word	0x08008950
 8006a00:	08008928 	.word	0x08008928
 8006a04:	3ff00000 	.word	0x3ff00000
 8006a08:	40240000 	.word	0x40240000
 8006a0c:	401c0000 	.word	0x401c0000
 8006a10:	40140000 	.word	0x40140000
 8006a14:	3fe00000 	.word	0x3fe00000
 8006a18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a1c:	9d00      	ldr	r5, [sp, #0]
 8006a1e:	4642      	mov	r2, r8
 8006a20:	464b      	mov	r3, r9
 8006a22:	4630      	mov	r0, r6
 8006a24:	4639      	mov	r1, r7
 8006a26:	f7f9 ff31 	bl	800088c <__aeabi_ddiv>
 8006a2a:	f7fa f8b5 	bl	8000b98 <__aeabi_d2iz>
 8006a2e:	9001      	str	r0, [sp, #4]
 8006a30:	f7f9 fd98 	bl	8000564 <__aeabi_i2d>
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	f7f9 fdfe 	bl	8000638 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7f9 fc40 	bl	80002c8 <__aeabi_dsub>
 8006a48:	9e01      	ldr	r6, [sp, #4]
 8006a4a:	9f04      	ldr	r7, [sp, #16]
 8006a4c:	3630      	adds	r6, #48	; 0x30
 8006a4e:	f805 6b01 	strb.w	r6, [r5], #1
 8006a52:	9e00      	ldr	r6, [sp, #0]
 8006a54:	1bae      	subs	r6, r5, r6
 8006a56:	42b7      	cmp	r7, r6
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	d134      	bne.n	8006ac8 <_dtoa_r+0x708>
 8006a5e:	f7f9 fc35 	bl	80002cc <__adddf3>
 8006a62:	4642      	mov	r2, r8
 8006a64:	464b      	mov	r3, r9
 8006a66:	4606      	mov	r6, r0
 8006a68:	460f      	mov	r7, r1
 8006a6a:	f7fa f875 	bl	8000b58 <__aeabi_dcmpgt>
 8006a6e:	b9c8      	cbnz	r0, 8006aa4 <_dtoa_r+0x6e4>
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7fa f846 	bl	8000b08 <__aeabi_dcmpeq>
 8006a7c:	b110      	cbz	r0, 8006a84 <_dtoa_r+0x6c4>
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	07db      	lsls	r3, r3, #31
 8006a82:	d40f      	bmi.n	8006aa4 <_dtoa_r+0x6e4>
 8006a84:	4651      	mov	r1, sl
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fbcc 	bl	8007224 <_Bfree>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a90:	702b      	strb	r3, [r5, #0]
 8006a92:	f10b 0301 	add.w	r3, fp, #1
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f43f ace2 	beq.w	8006464 <_dtoa_r+0xa4>
 8006aa0:	601d      	str	r5, [r3, #0]
 8006aa2:	e4df      	b.n	8006464 <_dtoa_r+0xa4>
 8006aa4:	465f      	mov	r7, fp
 8006aa6:	462b      	mov	r3, r5
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aae:	2a39      	cmp	r2, #57	; 0x39
 8006ab0:	d106      	bne.n	8006ac0 <_dtoa_r+0x700>
 8006ab2:	9a00      	ldr	r2, [sp, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d1f7      	bne.n	8006aa8 <_dtoa_r+0x6e8>
 8006ab8:	9900      	ldr	r1, [sp, #0]
 8006aba:	2230      	movs	r2, #48	; 0x30
 8006abc:	3701      	adds	r7, #1
 8006abe:	700a      	strb	r2, [r1, #0]
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	3201      	adds	r2, #1
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e790      	b.n	80069ea <_dtoa_r+0x62a>
 8006ac8:	4ba3      	ldr	r3, [pc, #652]	; (8006d58 <_dtoa_r+0x998>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	f7f9 fdb4 	bl	8000638 <__aeabi_dmul>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	f7fa f816 	bl	8000b08 <__aeabi_dcmpeq>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d09e      	beq.n	8006a1e <_dtoa_r+0x65e>
 8006ae0:	e7d0      	b.n	8006a84 <_dtoa_r+0x6c4>
 8006ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	f000 80ca 	beq.w	8006c7e <_dtoa_r+0x8be>
 8006aea:	9a07      	ldr	r2, [sp, #28]
 8006aec:	2a01      	cmp	r2, #1
 8006aee:	f300 80ad 	bgt.w	8006c4c <_dtoa_r+0x88c>
 8006af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	f000 80a5 	beq.w	8006c44 <_dtoa_r+0x884>
 8006afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006afe:	9e08      	ldr	r6, [sp, #32]
 8006b00:	9d05      	ldr	r5, [sp, #20]
 8006b02:	9a05      	ldr	r2, [sp, #20]
 8006b04:	441a      	add	r2, r3
 8006b06:	9205      	str	r2, [sp, #20]
 8006b08:	9a06      	ldr	r2, [sp, #24]
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	441a      	add	r2, r3
 8006b0e:	4620      	mov	r0, r4
 8006b10:	9206      	str	r2, [sp, #24]
 8006b12:	f000 fc3d 	bl	8007390 <__i2b>
 8006b16:	4607      	mov	r7, r0
 8006b18:	b165      	cbz	r5, 8006b34 <_dtoa_r+0x774>
 8006b1a:	9b06      	ldr	r3, [sp, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dd09      	ble.n	8006b34 <_dtoa_r+0x774>
 8006b20:	42ab      	cmp	r3, r5
 8006b22:	9a05      	ldr	r2, [sp, #20]
 8006b24:	bfa8      	it	ge
 8006b26:	462b      	movge	r3, r5
 8006b28:	1ad2      	subs	r2, r2, r3
 8006b2a:	9205      	str	r2, [sp, #20]
 8006b2c:	9a06      	ldr	r2, [sp, #24]
 8006b2e:	1aed      	subs	r5, r5, r3
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	9306      	str	r3, [sp, #24]
 8006b34:	9b08      	ldr	r3, [sp, #32]
 8006b36:	b1f3      	cbz	r3, 8006b76 <_dtoa_r+0x7b6>
 8006b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80a3 	beq.w	8006c86 <_dtoa_r+0x8c6>
 8006b40:	2e00      	cmp	r6, #0
 8006b42:	dd10      	ble.n	8006b66 <_dtoa_r+0x7a6>
 8006b44:	4639      	mov	r1, r7
 8006b46:	4632      	mov	r2, r6
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fce1 	bl	8007510 <__pow5mult>
 8006b4e:	4652      	mov	r2, sl
 8006b50:	4601      	mov	r1, r0
 8006b52:	4607      	mov	r7, r0
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fc31 	bl	80073bc <__multiply>
 8006b5a:	4651      	mov	r1, sl
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 fb60 	bl	8007224 <_Bfree>
 8006b64:	46c2      	mov	sl, r8
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	1b9a      	subs	r2, r3, r6
 8006b6a:	d004      	beq.n	8006b76 <_dtoa_r+0x7b6>
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fcce 	bl	8007510 <__pow5mult>
 8006b74:	4682      	mov	sl, r0
 8006b76:	2101      	movs	r1, #1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f000 fc09 	bl	8007390 <__i2b>
 8006b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	4606      	mov	r6, r0
 8006b84:	f340 8081 	ble.w	8006c8a <_dtoa_r+0x8ca>
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fcbf 	bl	8007510 <__pow5mult>
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	4606      	mov	r6, r0
 8006b98:	dd7a      	ble.n	8006c90 <_dtoa_r+0x8d0>
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	6933      	ldr	r3, [r6, #16]
 8006ba0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ba4:	6918      	ldr	r0, [r3, #16]
 8006ba6:	f000 fba5 	bl	80072f4 <__hi0bits>
 8006baa:	f1c0 0020 	rsb	r0, r0, #32
 8006bae:	9b06      	ldr	r3, [sp, #24]
 8006bb0:	4418      	add	r0, r3
 8006bb2:	f010 001f 	ands.w	r0, r0, #31
 8006bb6:	f000 8094 	beq.w	8006ce2 <_dtoa_r+0x922>
 8006bba:	f1c0 0320 	rsb	r3, r0, #32
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	f340 8085 	ble.w	8006cce <_dtoa_r+0x90e>
 8006bc4:	9b05      	ldr	r3, [sp, #20]
 8006bc6:	f1c0 001c 	rsb	r0, r0, #28
 8006bca:	4403      	add	r3, r0
 8006bcc:	9305      	str	r3, [sp, #20]
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	4403      	add	r3, r0
 8006bd2:	4405      	add	r5, r0
 8006bd4:	9306      	str	r3, [sp, #24]
 8006bd6:	9b05      	ldr	r3, [sp, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dd05      	ble.n	8006be8 <_dtoa_r+0x828>
 8006bdc:	4651      	mov	r1, sl
 8006bde:	461a      	mov	r2, r3
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 fcef 	bl	80075c4 <__lshift>
 8006be6:	4682      	mov	sl, r0
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dd05      	ble.n	8006bfa <_dtoa_r+0x83a>
 8006bee:	4631      	mov	r1, r6
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fce6 	bl	80075c4 <__lshift>
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d072      	beq.n	8006ce6 <_dtoa_r+0x926>
 8006c00:	4631      	mov	r1, r6
 8006c02:	4650      	mov	r0, sl
 8006c04:	f000 fd4a 	bl	800769c <__mcmp>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	da6c      	bge.n	8006ce6 <_dtoa_r+0x926>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	4651      	mov	r1, sl
 8006c10:	220a      	movs	r2, #10
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fb28 	bl	8007268 <__multadd>
 8006c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006c1e:	4682      	mov	sl, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 81b0 	beq.w	8006f86 <_dtoa_r+0xbc6>
 8006c26:	2300      	movs	r3, #0
 8006c28:	4639      	mov	r1, r7
 8006c2a:	220a      	movs	r2, #10
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 fb1b 	bl	8007268 <__multadd>
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	4607      	mov	r7, r0
 8006c38:	f300 8096 	bgt.w	8006d68 <_dtoa_r+0x9a8>
 8006c3c:	9b07      	ldr	r3, [sp, #28]
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	dc59      	bgt.n	8006cf6 <_dtoa_r+0x936>
 8006c42:	e091      	b.n	8006d68 <_dtoa_r+0x9a8>
 8006c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c4a:	e758      	b.n	8006afe <_dtoa_r+0x73e>
 8006c4c:	9b04      	ldr	r3, [sp, #16]
 8006c4e:	1e5e      	subs	r6, r3, #1
 8006c50:	9b08      	ldr	r3, [sp, #32]
 8006c52:	42b3      	cmp	r3, r6
 8006c54:	bfbf      	itttt	lt
 8006c56:	9b08      	ldrlt	r3, [sp, #32]
 8006c58:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006c5a:	9608      	strlt	r6, [sp, #32]
 8006c5c:	1af3      	sublt	r3, r6, r3
 8006c5e:	bfb4      	ite	lt
 8006c60:	18d2      	addlt	r2, r2, r3
 8006c62:	1b9e      	subge	r6, r3, r6
 8006c64:	9b04      	ldr	r3, [sp, #16]
 8006c66:	bfbc      	itt	lt
 8006c68:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006c6a:	2600      	movlt	r6, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bfb7      	itett	lt
 8006c70:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006c74:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006c78:	1a9d      	sublt	r5, r3, r2
 8006c7a:	2300      	movlt	r3, #0
 8006c7c:	e741      	b.n	8006b02 <_dtoa_r+0x742>
 8006c7e:	9e08      	ldr	r6, [sp, #32]
 8006c80:	9d05      	ldr	r5, [sp, #20]
 8006c82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c84:	e748      	b.n	8006b18 <_dtoa_r+0x758>
 8006c86:	9a08      	ldr	r2, [sp, #32]
 8006c88:	e770      	b.n	8006b6c <_dtoa_r+0x7ac>
 8006c8a:	9b07      	ldr	r3, [sp, #28]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	dc19      	bgt.n	8006cc4 <_dtoa_r+0x904>
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	b9bb      	cbnz	r3, 8006cc4 <_dtoa_r+0x904>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c9a:	b99b      	cbnz	r3, 8006cc4 <_dtoa_r+0x904>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca2:	0d1b      	lsrs	r3, r3, #20
 8006ca4:	051b      	lsls	r3, r3, #20
 8006ca6:	b183      	cbz	r3, 8006cca <_dtoa_r+0x90a>
 8006ca8:	9b05      	ldr	r3, [sp, #20]
 8006caa:	3301      	adds	r3, #1
 8006cac:	9305      	str	r3, [sp, #20]
 8006cae:	9b06      	ldr	r3, [sp, #24]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	9306      	str	r3, [sp, #24]
 8006cb4:	f04f 0801 	mov.w	r8, #1
 8006cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f47f af6f 	bne.w	8006b9e <_dtoa_r+0x7de>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e774      	b.n	8006bae <_dtoa_r+0x7ee>
 8006cc4:	f04f 0800 	mov.w	r8, #0
 8006cc8:	e7f6      	b.n	8006cb8 <_dtoa_r+0x8f8>
 8006cca:	4698      	mov	r8, r3
 8006ccc:	e7f4      	b.n	8006cb8 <_dtoa_r+0x8f8>
 8006cce:	d082      	beq.n	8006bd6 <_dtoa_r+0x816>
 8006cd0:	9a05      	ldr	r2, [sp, #20]
 8006cd2:	331c      	adds	r3, #28
 8006cd4:	441a      	add	r2, r3
 8006cd6:	9205      	str	r2, [sp, #20]
 8006cd8:	9a06      	ldr	r2, [sp, #24]
 8006cda:	441a      	add	r2, r3
 8006cdc:	441d      	add	r5, r3
 8006cde:	9206      	str	r2, [sp, #24]
 8006ce0:	e779      	b.n	8006bd6 <_dtoa_r+0x816>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	e7f4      	b.n	8006cd0 <_dtoa_r+0x910>
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc37      	bgt.n	8006d5c <_dtoa_r+0x99c>
 8006cec:	9b07      	ldr	r3, [sp, #28]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	dd34      	ble.n	8006d5c <_dtoa_r+0x99c>
 8006cf2:	9b04      	ldr	r3, [sp, #16]
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	b963      	cbnz	r3, 8006d14 <_dtoa_r+0x954>
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f000 fab2 	bl	8007268 <__multadd>
 8006d04:	4601      	mov	r1, r0
 8006d06:	4606      	mov	r6, r0
 8006d08:	4650      	mov	r0, sl
 8006d0a:	f000 fcc7 	bl	800769c <__mcmp>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f73f adbb 	bgt.w	800688a <_dtoa_r+0x4ca>
 8006d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d16:	9d00      	ldr	r5, [sp, #0]
 8006d18:	ea6f 0b03 	mvn.w	fp, r3
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	4631      	mov	r1, r6
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fa7e 	bl	8007224 <_Bfree>
 8006d28:	2f00      	cmp	r7, #0
 8006d2a:	f43f aeab 	beq.w	8006a84 <_dtoa_r+0x6c4>
 8006d2e:	f1b8 0f00 	cmp.w	r8, #0
 8006d32:	d005      	beq.n	8006d40 <_dtoa_r+0x980>
 8006d34:	45b8      	cmp	r8, r7
 8006d36:	d003      	beq.n	8006d40 <_dtoa_r+0x980>
 8006d38:	4641      	mov	r1, r8
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fa72 	bl	8007224 <_Bfree>
 8006d40:	4639      	mov	r1, r7
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 fa6e 	bl	8007224 <_Bfree>
 8006d48:	e69c      	b.n	8006a84 <_dtoa_r+0x6c4>
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	4637      	mov	r7, r6
 8006d4e:	e7e1      	b.n	8006d14 <_dtoa_r+0x954>
 8006d50:	46bb      	mov	fp, r7
 8006d52:	4637      	mov	r7, r6
 8006d54:	e599      	b.n	800688a <_dtoa_r+0x4ca>
 8006d56:	bf00      	nop
 8006d58:	40240000 	.word	0x40240000
 8006d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80c8 	beq.w	8006ef4 <_dtoa_r+0xb34>
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	dd05      	ble.n	8006d78 <_dtoa_r+0x9b8>
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	462a      	mov	r2, r5
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fc27 	bl	80075c4 <__lshift>
 8006d76:	4607      	mov	r7, r0
 8006d78:	f1b8 0f00 	cmp.w	r8, #0
 8006d7c:	d05b      	beq.n	8006e36 <_dtoa_r+0xa76>
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fa0f 	bl	80071a4 <_Balloc>
 8006d86:	4605      	mov	r5, r0
 8006d88:	b928      	cbnz	r0, 8006d96 <_dtoa_r+0x9d6>
 8006d8a:	4b83      	ldr	r3, [pc, #524]	; (8006f98 <_dtoa_r+0xbd8>)
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d92:	f7ff bb2e 	b.w	80063f2 <_dtoa_r+0x32>
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	3202      	adds	r2, #2
 8006d9a:	0092      	lsls	r2, r2, #2
 8006d9c:	f107 010c 	add.w	r1, r7, #12
 8006da0:	300c      	adds	r0, #12
 8006da2:	f001 f973 	bl	800808c <memcpy>
 8006da6:	2201      	movs	r2, #1
 8006da8:	4629      	mov	r1, r5
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fc0a 	bl	80075c4 <__lshift>
 8006db0:	9b00      	ldr	r3, [sp, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dba:	4413      	add	r3, r2
 8006dbc:	9308      	str	r3, [sp, #32]
 8006dbe:	9b02      	ldr	r3, [sp, #8]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	46b8      	mov	r8, r7
 8006dc6:	9306      	str	r3, [sp, #24]
 8006dc8:	4607      	mov	r7, r0
 8006dca:	9b04      	ldr	r3, [sp, #16]
 8006dcc:	4631      	mov	r1, r6
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	4650      	mov	r0, sl
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	f7ff fa69 	bl	80062aa <quorem>
 8006dd8:	4641      	mov	r1, r8
 8006dda:	9002      	str	r0, [sp, #8]
 8006ddc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006de0:	4650      	mov	r0, sl
 8006de2:	f000 fc5b 	bl	800769c <__mcmp>
 8006de6:	463a      	mov	r2, r7
 8006de8:	9005      	str	r0, [sp, #20]
 8006dea:	4631      	mov	r1, r6
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fc71 	bl	80076d4 <__mdiff>
 8006df2:	68c2      	ldr	r2, [r0, #12]
 8006df4:	4605      	mov	r5, r0
 8006df6:	bb02      	cbnz	r2, 8006e3a <_dtoa_r+0xa7a>
 8006df8:	4601      	mov	r1, r0
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	f000 fc4e 	bl	800769c <__mcmp>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4629      	mov	r1, r5
 8006e04:	4620      	mov	r0, r4
 8006e06:	9209      	str	r2, [sp, #36]	; 0x24
 8006e08:	f000 fa0c 	bl	8007224 <_Bfree>
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e10:	9d04      	ldr	r5, [sp, #16]
 8006e12:	ea43 0102 	orr.w	r1, r3, r2
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	4319      	orrs	r1, r3
 8006e1a:	d110      	bne.n	8006e3e <_dtoa_r+0xa7e>
 8006e1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e20:	d029      	beq.n	8006e76 <_dtoa_r+0xab6>
 8006e22:	9b05      	ldr	r3, [sp, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	dd02      	ble.n	8006e2e <_dtoa_r+0xa6e>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	f883 9000 	strb.w	r9, [r3]
 8006e34:	e774      	b.n	8006d20 <_dtoa_r+0x960>
 8006e36:	4638      	mov	r0, r7
 8006e38:	e7ba      	b.n	8006db0 <_dtoa_r+0x9f0>
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	e7e1      	b.n	8006e02 <_dtoa_r+0xa42>
 8006e3e:	9b05      	ldr	r3, [sp, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db04      	blt.n	8006e4e <_dtoa_r+0xa8e>
 8006e44:	9907      	ldr	r1, [sp, #28]
 8006e46:	430b      	orrs	r3, r1
 8006e48:	9906      	ldr	r1, [sp, #24]
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	d120      	bne.n	8006e90 <_dtoa_r+0xad0>
 8006e4e:	2a00      	cmp	r2, #0
 8006e50:	dded      	ble.n	8006e2e <_dtoa_r+0xa6e>
 8006e52:	4651      	mov	r1, sl
 8006e54:	2201      	movs	r2, #1
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 fbb4 	bl	80075c4 <__lshift>
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4682      	mov	sl, r0
 8006e60:	f000 fc1c 	bl	800769c <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	dc03      	bgt.n	8006e70 <_dtoa_r+0xab0>
 8006e68:	d1e1      	bne.n	8006e2e <_dtoa_r+0xa6e>
 8006e6a:	f019 0f01 	tst.w	r9, #1
 8006e6e:	d0de      	beq.n	8006e2e <_dtoa_r+0xa6e>
 8006e70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e74:	d1d8      	bne.n	8006e28 <_dtoa_r+0xa68>
 8006e76:	9a01      	ldr	r2, [sp, #4]
 8006e78:	2339      	movs	r3, #57	; 0x39
 8006e7a:	7013      	strb	r3, [r2, #0]
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	461d      	mov	r5, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e86:	2a39      	cmp	r2, #57	; 0x39
 8006e88:	d06c      	beq.n	8006f64 <_dtoa_r+0xba4>
 8006e8a:	3201      	adds	r2, #1
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	e747      	b.n	8006d20 <_dtoa_r+0x960>
 8006e90:	2a00      	cmp	r2, #0
 8006e92:	dd07      	ble.n	8006ea4 <_dtoa_r+0xae4>
 8006e94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e98:	d0ed      	beq.n	8006e76 <_dtoa_r+0xab6>
 8006e9a:	9a01      	ldr	r2, [sp, #4]
 8006e9c:	f109 0301 	add.w	r3, r9, #1
 8006ea0:	7013      	strb	r3, [r2, #0]
 8006ea2:	e73d      	b.n	8006d20 <_dtoa_r+0x960>
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	9a08      	ldr	r2, [sp, #32]
 8006ea8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d043      	beq.n	8006f38 <_dtoa_r+0xb78>
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	220a      	movs	r2, #10
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f000 f9d6 	bl	8007268 <__multadd>
 8006ebc:	45b8      	cmp	r8, r7
 8006ebe:	4682      	mov	sl, r0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	f04f 020a 	mov.w	r2, #10
 8006ec8:	4641      	mov	r1, r8
 8006eca:	4620      	mov	r0, r4
 8006ecc:	d107      	bne.n	8006ede <_dtoa_r+0xb1e>
 8006ece:	f000 f9cb 	bl	8007268 <__multadd>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	9b04      	ldr	r3, [sp, #16]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	e775      	b.n	8006dca <_dtoa_r+0xa0a>
 8006ede:	f000 f9c3 	bl	8007268 <__multadd>
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	220a      	movs	r2, #10
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 f9bc 	bl	8007268 <__multadd>
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	e7f0      	b.n	8006ed6 <_dtoa_r+0xb16>
 8006ef4:	9b04      	ldr	r3, [sp, #16]
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	9d00      	ldr	r5, [sp, #0]
 8006efa:	4631      	mov	r1, r6
 8006efc:	4650      	mov	r0, sl
 8006efe:	f7ff f9d4 	bl	80062aa <quorem>
 8006f02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f06:	9b00      	ldr	r3, [sp, #0]
 8006f08:	f805 9b01 	strb.w	r9, [r5], #1
 8006f0c:	1aea      	subs	r2, r5, r3
 8006f0e:	9b01      	ldr	r3, [sp, #4]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	dd07      	ble.n	8006f24 <_dtoa_r+0xb64>
 8006f14:	4651      	mov	r1, sl
 8006f16:	2300      	movs	r3, #0
 8006f18:	220a      	movs	r2, #10
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f9a4 	bl	8007268 <__multadd>
 8006f20:	4682      	mov	sl, r0
 8006f22:	e7ea      	b.n	8006efa <_dtoa_r+0xb3a>
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfc8      	it	gt
 8006f2a:	461d      	movgt	r5, r3
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	bfd8      	it	le
 8006f30:	2501      	movle	r5, #1
 8006f32:	441d      	add	r5, r3
 8006f34:	f04f 0800 	mov.w	r8, #0
 8006f38:	4651      	mov	r1, sl
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fb41 	bl	80075c4 <__lshift>
 8006f42:	4631      	mov	r1, r6
 8006f44:	4682      	mov	sl, r0
 8006f46:	f000 fba9 	bl	800769c <__mcmp>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	dc96      	bgt.n	8006e7c <_dtoa_r+0xabc>
 8006f4e:	d102      	bne.n	8006f56 <_dtoa_r+0xb96>
 8006f50:	f019 0f01 	tst.w	r9, #1
 8006f54:	d192      	bne.n	8006e7c <_dtoa_r+0xabc>
 8006f56:	462b      	mov	r3, r5
 8006f58:	461d      	mov	r5, r3
 8006f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f5e:	2a30      	cmp	r2, #48	; 0x30
 8006f60:	d0fa      	beq.n	8006f58 <_dtoa_r+0xb98>
 8006f62:	e6dd      	b.n	8006d20 <_dtoa_r+0x960>
 8006f64:	9a00      	ldr	r2, [sp, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d189      	bne.n	8006e7e <_dtoa_r+0xabe>
 8006f6a:	f10b 0b01 	add.w	fp, fp, #1
 8006f6e:	2331      	movs	r3, #49	; 0x31
 8006f70:	e796      	b.n	8006ea0 <_dtoa_r+0xae0>
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <_dtoa_r+0xbdc>)
 8006f74:	f7ff ba99 	b.w	80064aa <_dtoa_r+0xea>
 8006f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f47f aa6d 	bne.w	800645a <_dtoa_r+0x9a>
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <_dtoa_r+0xbe0>)
 8006f82:	f7ff ba92 	b.w	80064aa <_dtoa_r+0xea>
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dcb5      	bgt.n	8006ef8 <_dtoa_r+0xb38>
 8006f8c:	9b07      	ldr	r3, [sp, #28]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	f73f aeb1 	bgt.w	8006cf6 <_dtoa_r+0x936>
 8006f94:	e7b0      	b.n	8006ef8 <_dtoa_r+0xb38>
 8006f96:	bf00      	nop
 8006f98:	080088be 	.word	0x080088be
 8006f9c:	0800881e 	.word	0x0800881e
 8006fa0:	08008842 	.word	0x08008842

08006fa4 <_free_r>:
 8006fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d044      	beq.n	8007034 <_free_r+0x90>
 8006faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fae:	9001      	str	r0, [sp, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fb6:	bfb8      	it	lt
 8006fb8:	18e4      	addlt	r4, r4, r3
 8006fba:	f000 f8e7 	bl	800718c <__malloc_lock>
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <_free_r+0x94>)
 8006fc0:	9801      	ldr	r0, [sp, #4]
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	b933      	cbnz	r3, 8006fd4 <_free_r+0x30>
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	6014      	str	r4, [r2, #0]
 8006fca:	b003      	add	sp, #12
 8006fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fd0:	f000 b8e2 	b.w	8007198 <__malloc_unlock>
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	d908      	bls.n	8006fea <_free_r+0x46>
 8006fd8:	6825      	ldr	r5, [r4, #0]
 8006fda:	1961      	adds	r1, r4, r5
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	bf01      	itttt	eq
 8006fe0:	6819      	ldreq	r1, [r3, #0]
 8006fe2:	685b      	ldreq	r3, [r3, #4]
 8006fe4:	1949      	addeq	r1, r1, r5
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	e7ed      	b.n	8006fc6 <_free_r+0x22>
 8006fea:	461a      	mov	r2, r3
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b10b      	cbz	r3, 8006ff4 <_free_r+0x50>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d9fa      	bls.n	8006fea <_free_r+0x46>
 8006ff4:	6811      	ldr	r1, [r2, #0]
 8006ff6:	1855      	adds	r5, r2, r1
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d10b      	bne.n	8007014 <_free_r+0x70>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	4421      	add	r1, r4
 8007000:	1854      	adds	r4, r2, r1
 8007002:	42a3      	cmp	r3, r4
 8007004:	6011      	str	r1, [r2, #0]
 8007006:	d1e0      	bne.n	8006fca <_free_r+0x26>
 8007008:	681c      	ldr	r4, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	6053      	str	r3, [r2, #4]
 800700e:	440c      	add	r4, r1
 8007010:	6014      	str	r4, [r2, #0]
 8007012:	e7da      	b.n	8006fca <_free_r+0x26>
 8007014:	d902      	bls.n	800701c <_free_r+0x78>
 8007016:	230c      	movs	r3, #12
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	e7d6      	b.n	8006fca <_free_r+0x26>
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	1961      	adds	r1, r4, r5
 8007020:	428b      	cmp	r3, r1
 8007022:	bf04      	itt	eq
 8007024:	6819      	ldreq	r1, [r3, #0]
 8007026:	685b      	ldreq	r3, [r3, #4]
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	bf04      	itt	eq
 800702c:	1949      	addeq	r1, r1, r5
 800702e:	6021      	streq	r1, [r4, #0]
 8007030:	6054      	str	r4, [r2, #4]
 8007032:	e7ca      	b.n	8006fca <_free_r+0x26>
 8007034:	b003      	add	sp, #12
 8007036:	bd30      	pop	{r4, r5, pc}
 8007038:	200004dc 	.word	0x200004dc

0800703c <malloc>:
 800703c:	4b02      	ldr	r3, [pc, #8]	; (8007048 <malloc+0xc>)
 800703e:	4601      	mov	r1, r0
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f000 b823 	b.w	800708c <_malloc_r>
 8007046:	bf00      	nop
 8007048:	200000b4 	.word	0x200000b4

0800704c <sbrk_aligned>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4e0e      	ldr	r6, [pc, #56]	; (8007088 <sbrk_aligned+0x3c>)
 8007050:	460c      	mov	r4, r1
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	4605      	mov	r5, r0
 8007056:	b911      	cbnz	r1, 800705e <sbrk_aligned+0x12>
 8007058:	f001 f808 	bl	800806c <_sbrk_r>
 800705c:	6030      	str	r0, [r6, #0]
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f001 f803 	bl	800806c <_sbrk_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d00a      	beq.n	8007080 <sbrk_aligned+0x34>
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d007      	beq.n	8007084 <sbrk_aligned+0x38>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4628      	mov	r0, r5
 8007078:	f000 fff8 	bl	800806c <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d101      	bne.n	8007084 <sbrk_aligned+0x38>
 8007080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007084:	4620      	mov	r0, r4
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	200004e0 	.word	0x200004e0

0800708c <_malloc_r>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	1ccd      	adds	r5, r1, #3
 8007092:	f025 0503 	bic.w	r5, r5, #3
 8007096:	3508      	adds	r5, #8
 8007098:	2d0c      	cmp	r5, #12
 800709a:	bf38      	it	cc
 800709c:	250c      	movcc	r5, #12
 800709e:	2d00      	cmp	r5, #0
 80070a0:	4607      	mov	r7, r0
 80070a2:	db01      	blt.n	80070a8 <_malloc_r+0x1c>
 80070a4:	42a9      	cmp	r1, r5
 80070a6:	d905      	bls.n	80070b4 <_malloc_r+0x28>
 80070a8:	230c      	movs	r3, #12
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	2600      	movs	r6, #0
 80070ae:	4630      	mov	r0, r6
 80070b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007188 <_malloc_r+0xfc>
 80070b8:	f000 f868 	bl	800718c <__malloc_lock>
 80070bc:	f8d8 3000 	ldr.w	r3, [r8]
 80070c0:	461c      	mov	r4, r3
 80070c2:	bb5c      	cbnz	r4, 800711c <_malloc_r+0x90>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7ff ffc0 	bl	800704c <sbrk_aligned>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	4604      	mov	r4, r0
 80070d0:	d155      	bne.n	800717e <_malloc_r+0xf2>
 80070d2:	f8d8 4000 	ldr.w	r4, [r8]
 80070d6:	4626      	mov	r6, r4
 80070d8:	2e00      	cmp	r6, #0
 80070da:	d145      	bne.n	8007168 <_malloc_r+0xdc>
 80070dc:	2c00      	cmp	r4, #0
 80070de:	d048      	beq.n	8007172 <_malloc_r+0xe6>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	4631      	mov	r1, r6
 80070e4:	4638      	mov	r0, r7
 80070e6:	eb04 0903 	add.w	r9, r4, r3
 80070ea:	f000 ffbf 	bl	800806c <_sbrk_r>
 80070ee:	4581      	cmp	r9, r0
 80070f0:	d13f      	bne.n	8007172 <_malloc_r+0xe6>
 80070f2:	6821      	ldr	r1, [r4, #0]
 80070f4:	1a6d      	subs	r5, r5, r1
 80070f6:	4629      	mov	r1, r5
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7ff ffa7 	bl	800704c <sbrk_aligned>
 80070fe:	3001      	adds	r0, #1
 8007100:	d037      	beq.n	8007172 <_malloc_r+0xe6>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	442b      	add	r3, r5
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	f8d8 3000 	ldr.w	r3, [r8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d038      	beq.n	8007182 <_malloc_r+0xf6>
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	42a2      	cmp	r2, r4
 8007114:	d12b      	bne.n	800716e <_malloc_r+0xe2>
 8007116:	2200      	movs	r2, #0
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	e00f      	b.n	800713c <_malloc_r+0xb0>
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	1b52      	subs	r2, r2, r5
 8007120:	d41f      	bmi.n	8007162 <_malloc_r+0xd6>
 8007122:	2a0b      	cmp	r2, #11
 8007124:	d917      	bls.n	8007156 <_malloc_r+0xca>
 8007126:	1961      	adds	r1, r4, r5
 8007128:	42a3      	cmp	r3, r4
 800712a:	6025      	str	r5, [r4, #0]
 800712c:	bf18      	it	ne
 800712e:	6059      	strne	r1, [r3, #4]
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	bf08      	it	eq
 8007134:	f8c8 1000 	streq.w	r1, [r8]
 8007138:	5162      	str	r2, [r4, r5]
 800713a:	604b      	str	r3, [r1, #4]
 800713c:	4638      	mov	r0, r7
 800713e:	f104 060b 	add.w	r6, r4, #11
 8007142:	f000 f829 	bl	8007198 <__malloc_unlock>
 8007146:	f026 0607 	bic.w	r6, r6, #7
 800714a:	1d23      	adds	r3, r4, #4
 800714c:	1af2      	subs	r2, r6, r3
 800714e:	d0ae      	beq.n	80070ae <_malloc_r+0x22>
 8007150:	1b9b      	subs	r3, r3, r6
 8007152:	50a3      	str	r3, [r4, r2]
 8007154:	e7ab      	b.n	80070ae <_malloc_r+0x22>
 8007156:	42a3      	cmp	r3, r4
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	d1dd      	bne.n	8007118 <_malloc_r+0x8c>
 800715c:	f8c8 2000 	str.w	r2, [r8]
 8007160:	e7ec      	b.n	800713c <_malloc_r+0xb0>
 8007162:	4623      	mov	r3, r4
 8007164:	6864      	ldr	r4, [r4, #4]
 8007166:	e7ac      	b.n	80070c2 <_malloc_r+0x36>
 8007168:	4634      	mov	r4, r6
 800716a:	6876      	ldr	r6, [r6, #4]
 800716c:	e7b4      	b.n	80070d8 <_malloc_r+0x4c>
 800716e:	4613      	mov	r3, r2
 8007170:	e7cc      	b.n	800710c <_malloc_r+0x80>
 8007172:	230c      	movs	r3, #12
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4638      	mov	r0, r7
 8007178:	f000 f80e 	bl	8007198 <__malloc_unlock>
 800717c:	e797      	b.n	80070ae <_malloc_r+0x22>
 800717e:	6025      	str	r5, [r4, #0]
 8007180:	e7dc      	b.n	800713c <_malloc_r+0xb0>
 8007182:	605b      	str	r3, [r3, #4]
 8007184:	deff      	udf	#255	; 0xff
 8007186:	bf00      	nop
 8007188:	200004dc 	.word	0x200004dc

0800718c <__malloc_lock>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__malloc_lock+0x8>)
 800718e:	f7ff b88a 	b.w	80062a6 <__retarget_lock_acquire_recursive>
 8007192:	bf00      	nop
 8007194:	200004d8 	.word	0x200004d8

08007198 <__malloc_unlock>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__malloc_unlock+0x8>)
 800719a:	f7ff b885 	b.w	80062a8 <__retarget_lock_release_recursive>
 800719e:	bf00      	nop
 80071a0:	200004d8 	.word	0x200004d8

080071a4 <_Balloc>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	69c6      	ldr	r6, [r0, #28]
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	b976      	cbnz	r6, 80071cc <_Balloc+0x28>
 80071ae:	2010      	movs	r0, #16
 80071b0:	f7ff ff44 	bl	800703c <malloc>
 80071b4:	4602      	mov	r2, r0
 80071b6:	61e0      	str	r0, [r4, #28]
 80071b8:	b920      	cbnz	r0, 80071c4 <_Balloc+0x20>
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <_Balloc+0x78>)
 80071bc:	4818      	ldr	r0, [pc, #96]	; (8007220 <_Balloc+0x7c>)
 80071be:	216b      	movs	r1, #107	; 0x6b
 80071c0:	f000 ff72 	bl	80080a8 <__assert_func>
 80071c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c8:	6006      	str	r6, [r0, #0]
 80071ca:	60c6      	str	r6, [r0, #12]
 80071cc:	69e6      	ldr	r6, [r4, #28]
 80071ce:	68f3      	ldr	r3, [r6, #12]
 80071d0:	b183      	cbz	r3, 80071f4 <_Balloc+0x50>
 80071d2:	69e3      	ldr	r3, [r4, #28]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071da:	b9b8      	cbnz	r0, 800720c <_Balloc+0x68>
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f605 	lsl.w	r6, r1, r5
 80071e2:	1d72      	adds	r2, r6, #5
 80071e4:	0092      	lsls	r2, r2, #2
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 ff7c 	bl	80080e4 <_calloc_r>
 80071ec:	b160      	cbz	r0, 8007208 <_Balloc+0x64>
 80071ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071f2:	e00e      	b.n	8007212 <_Balloc+0x6e>
 80071f4:	2221      	movs	r2, #33	; 0x21
 80071f6:	2104      	movs	r1, #4
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 ff73 	bl	80080e4 <_calloc_r>
 80071fe:	69e3      	ldr	r3, [r4, #28]
 8007200:	60f0      	str	r0, [r6, #12]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e4      	bne.n	80071d2 <_Balloc+0x2e>
 8007208:	2000      	movs	r0, #0
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	6802      	ldr	r2, [r0, #0]
 800720e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007212:	2300      	movs	r3, #0
 8007214:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007218:	e7f7      	b.n	800720a <_Balloc+0x66>
 800721a:	bf00      	nop
 800721c:	0800884f 	.word	0x0800884f
 8007220:	080088cf 	.word	0x080088cf

08007224 <_Bfree>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	69c6      	ldr	r6, [r0, #28]
 8007228:	4605      	mov	r5, r0
 800722a:	460c      	mov	r4, r1
 800722c:	b976      	cbnz	r6, 800724c <_Bfree+0x28>
 800722e:	2010      	movs	r0, #16
 8007230:	f7ff ff04 	bl	800703c <malloc>
 8007234:	4602      	mov	r2, r0
 8007236:	61e8      	str	r0, [r5, #28]
 8007238:	b920      	cbnz	r0, 8007244 <_Bfree+0x20>
 800723a:	4b09      	ldr	r3, [pc, #36]	; (8007260 <_Bfree+0x3c>)
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <_Bfree+0x40>)
 800723e:	218f      	movs	r1, #143	; 0x8f
 8007240:	f000 ff32 	bl	80080a8 <__assert_func>
 8007244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007248:	6006      	str	r6, [r0, #0]
 800724a:	60c6      	str	r6, [r0, #12]
 800724c:	b13c      	cbz	r4, 800725e <_Bfree+0x3a>
 800724e:	69eb      	ldr	r3, [r5, #28]
 8007250:	6862      	ldr	r2, [r4, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007258:	6021      	str	r1, [r4, #0]
 800725a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	0800884f 	.word	0x0800884f
 8007264:	080088cf 	.word	0x080088cf

08007268 <__multadd>:
 8007268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	690d      	ldr	r5, [r1, #16]
 800726e:	4607      	mov	r7, r0
 8007270:	460c      	mov	r4, r1
 8007272:	461e      	mov	r6, r3
 8007274:	f101 0c14 	add.w	ip, r1, #20
 8007278:	2000      	movs	r0, #0
 800727a:	f8dc 3000 	ldr.w	r3, [ip]
 800727e:	b299      	uxth	r1, r3
 8007280:	fb02 6101 	mla	r1, r2, r1, r6
 8007284:	0c1e      	lsrs	r6, r3, #16
 8007286:	0c0b      	lsrs	r3, r1, #16
 8007288:	fb02 3306 	mla	r3, r2, r6, r3
 800728c:	b289      	uxth	r1, r1
 800728e:	3001      	adds	r0, #1
 8007290:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007294:	4285      	cmp	r5, r0
 8007296:	f84c 1b04 	str.w	r1, [ip], #4
 800729a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800729e:	dcec      	bgt.n	800727a <__multadd+0x12>
 80072a0:	b30e      	cbz	r6, 80072e6 <__multadd+0x7e>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	42ab      	cmp	r3, r5
 80072a6:	dc19      	bgt.n	80072dc <__multadd+0x74>
 80072a8:	6861      	ldr	r1, [r4, #4]
 80072aa:	4638      	mov	r0, r7
 80072ac:	3101      	adds	r1, #1
 80072ae:	f7ff ff79 	bl	80071a4 <_Balloc>
 80072b2:	4680      	mov	r8, r0
 80072b4:	b928      	cbnz	r0, 80072c2 <__multadd+0x5a>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <__multadd+0x84>)
 80072ba:	480d      	ldr	r0, [pc, #52]	; (80072f0 <__multadd+0x88>)
 80072bc:	21ba      	movs	r1, #186	; 0xba
 80072be:	f000 fef3 	bl	80080a8 <__assert_func>
 80072c2:	6922      	ldr	r2, [r4, #16]
 80072c4:	3202      	adds	r2, #2
 80072c6:	f104 010c 	add.w	r1, r4, #12
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	300c      	adds	r0, #12
 80072ce:	f000 fedd 	bl	800808c <memcpy>
 80072d2:	4621      	mov	r1, r4
 80072d4:	4638      	mov	r0, r7
 80072d6:	f7ff ffa5 	bl	8007224 <_Bfree>
 80072da:	4644      	mov	r4, r8
 80072dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072e0:	3501      	adds	r5, #1
 80072e2:	615e      	str	r6, [r3, #20]
 80072e4:	6125      	str	r5, [r4, #16]
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	080088be 	.word	0x080088be
 80072f0:	080088cf 	.word	0x080088cf

080072f4 <__hi0bits>:
 80072f4:	0c03      	lsrs	r3, r0, #16
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	b9d3      	cbnz	r3, 8007330 <__hi0bits+0x3c>
 80072fa:	0400      	lsls	r0, r0, #16
 80072fc:	2310      	movs	r3, #16
 80072fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007302:	bf04      	itt	eq
 8007304:	0200      	lsleq	r0, r0, #8
 8007306:	3308      	addeq	r3, #8
 8007308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800730c:	bf04      	itt	eq
 800730e:	0100      	lsleq	r0, r0, #4
 8007310:	3304      	addeq	r3, #4
 8007312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007316:	bf04      	itt	eq
 8007318:	0080      	lsleq	r0, r0, #2
 800731a:	3302      	addeq	r3, #2
 800731c:	2800      	cmp	r0, #0
 800731e:	db05      	blt.n	800732c <__hi0bits+0x38>
 8007320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007324:	f103 0301 	add.w	r3, r3, #1
 8007328:	bf08      	it	eq
 800732a:	2320      	moveq	r3, #32
 800732c:	4618      	mov	r0, r3
 800732e:	4770      	bx	lr
 8007330:	2300      	movs	r3, #0
 8007332:	e7e4      	b.n	80072fe <__hi0bits+0xa>

08007334 <__lo0bits>:
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	f013 0207 	ands.w	r2, r3, #7
 800733a:	d00c      	beq.n	8007356 <__lo0bits+0x22>
 800733c:	07d9      	lsls	r1, r3, #31
 800733e:	d422      	bmi.n	8007386 <__lo0bits+0x52>
 8007340:	079a      	lsls	r2, r3, #30
 8007342:	bf49      	itett	mi
 8007344:	085b      	lsrmi	r3, r3, #1
 8007346:	089b      	lsrpl	r3, r3, #2
 8007348:	6003      	strmi	r3, [r0, #0]
 800734a:	2201      	movmi	r2, #1
 800734c:	bf5c      	itt	pl
 800734e:	6003      	strpl	r3, [r0, #0]
 8007350:	2202      	movpl	r2, #2
 8007352:	4610      	mov	r0, r2
 8007354:	4770      	bx	lr
 8007356:	b299      	uxth	r1, r3
 8007358:	b909      	cbnz	r1, 800735e <__lo0bits+0x2a>
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	2210      	movs	r2, #16
 800735e:	b2d9      	uxtb	r1, r3
 8007360:	b909      	cbnz	r1, 8007366 <__lo0bits+0x32>
 8007362:	3208      	adds	r2, #8
 8007364:	0a1b      	lsrs	r3, r3, #8
 8007366:	0719      	lsls	r1, r3, #28
 8007368:	bf04      	itt	eq
 800736a:	091b      	lsreq	r3, r3, #4
 800736c:	3204      	addeq	r2, #4
 800736e:	0799      	lsls	r1, r3, #30
 8007370:	bf04      	itt	eq
 8007372:	089b      	lsreq	r3, r3, #2
 8007374:	3202      	addeq	r2, #2
 8007376:	07d9      	lsls	r1, r3, #31
 8007378:	d403      	bmi.n	8007382 <__lo0bits+0x4e>
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	f102 0201 	add.w	r2, r2, #1
 8007380:	d003      	beq.n	800738a <__lo0bits+0x56>
 8007382:	6003      	str	r3, [r0, #0]
 8007384:	e7e5      	b.n	8007352 <__lo0bits+0x1e>
 8007386:	2200      	movs	r2, #0
 8007388:	e7e3      	b.n	8007352 <__lo0bits+0x1e>
 800738a:	2220      	movs	r2, #32
 800738c:	e7e1      	b.n	8007352 <__lo0bits+0x1e>
	...

08007390 <__i2b>:
 8007390:	b510      	push	{r4, lr}
 8007392:	460c      	mov	r4, r1
 8007394:	2101      	movs	r1, #1
 8007396:	f7ff ff05 	bl	80071a4 <_Balloc>
 800739a:	4602      	mov	r2, r0
 800739c:	b928      	cbnz	r0, 80073aa <__i2b+0x1a>
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <__i2b+0x24>)
 80073a0:	4805      	ldr	r0, [pc, #20]	; (80073b8 <__i2b+0x28>)
 80073a2:	f240 1145 	movw	r1, #325	; 0x145
 80073a6:	f000 fe7f 	bl	80080a8 <__assert_func>
 80073aa:	2301      	movs	r3, #1
 80073ac:	6144      	str	r4, [r0, #20]
 80073ae:	6103      	str	r3, [r0, #16]
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	080088be 	.word	0x080088be
 80073b8:	080088cf 	.word	0x080088cf

080073bc <__multiply>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	4691      	mov	r9, r2
 80073c2:	690a      	ldr	r2, [r1, #16]
 80073c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	bfb8      	it	lt
 80073cc:	460b      	movlt	r3, r1
 80073ce:	460c      	mov	r4, r1
 80073d0:	bfbc      	itt	lt
 80073d2:	464c      	movlt	r4, r9
 80073d4:	4699      	movlt	r9, r3
 80073d6:	6927      	ldr	r7, [r4, #16]
 80073d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	6861      	ldr	r1, [r4, #4]
 80073e0:	eb07 060a 	add.w	r6, r7, sl
 80073e4:	42b3      	cmp	r3, r6
 80073e6:	b085      	sub	sp, #20
 80073e8:	bfb8      	it	lt
 80073ea:	3101      	addlt	r1, #1
 80073ec:	f7ff feda 	bl	80071a4 <_Balloc>
 80073f0:	b930      	cbnz	r0, 8007400 <__multiply+0x44>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b44      	ldr	r3, [pc, #272]	; (8007508 <__multiply+0x14c>)
 80073f6:	4845      	ldr	r0, [pc, #276]	; (800750c <__multiply+0x150>)
 80073f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80073fc:	f000 fe54 	bl	80080a8 <__assert_func>
 8007400:	f100 0514 	add.w	r5, r0, #20
 8007404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007408:	462b      	mov	r3, r5
 800740a:	2200      	movs	r2, #0
 800740c:	4543      	cmp	r3, r8
 800740e:	d321      	bcc.n	8007454 <__multiply+0x98>
 8007410:	f104 0314 	add.w	r3, r4, #20
 8007414:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007418:	f109 0314 	add.w	r3, r9, #20
 800741c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	1b3a      	subs	r2, r7, r4
 8007424:	3a15      	subs	r2, #21
 8007426:	f022 0203 	bic.w	r2, r2, #3
 800742a:	3204      	adds	r2, #4
 800742c:	f104 0115 	add.w	r1, r4, #21
 8007430:	428f      	cmp	r7, r1
 8007432:	bf38      	it	cc
 8007434:	2204      	movcc	r2, #4
 8007436:	9201      	str	r2, [sp, #4]
 8007438:	9a02      	ldr	r2, [sp, #8]
 800743a:	9303      	str	r3, [sp, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d80c      	bhi.n	800745a <__multiply+0x9e>
 8007440:	2e00      	cmp	r6, #0
 8007442:	dd03      	ble.n	800744c <__multiply+0x90>
 8007444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007448:	2b00      	cmp	r3, #0
 800744a:	d05b      	beq.n	8007504 <__multiply+0x148>
 800744c:	6106      	str	r6, [r0, #16]
 800744e:	b005      	add	sp, #20
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	f843 2b04 	str.w	r2, [r3], #4
 8007458:	e7d8      	b.n	800740c <__multiply+0x50>
 800745a:	f8b3 a000 	ldrh.w	sl, [r3]
 800745e:	f1ba 0f00 	cmp.w	sl, #0
 8007462:	d024      	beq.n	80074ae <__multiply+0xf2>
 8007464:	f104 0e14 	add.w	lr, r4, #20
 8007468:	46a9      	mov	r9, r5
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007472:	f8d9 1000 	ldr.w	r1, [r9]
 8007476:	fa1f fb82 	uxth.w	fp, r2
 800747a:	b289      	uxth	r1, r1
 800747c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007480:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007484:	f8d9 2000 	ldr.w	r2, [r9]
 8007488:	4461      	add	r1, ip
 800748a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800748e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007496:	b289      	uxth	r1, r1
 8007498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800749c:	4577      	cmp	r7, lr
 800749e:	f849 1b04 	str.w	r1, [r9], #4
 80074a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074a6:	d8e2      	bhi.n	800746e <__multiply+0xb2>
 80074a8:	9a01      	ldr	r2, [sp, #4]
 80074aa:	f845 c002 	str.w	ip, [r5, r2]
 80074ae:	9a03      	ldr	r2, [sp, #12]
 80074b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074b4:	3304      	adds	r3, #4
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	d021      	beq.n	8007500 <__multiply+0x144>
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	f104 0c14 	add.w	ip, r4, #20
 80074c2:	46ae      	mov	lr, r5
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	f8bc b000 	ldrh.w	fp, [ip]
 80074cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074d0:	fb09 220b 	mla	r2, r9, fp, r2
 80074d4:	4452      	add	r2, sl
 80074d6:	b289      	uxth	r1, r1
 80074d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074dc:	f84e 1b04 	str.w	r1, [lr], #4
 80074e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80074e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074e8:	f8be 1000 	ldrh.w	r1, [lr]
 80074ec:	fb09 110a 	mla	r1, r9, sl, r1
 80074f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80074f4:	4567      	cmp	r7, ip
 80074f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074fa:	d8e5      	bhi.n	80074c8 <__multiply+0x10c>
 80074fc:	9a01      	ldr	r2, [sp, #4]
 80074fe:	50a9      	str	r1, [r5, r2]
 8007500:	3504      	adds	r5, #4
 8007502:	e799      	b.n	8007438 <__multiply+0x7c>
 8007504:	3e01      	subs	r6, #1
 8007506:	e79b      	b.n	8007440 <__multiply+0x84>
 8007508:	080088be 	.word	0x080088be
 800750c:	080088cf 	.word	0x080088cf

08007510 <__pow5mult>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4615      	mov	r5, r2
 8007516:	f012 0203 	ands.w	r2, r2, #3
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	d007      	beq.n	8007530 <__pow5mult+0x20>
 8007520:	4c25      	ldr	r4, [pc, #148]	; (80075b8 <__pow5mult+0xa8>)
 8007522:	3a01      	subs	r2, #1
 8007524:	2300      	movs	r3, #0
 8007526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800752a:	f7ff fe9d 	bl	8007268 <__multadd>
 800752e:	4607      	mov	r7, r0
 8007530:	10ad      	asrs	r5, r5, #2
 8007532:	d03d      	beq.n	80075b0 <__pow5mult+0xa0>
 8007534:	69f4      	ldr	r4, [r6, #28]
 8007536:	b97c      	cbnz	r4, 8007558 <__pow5mult+0x48>
 8007538:	2010      	movs	r0, #16
 800753a:	f7ff fd7f 	bl	800703c <malloc>
 800753e:	4602      	mov	r2, r0
 8007540:	61f0      	str	r0, [r6, #28]
 8007542:	b928      	cbnz	r0, 8007550 <__pow5mult+0x40>
 8007544:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <__pow5mult+0xac>)
 8007546:	481e      	ldr	r0, [pc, #120]	; (80075c0 <__pow5mult+0xb0>)
 8007548:	f240 11b3 	movw	r1, #435	; 0x1b3
 800754c:	f000 fdac 	bl	80080a8 <__assert_func>
 8007550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007554:	6004      	str	r4, [r0, #0]
 8007556:	60c4      	str	r4, [r0, #12]
 8007558:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800755c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007560:	b94c      	cbnz	r4, 8007576 <__pow5mult+0x66>
 8007562:	f240 2171 	movw	r1, #625	; 0x271
 8007566:	4630      	mov	r0, r6
 8007568:	f7ff ff12 	bl	8007390 <__i2b>
 800756c:	2300      	movs	r3, #0
 800756e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007572:	4604      	mov	r4, r0
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	07eb      	lsls	r3, r5, #31
 800757c:	d50a      	bpl.n	8007594 <__pow5mult+0x84>
 800757e:	4639      	mov	r1, r7
 8007580:	4622      	mov	r2, r4
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff ff1a 	bl	80073bc <__multiply>
 8007588:	4639      	mov	r1, r7
 800758a:	4680      	mov	r8, r0
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff fe49 	bl	8007224 <_Bfree>
 8007592:	4647      	mov	r7, r8
 8007594:	106d      	asrs	r5, r5, #1
 8007596:	d00b      	beq.n	80075b0 <__pow5mult+0xa0>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	b938      	cbnz	r0, 80075ac <__pow5mult+0x9c>
 800759c:	4622      	mov	r2, r4
 800759e:	4621      	mov	r1, r4
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff ff0b 	bl	80073bc <__multiply>
 80075a6:	6020      	str	r0, [r4, #0]
 80075a8:	f8c0 9000 	str.w	r9, [r0]
 80075ac:	4604      	mov	r4, r0
 80075ae:	e7e4      	b.n	800757a <__pow5mult+0x6a>
 80075b0:	4638      	mov	r0, r7
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b6:	bf00      	nop
 80075b8:	08008a18 	.word	0x08008a18
 80075bc:	0800884f 	.word	0x0800884f
 80075c0:	080088cf 	.word	0x080088cf

080075c4 <__lshift>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	6849      	ldr	r1, [r1, #4]
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075d2:	68a3      	ldr	r3, [r4, #8]
 80075d4:	4607      	mov	r7, r0
 80075d6:	4691      	mov	r9, r2
 80075d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075dc:	f108 0601 	add.w	r6, r8, #1
 80075e0:	42b3      	cmp	r3, r6
 80075e2:	db0b      	blt.n	80075fc <__lshift+0x38>
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff fddd 	bl	80071a4 <_Balloc>
 80075ea:	4605      	mov	r5, r0
 80075ec:	b948      	cbnz	r0, 8007602 <__lshift+0x3e>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4b28      	ldr	r3, [pc, #160]	; (8007694 <__lshift+0xd0>)
 80075f2:	4829      	ldr	r0, [pc, #164]	; (8007698 <__lshift+0xd4>)
 80075f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80075f8:	f000 fd56 	bl	80080a8 <__assert_func>
 80075fc:	3101      	adds	r1, #1
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	e7ee      	b.n	80075e0 <__lshift+0x1c>
 8007602:	2300      	movs	r3, #0
 8007604:	f100 0114 	add.w	r1, r0, #20
 8007608:	f100 0210 	add.w	r2, r0, #16
 800760c:	4618      	mov	r0, r3
 800760e:	4553      	cmp	r3, sl
 8007610:	db33      	blt.n	800767a <__lshift+0xb6>
 8007612:	6920      	ldr	r0, [r4, #16]
 8007614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007618:	f104 0314 	add.w	r3, r4, #20
 800761c:	f019 091f 	ands.w	r9, r9, #31
 8007620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007628:	d02b      	beq.n	8007682 <__lshift+0xbe>
 800762a:	f1c9 0e20 	rsb	lr, r9, #32
 800762e:	468a      	mov	sl, r1
 8007630:	2200      	movs	r2, #0
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	fa00 f009 	lsl.w	r0, r0, r9
 8007638:	4310      	orrs	r0, r2
 800763a:	f84a 0b04 	str.w	r0, [sl], #4
 800763e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007642:	459c      	cmp	ip, r3
 8007644:	fa22 f20e 	lsr.w	r2, r2, lr
 8007648:	d8f3      	bhi.n	8007632 <__lshift+0x6e>
 800764a:	ebac 0304 	sub.w	r3, ip, r4
 800764e:	3b15      	subs	r3, #21
 8007650:	f023 0303 	bic.w	r3, r3, #3
 8007654:	3304      	adds	r3, #4
 8007656:	f104 0015 	add.w	r0, r4, #21
 800765a:	4584      	cmp	ip, r0
 800765c:	bf38      	it	cc
 800765e:	2304      	movcc	r3, #4
 8007660:	50ca      	str	r2, [r1, r3]
 8007662:	b10a      	cbz	r2, 8007668 <__lshift+0xa4>
 8007664:	f108 0602 	add.w	r6, r8, #2
 8007668:	3e01      	subs	r6, #1
 800766a:	4638      	mov	r0, r7
 800766c:	612e      	str	r6, [r5, #16]
 800766e:	4621      	mov	r1, r4
 8007670:	f7ff fdd8 	bl	8007224 <_Bfree>
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767a:	f842 0f04 	str.w	r0, [r2, #4]!
 800767e:	3301      	adds	r3, #1
 8007680:	e7c5      	b.n	800760e <__lshift+0x4a>
 8007682:	3904      	subs	r1, #4
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	f841 2f04 	str.w	r2, [r1, #4]!
 800768c:	459c      	cmp	ip, r3
 800768e:	d8f9      	bhi.n	8007684 <__lshift+0xc0>
 8007690:	e7ea      	b.n	8007668 <__lshift+0xa4>
 8007692:	bf00      	nop
 8007694:	080088be 	.word	0x080088be
 8007698:	080088cf 	.word	0x080088cf

0800769c <__mcmp>:
 800769c:	b530      	push	{r4, r5, lr}
 800769e:	6902      	ldr	r2, [r0, #16]
 80076a0:	690c      	ldr	r4, [r1, #16]
 80076a2:	1b12      	subs	r2, r2, r4
 80076a4:	d10e      	bne.n	80076c4 <__mcmp+0x28>
 80076a6:	f100 0314 	add.w	r3, r0, #20
 80076aa:	3114      	adds	r1, #20
 80076ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076bc:	42a5      	cmp	r5, r4
 80076be:	d003      	beq.n	80076c8 <__mcmp+0x2c>
 80076c0:	d305      	bcc.n	80076ce <__mcmp+0x32>
 80076c2:	2201      	movs	r2, #1
 80076c4:	4610      	mov	r0, r2
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d3f3      	bcc.n	80076b4 <__mcmp+0x18>
 80076cc:	e7fa      	b.n	80076c4 <__mcmp+0x28>
 80076ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076d2:	e7f7      	b.n	80076c4 <__mcmp+0x28>

080076d4 <__mdiff>:
 80076d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	4606      	mov	r6, r0
 80076dc:	4611      	mov	r1, r2
 80076de:	4620      	mov	r0, r4
 80076e0:	4690      	mov	r8, r2
 80076e2:	f7ff ffdb 	bl	800769c <__mcmp>
 80076e6:	1e05      	subs	r5, r0, #0
 80076e8:	d110      	bne.n	800770c <__mdiff+0x38>
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff fd59 	bl	80071a4 <_Balloc>
 80076f2:	b930      	cbnz	r0, 8007702 <__mdiff+0x2e>
 80076f4:	4b3a      	ldr	r3, [pc, #232]	; (80077e0 <__mdiff+0x10c>)
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 2137 	movw	r1, #567	; 0x237
 80076fc:	4839      	ldr	r0, [pc, #228]	; (80077e4 <__mdiff+0x110>)
 80076fe:	f000 fcd3 	bl	80080a8 <__assert_func>
 8007702:	2301      	movs	r3, #1
 8007704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	bfa4      	itt	ge
 800770e:	4643      	movge	r3, r8
 8007710:	46a0      	movge	r8, r4
 8007712:	4630      	mov	r0, r6
 8007714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007718:	bfa6      	itte	ge
 800771a:	461c      	movge	r4, r3
 800771c:	2500      	movge	r5, #0
 800771e:	2501      	movlt	r5, #1
 8007720:	f7ff fd40 	bl	80071a4 <_Balloc>
 8007724:	b920      	cbnz	r0, 8007730 <__mdiff+0x5c>
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <__mdiff+0x10c>)
 8007728:	4602      	mov	r2, r0
 800772a:	f240 2145 	movw	r1, #581	; 0x245
 800772e:	e7e5      	b.n	80076fc <__mdiff+0x28>
 8007730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007734:	6926      	ldr	r6, [r4, #16]
 8007736:	60c5      	str	r5, [r0, #12]
 8007738:	f104 0914 	add.w	r9, r4, #20
 800773c:	f108 0514 	add.w	r5, r8, #20
 8007740:	f100 0e14 	add.w	lr, r0, #20
 8007744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800774c:	f108 0210 	add.w	r2, r8, #16
 8007750:	46f2      	mov	sl, lr
 8007752:	2100      	movs	r1, #0
 8007754:	f859 3b04 	ldr.w	r3, [r9], #4
 8007758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800775c:	fa11 f88b 	uxtah	r8, r1, fp
 8007760:	b299      	uxth	r1, r3
 8007762:	0c1b      	lsrs	r3, r3, #16
 8007764:	eba8 0801 	sub.w	r8, r8, r1
 8007768:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800776c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007770:	fa1f f888 	uxth.w	r8, r8
 8007774:	1419      	asrs	r1, r3, #16
 8007776:	454e      	cmp	r6, r9
 8007778:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800777c:	f84a 3b04 	str.w	r3, [sl], #4
 8007780:	d8e8      	bhi.n	8007754 <__mdiff+0x80>
 8007782:	1b33      	subs	r3, r6, r4
 8007784:	3b15      	subs	r3, #21
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	3304      	adds	r3, #4
 800778c:	3415      	adds	r4, #21
 800778e:	42a6      	cmp	r6, r4
 8007790:	bf38      	it	cc
 8007792:	2304      	movcc	r3, #4
 8007794:	441d      	add	r5, r3
 8007796:	4473      	add	r3, lr
 8007798:	469e      	mov	lr, r3
 800779a:	462e      	mov	r6, r5
 800779c:	4566      	cmp	r6, ip
 800779e:	d30e      	bcc.n	80077be <__mdiff+0xea>
 80077a0:	f10c 0203 	add.w	r2, ip, #3
 80077a4:	1b52      	subs	r2, r2, r5
 80077a6:	f022 0203 	bic.w	r2, r2, #3
 80077aa:	3d03      	subs	r5, #3
 80077ac:	45ac      	cmp	ip, r5
 80077ae:	bf38      	it	cc
 80077b0:	2200      	movcc	r2, #0
 80077b2:	4413      	add	r3, r2
 80077b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077b8:	b17a      	cbz	r2, 80077da <__mdiff+0x106>
 80077ba:	6107      	str	r7, [r0, #16]
 80077bc:	e7a4      	b.n	8007708 <__mdiff+0x34>
 80077be:	f856 8b04 	ldr.w	r8, [r6], #4
 80077c2:	fa11 f288 	uxtah	r2, r1, r8
 80077c6:	1414      	asrs	r4, r2, #16
 80077c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077cc:	b292      	uxth	r2, r2
 80077ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077d2:	f84e 2b04 	str.w	r2, [lr], #4
 80077d6:	1421      	asrs	r1, r4, #16
 80077d8:	e7e0      	b.n	800779c <__mdiff+0xc8>
 80077da:	3f01      	subs	r7, #1
 80077dc:	e7ea      	b.n	80077b4 <__mdiff+0xe0>
 80077de:	bf00      	nop
 80077e0:	080088be 	.word	0x080088be
 80077e4:	080088cf 	.word	0x080088cf

080077e8 <__d2b>:
 80077e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077ec:	460f      	mov	r7, r1
 80077ee:	2101      	movs	r1, #1
 80077f0:	ec59 8b10 	vmov	r8, r9, d0
 80077f4:	4616      	mov	r6, r2
 80077f6:	f7ff fcd5 	bl	80071a4 <_Balloc>
 80077fa:	4604      	mov	r4, r0
 80077fc:	b930      	cbnz	r0, 800780c <__d2b+0x24>
 80077fe:	4602      	mov	r2, r0
 8007800:	4b24      	ldr	r3, [pc, #144]	; (8007894 <__d2b+0xac>)
 8007802:	4825      	ldr	r0, [pc, #148]	; (8007898 <__d2b+0xb0>)
 8007804:	f240 310f 	movw	r1, #783	; 0x30f
 8007808:	f000 fc4e 	bl	80080a8 <__assert_func>
 800780c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007814:	bb2d      	cbnz	r5, 8007862 <__d2b+0x7a>
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	f1b8 0300 	subs.w	r3, r8, #0
 800781c:	d026      	beq.n	800786c <__d2b+0x84>
 800781e:	4668      	mov	r0, sp
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	f7ff fd87 	bl	8007334 <__lo0bits>
 8007826:	e9dd 1200 	ldrd	r1, r2, [sp]
 800782a:	b1e8      	cbz	r0, 8007868 <__d2b+0x80>
 800782c:	f1c0 0320 	rsb	r3, r0, #32
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	430b      	orrs	r3, r1
 8007836:	40c2      	lsrs	r2, r0
 8007838:	6163      	str	r3, [r4, #20]
 800783a:	9201      	str	r2, [sp, #4]
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	61a3      	str	r3, [r4, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	bf14      	ite	ne
 8007844:	2202      	movne	r2, #2
 8007846:	2201      	moveq	r2, #1
 8007848:	6122      	str	r2, [r4, #16]
 800784a:	b1bd      	cbz	r5, 800787c <__d2b+0x94>
 800784c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007850:	4405      	add	r5, r0
 8007852:	603d      	str	r5, [r7, #0]
 8007854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007858:	6030      	str	r0, [r6, #0]
 800785a:	4620      	mov	r0, r4
 800785c:	b003      	add	sp, #12
 800785e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007866:	e7d6      	b.n	8007816 <__d2b+0x2e>
 8007868:	6161      	str	r1, [r4, #20]
 800786a:	e7e7      	b.n	800783c <__d2b+0x54>
 800786c:	a801      	add	r0, sp, #4
 800786e:	f7ff fd61 	bl	8007334 <__lo0bits>
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	6163      	str	r3, [r4, #20]
 8007876:	3020      	adds	r0, #32
 8007878:	2201      	movs	r2, #1
 800787a:	e7e5      	b.n	8007848 <__d2b+0x60>
 800787c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007884:	6038      	str	r0, [r7, #0]
 8007886:	6918      	ldr	r0, [r3, #16]
 8007888:	f7ff fd34 	bl	80072f4 <__hi0bits>
 800788c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007890:	e7e2      	b.n	8007858 <__d2b+0x70>
 8007892:	bf00      	nop
 8007894:	080088be 	.word	0x080088be
 8007898:	080088cf 	.word	0x080088cf

0800789c <__ssputs_r>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	688e      	ldr	r6, [r1, #8]
 80078a2:	461f      	mov	r7, r3
 80078a4:	42be      	cmp	r6, r7
 80078a6:	680b      	ldr	r3, [r1, #0]
 80078a8:	4682      	mov	sl, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	4690      	mov	r8, r2
 80078ae:	d82c      	bhi.n	800790a <__ssputs_r+0x6e>
 80078b0:	898a      	ldrh	r2, [r1, #12]
 80078b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078b6:	d026      	beq.n	8007906 <__ssputs_r+0x6a>
 80078b8:	6965      	ldr	r5, [r4, #20]
 80078ba:	6909      	ldr	r1, [r1, #16]
 80078bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c0:	eba3 0901 	sub.w	r9, r3, r1
 80078c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078c8:	1c7b      	adds	r3, r7, #1
 80078ca:	444b      	add	r3, r9
 80078cc:	106d      	asrs	r5, r5, #1
 80078ce:	429d      	cmp	r5, r3
 80078d0:	bf38      	it	cc
 80078d2:	461d      	movcc	r5, r3
 80078d4:	0553      	lsls	r3, r2, #21
 80078d6:	d527      	bpl.n	8007928 <__ssputs_r+0x8c>
 80078d8:	4629      	mov	r1, r5
 80078da:	f7ff fbd7 	bl	800708c <_malloc_r>
 80078de:	4606      	mov	r6, r0
 80078e0:	b360      	cbz	r0, 800793c <__ssputs_r+0xa0>
 80078e2:	6921      	ldr	r1, [r4, #16]
 80078e4:	464a      	mov	r2, r9
 80078e6:	f000 fbd1 	bl	800808c <memcpy>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	6126      	str	r6, [r4, #16]
 80078f8:	6165      	str	r5, [r4, #20]
 80078fa:	444e      	add	r6, r9
 80078fc:	eba5 0509 	sub.w	r5, r5, r9
 8007900:	6026      	str	r6, [r4, #0]
 8007902:	60a5      	str	r5, [r4, #8]
 8007904:	463e      	mov	r6, r7
 8007906:	42be      	cmp	r6, r7
 8007908:	d900      	bls.n	800790c <__ssputs_r+0x70>
 800790a:	463e      	mov	r6, r7
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	4632      	mov	r2, r6
 8007910:	4641      	mov	r1, r8
 8007912:	f000 fb6f 	bl	8007ff4 <memmove>
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	1b9b      	subs	r3, r3, r6
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	4433      	add	r3, r6
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	2000      	movs	r0, #0
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	462a      	mov	r2, r5
 800792a:	f000 fc03 	bl	8008134 <_realloc_r>
 800792e:	4606      	mov	r6, r0
 8007930:	2800      	cmp	r0, #0
 8007932:	d1e0      	bne.n	80078f6 <__ssputs_r+0x5a>
 8007934:	6921      	ldr	r1, [r4, #16]
 8007936:	4650      	mov	r0, sl
 8007938:	f7ff fb34 	bl	8006fa4 <_free_r>
 800793c:	230c      	movs	r3, #12
 800793e:	f8ca 3000 	str.w	r3, [sl]
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800794e:	e7e9      	b.n	8007924 <__ssputs_r+0x88>

08007950 <_svfiprintf_r>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	4698      	mov	r8, r3
 8007956:	898b      	ldrh	r3, [r1, #12]
 8007958:	061b      	lsls	r3, r3, #24
 800795a:	b09d      	sub	sp, #116	; 0x74
 800795c:	4607      	mov	r7, r0
 800795e:	460d      	mov	r5, r1
 8007960:	4614      	mov	r4, r2
 8007962:	d50e      	bpl.n	8007982 <_svfiprintf_r+0x32>
 8007964:	690b      	ldr	r3, [r1, #16]
 8007966:	b963      	cbnz	r3, 8007982 <_svfiprintf_r+0x32>
 8007968:	2140      	movs	r1, #64	; 0x40
 800796a:	f7ff fb8f 	bl	800708c <_malloc_r>
 800796e:	6028      	str	r0, [r5, #0]
 8007970:	6128      	str	r0, [r5, #16]
 8007972:	b920      	cbnz	r0, 800797e <_svfiprintf_r+0x2e>
 8007974:	230c      	movs	r3, #12
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797c:	e0d0      	b.n	8007b20 <_svfiprintf_r+0x1d0>
 800797e:	2340      	movs	r3, #64	; 0x40
 8007980:	616b      	str	r3, [r5, #20]
 8007982:	2300      	movs	r3, #0
 8007984:	9309      	str	r3, [sp, #36]	; 0x24
 8007986:	2320      	movs	r3, #32
 8007988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800798c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007990:	2330      	movs	r3, #48	; 0x30
 8007992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b38 <_svfiprintf_r+0x1e8>
 8007996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800799a:	f04f 0901 	mov.w	r9, #1
 800799e:	4623      	mov	r3, r4
 80079a0:	469a      	mov	sl, r3
 80079a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079a6:	b10a      	cbz	r2, 80079ac <_svfiprintf_r+0x5c>
 80079a8:	2a25      	cmp	r2, #37	; 0x25
 80079aa:	d1f9      	bne.n	80079a0 <_svfiprintf_r+0x50>
 80079ac:	ebba 0b04 	subs.w	fp, sl, r4
 80079b0:	d00b      	beq.n	80079ca <_svfiprintf_r+0x7a>
 80079b2:	465b      	mov	r3, fp
 80079b4:	4622      	mov	r2, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7ff ff6f 	bl	800789c <__ssputs_r>
 80079be:	3001      	adds	r0, #1
 80079c0:	f000 80a9 	beq.w	8007b16 <_svfiprintf_r+0x1c6>
 80079c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c6:	445a      	add	r2, fp
 80079c8:	9209      	str	r2, [sp, #36]	; 0x24
 80079ca:	f89a 3000 	ldrb.w	r3, [sl]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80a1 	beq.w	8007b16 <_svfiprintf_r+0x1c6>
 80079d4:	2300      	movs	r3, #0
 80079d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079de:	f10a 0a01 	add.w	sl, sl, #1
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	9307      	str	r3, [sp, #28]
 80079e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ea:	931a      	str	r3, [sp, #104]	; 0x68
 80079ec:	4654      	mov	r4, sl
 80079ee:	2205      	movs	r2, #5
 80079f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f4:	4850      	ldr	r0, [pc, #320]	; (8007b38 <_svfiprintf_r+0x1e8>)
 80079f6:	f7f8 fc0b 	bl	8000210 <memchr>
 80079fa:	9a04      	ldr	r2, [sp, #16]
 80079fc:	b9d8      	cbnz	r0, 8007a36 <_svfiprintf_r+0xe6>
 80079fe:	06d0      	lsls	r0, r2, #27
 8007a00:	bf44      	itt	mi
 8007a02:	2320      	movmi	r3, #32
 8007a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a08:	0711      	lsls	r1, r2, #28
 8007a0a:	bf44      	itt	mi
 8007a0c:	232b      	movmi	r3, #43	; 0x2b
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a12:	f89a 3000 	ldrb.w	r3, [sl]
 8007a16:	2b2a      	cmp	r3, #42	; 0x2a
 8007a18:	d015      	beq.n	8007a46 <_svfiprintf_r+0xf6>
 8007a1a:	9a07      	ldr	r2, [sp, #28]
 8007a1c:	4654      	mov	r4, sl
 8007a1e:	2000      	movs	r0, #0
 8007a20:	f04f 0c0a 	mov.w	ip, #10
 8007a24:	4621      	mov	r1, r4
 8007a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a2a:	3b30      	subs	r3, #48	; 0x30
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d94d      	bls.n	8007acc <_svfiprintf_r+0x17c>
 8007a30:	b1b0      	cbz	r0, 8007a60 <_svfiprintf_r+0x110>
 8007a32:	9207      	str	r2, [sp, #28]
 8007a34:	e014      	b.n	8007a60 <_svfiprintf_r+0x110>
 8007a36:	eba0 0308 	sub.w	r3, r0, r8
 8007a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	46a2      	mov	sl, r4
 8007a44:	e7d2      	b.n	80079ec <_svfiprintf_r+0x9c>
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	1d19      	adds	r1, r3, #4
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	9103      	str	r1, [sp, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	bfbb      	ittet	lt
 8007a52:	425b      	neglt	r3, r3
 8007a54:	f042 0202 	orrlt.w	r2, r2, #2
 8007a58:	9307      	strge	r3, [sp, #28]
 8007a5a:	9307      	strlt	r3, [sp, #28]
 8007a5c:	bfb8      	it	lt
 8007a5e:	9204      	strlt	r2, [sp, #16]
 8007a60:	7823      	ldrb	r3, [r4, #0]
 8007a62:	2b2e      	cmp	r3, #46	; 0x2e
 8007a64:	d10c      	bne.n	8007a80 <_svfiprintf_r+0x130>
 8007a66:	7863      	ldrb	r3, [r4, #1]
 8007a68:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6a:	d134      	bne.n	8007ad6 <_svfiprintf_r+0x186>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	1d1a      	adds	r2, r3, #4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	9203      	str	r2, [sp, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bfb8      	it	lt
 8007a78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a7c:	3402      	adds	r4, #2
 8007a7e:	9305      	str	r3, [sp, #20]
 8007a80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b48 <_svfiprintf_r+0x1f8>
 8007a84:	7821      	ldrb	r1, [r4, #0]
 8007a86:	2203      	movs	r2, #3
 8007a88:	4650      	mov	r0, sl
 8007a8a:	f7f8 fbc1 	bl	8000210 <memchr>
 8007a8e:	b138      	cbz	r0, 8007aa0 <_svfiprintf_r+0x150>
 8007a90:	9b04      	ldr	r3, [sp, #16]
 8007a92:	eba0 000a 	sub.w	r0, r0, sl
 8007a96:	2240      	movs	r2, #64	; 0x40
 8007a98:	4082      	lsls	r2, r0
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	3401      	adds	r4, #1
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa4:	4825      	ldr	r0, [pc, #148]	; (8007b3c <_svfiprintf_r+0x1ec>)
 8007aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aaa:	2206      	movs	r2, #6
 8007aac:	f7f8 fbb0 	bl	8000210 <memchr>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d038      	beq.n	8007b26 <_svfiprintf_r+0x1d6>
 8007ab4:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <_svfiprintf_r+0x1f0>)
 8007ab6:	bb1b      	cbnz	r3, 8007b00 <_svfiprintf_r+0x1b0>
 8007ab8:	9b03      	ldr	r3, [sp, #12]
 8007aba:	3307      	adds	r3, #7
 8007abc:	f023 0307 	bic.w	r3, r3, #7
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac6:	4433      	add	r3, r6
 8007ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aca:	e768      	b.n	800799e <_svfiprintf_r+0x4e>
 8007acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e7a6      	b.n	8007a24 <_svfiprintf_r+0xd4>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	3401      	adds	r4, #1
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f04f 0c0a 	mov.w	ip, #10
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae8:	3a30      	subs	r2, #48	; 0x30
 8007aea:	2a09      	cmp	r2, #9
 8007aec:	d903      	bls.n	8007af6 <_svfiprintf_r+0x1a6>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0c6      	beq.n	8007a80 <_svfiprintf_r+0x130>
 8007af2:	9105      	str	r1, [sp, #20]
 8007af4:	e7c4      	b.n	8007a80 <_svfiprintf_r+0x130>
 8007af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afa:	4604      	mov	r4, r0
 8007afc:	2301      	movs	r3, #1
 8007afe:	e7f0      	b.n	8007ae2 <_svfiprintf_r+0x192>
 8007b00:	ab03      	add	r3, sp, #12
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	462a      	mov	r2, r5
 8007b06:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <_svfiprintf_r+0x1f4>)
 8007b08:	a904      	add	r1, sp, #16
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	f7fd fd60 	bl	80055d0 <_printf_float>
 8007b10:	1c42      	adds	r2, r0, #1
 8007b12:	4606      	mov	r6, r0
 8007b14:	d1d6      	bne.n	8007ac4 <_svfiprintf_r+0x174>
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	065b      	lsls	r3, r3, #25
 8007b1a:	f53f af2d 	bmi.w	8007978 <_svfiprintf_r+0x28>
 8007b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b20:	b01d      	add	sp, #116	; 0x74
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	ab03      	add	r3, sp, #12
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <_svfiprintf_r+0x1f4>)
 8007b2e:	a904      	add	r1, sp, #16
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7fd fff1 	bl	8005b18 <_printf_i>
 8007b36:	e7eb      	b.n	8007b10 <_svfiprintf_r+0x1c0>
 8007b38:	08008a24 	.word	0x08008a24
 8007b3c:	08008a2e 	.word	0x08008a2e
 8007b40:	080055d1 	.word	0x080055d1
 8007b44:	0800789d 	.word	0x0800789d
 8007b48:	08008a2a 	.word	0x08008a2a

08007b4c <__sfputc_r>:
 8007b4c:	6893      	ldr	r3, [r2, #8]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	b410      	push	{r4}
 8007b54:	6093      	str	r3, [r2, #8]
 8007b56:	da08      	bge.n	8007b6a <__sfputc_r+0x1e>
 8007b58:	6994      	ldr	r4, [r2, #24]
 8007b5a:	42a3      	cmp	r3, r4
 8007b5c:	db01      	blt.n	8007b62 <__sfputc_r+0x16>
 8007b5e:	290a      	cmp	r1, #10
 8007b60:	d103      	bne.n	8007b6a <__sfputc_r+0x1e>
 8007b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b66:	f7fe ba8c 	b.w	8006082 <__swbuf_r>
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	1c58      	adds	r0, r3, #1
 8007b6e:	6010      	str	r0, [r2, #0]
 8007b70:	7019      	strb	r1, [r3, #0]
 8007b72:	4608      	mov	r0, r1
 8007b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <__sfputs_r>:
 8007b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460f      	mov	r7, r1
 8007b80:	4614      	mov	r4, r2
 8007b82:	18d5      	adds	r5, r2, r3
 8007b84:	42ac      	cmp	r4, r5
 8007b86:	d101      	bne.n	8007b8c <__sfputs_r+0x12>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e007      	b.n	8007b9c <__sfputs_r+0x22>
 8007b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b90:	463a      	mov	r2, r7
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7ff ffda 	bl	8007b4c <__sfputc_r>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	d1f3      	bne.n	8007b84 <__sfputs_r+0xa>
 8007b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ba0 <_vfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	b09d      	sub	sp, #116	; 0x74
 8007ba8:	4614      	mov	r4, r2
 8007baa:	4698      	mov	r8, r3
 8007bac:	4606      	mov	r6, r0
 8007bae:	b118      	cbz	r0, 8007bb8 <_vfiprintf_r+0x18>
 8007bb0:	6a03      	ldr	r3, [r0, #32]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <_vfiprintf_r+0x18>
 8007bb4:	f7fe f95e 	bl	8005e74 <__sinit>
 8007bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bba:	07d9      	lsls	r1, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_vfiprintf_r+0x2a>
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	059a      	lsls	r2, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_vfiprintf_r+0x2a>
 8007bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc6:	f7fe fb6e 	bl	80062a6 <__retarget_lock_acquire_recursive>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	071b      	lsls	r3, r3, #28
 8007bce:	d501      	bpl.n	8007bd4 <_vfiprintf_r+0x34>
 8007bd0:	692b      	ldr	r3, [r5, #16]
 8007bd2:	b99b      	cbnz	r3, 8007bfc <_vfiprintf_r+0x5c>
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7fe fa90 	bl	80060fc <__swsetup_r>
 8007bdc:	b170      	cbz	r0, 8007bfc <_vfiprintf_r+0x5c>
 8007bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be0:	07dc      	lsls	r4, r3, #31
 8007be2:	d504      	bpl.n	8007bee <_vfiprintf_r+0x4e>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007be8:	b01d      	add	sp, #116	; 0x74
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	0598      	lsls	r0, r3, #22
 8007bf2:	d4f7      	bmi.n	8007be4 <_vfiprintf_r+0x44>
 8007bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf6:	f7fe fb57 	bl	80062a8 <__retarget_lock_release_recursive>
 8007bfa:	e7f3      	b.n	8007be4 <_vfiprintf_r+0x44>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007c00:	2320      	movs	r3, #32
 8007c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0a:	2330      	movs	r3, #48	; 0x30
 8007c0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007dc0 <_vfiprintf_r+0x220>
 8007c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c14:	f04f 0901 	mov.w	r9, #1
 8007c18:	4623      	mov	r3, r4
 8007c1a:	469a      	mov	sl, r3
 8007c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c20:	b10a      	cbz	r2, 8007c26 <_vfiprintf_r+0x86>
 8007c22:	2a25      	cmp	r2, #37	; 0x25
 8007c24:	d1f9      	bne.n	8007c1a <_vfiprintf_r+0x7a>
 8007c26:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2a:	d00b      	beq.n	8007c44 <_vfiprintf_r+0xa4>
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ffa1 	bl	8007b7a <__sfputs_r>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f000 80a9 	beq.w	8007d90 <_vfiprintf_r+0x1f0>
 8007c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c40:	445a      	add	r2, fp
 8007c42:	9209      	str	r2, [sp, #36]	; 0x24
 8007c44:	f89a 3000 	ldrb.w	r3, [sl]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 80a1 	beq.w	8007d90 <_vfiprintf_r+0x1f0>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c58:	f10a 0a01 	add.w	sl, sl, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c64:	931a      	str	r3, [sp, #104]	; 0x68
 8007c66:	4654      	mov	r4, sl
 8007c68:	2205      	movs	r2, #5
 8007c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6e:	4854      	ldr	r0, [pc, #336]	; (8007dc0 <_vfiprintf_r+0x220>)
 8007c70:	f7f8 face 	bl	8000210 <memchr>
 8007c74:	9a04      	ldr	r2, [sp, #16]
 8007c76:	b9d8      	cbnz	r0, 8007cb0 <_vfiprintf_r+0x110>
 8007c78:	06d1      	lsls	r1, r2, #27
 8007c7a:	bf44      	itt	mi
 8007c7c:	2320      	movmi	r3, #32
 8007c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c82:	0713      	lsls	r3, r2, #28
 8007c84:	bf44      	itt	mi
 8007c86:	232b      	movmi	r3, #43	; 0x2b
 8007c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c90:	2b2a      	cmp	r3, #42	; 0x2a
 8007c92:	d015      	beq.n	8007cc0 <_vfiprintf_r+0x120>
 8007c94:	9a07      	ldr	r2, [sp, #28]
 8007c96:	4654      	mov	r4, sl
 8007c98:	2000      	movs	r0, #0
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca4:	3b30      	subs	r3, #48	; 0x30
 8007ca6:	2b09      	cmp	r3, #9
 8007ca8:	d94d      	bls.n	8007d46 <_vfiprintf_r+0x1a6>
 8007caa:	b1b0      	cbz	r0, 8007cda <_vfiprintf_r+0x13a>
 8007cac:	9207      	str	r2, [sp, #28]
 8007cae:	e014      	b.n	8007cda <_vfiprintf_r+0x13a>
 8007cb0:	eba0 0308 	sub.w	r3, r0, r8
 8007cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	e7d2      	b.n	8007c66 <_vfiprintf_r+0xc6>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	1d19      	adds	r1, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9103      	str	r1, [sp, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfbb      	ittet	lt
 8007ccc:	425b      	neglt	r3, r3
 8007cce:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd2:	9307      	strge	r3, [sp, #28]
 8007cd4:	9307      	strlt	r3, [sp, #28]
 8007cd6:	bfb8      	it	lt
 8007cd8:	9204      	strlt	r2, [sp, #16]
 8007cda:	7823      	ldrb	r3, [r4, #0]
 8007cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8007cde:	d10c      	bne.n	8007cfa <_vfiprintf_r+0x15a>
 8007ce0:	7863      	ldrb	r3, [r4, #1]
 8007ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce4:	d134      	bne.n	8007d50 <_vfiprintf_r+0x1b0>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	9203      	str	r2, [sp, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	bfb8      	it	lt
 8007cf2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007cf6:	3402      	adds	r4, #2
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007dd0 <_vfiprintf_r+0x230>
 8007cfe:	7821      	ldrb	r1, [r4, #0]
 8007d00:	2203      	movs	r2, #3
 8007d02:	4650      	mov	r0, sl
 8007d04:	f7f8 fa84 	bl	8000210 <memchr>
 8007d08:	b138      	cbz	r0, 8007d1a <_vfiprintf_r+0x17a>
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	eba0 000a 	sub.w	r0, r0, sl
 8007d10:	2240      	movs	r2, #64	; 0x40
 8007d12:	4082      	lsls	r2, r0
 8007d14:	4313      	orrs	r3, r2
 8007d16:	3401      	adds	r4, #1
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1e:	4829      	ldr	r0, [pc, #164]	; (8007dc4 <_vfiprintf_r+0x224>)
 8007d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d24:	2206      	movs	r2, #6
 8007d26:	f7f8 fa73 	bl	8000210 <memchr>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d03f      	beq.n	8007dae <_vfiprintf_r+0x20e>
 8007d2e:	4b26      	ldr	r3, [pc, #152]	; (8007dc8 <_vfiprintf_r+0x228>)
 8007d30:	bb1b      	cbnz	r3, 8007d7a <_vfiprintf_r+0x1da>
 8007d32:	9b03      	ldr	r3, [sp, #12]
 8007d34:	3307      	adds	r3, #7
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	9303      	str	r3, [sp, #12]
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	443b      	add	r3, r7
 8007d42:	9309      	str	r3, [sp, #36]	; 0x24
 8007d44:	e768      	b.n	8007c18 <_vfiprintf_r+0x78>
 8007d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	e7a6      	b.n	8007c9e <_vfiprintf_r+0xfe>
 8007d50:	2300      	movs	r3, #0
 8007d52:	3401      	adds	r4, #1
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	4619      	mov	r1, r3
 8007d58:	f04f 0c0a 	mov.w	ip, #10
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d62:	3a30      	subs	r2, #48	; 0x30
 8007d64:	2a09      	cmp	r2, #9
 8007d66:	d903      	bls.n	8007d70 <_vfiprintf_r+0x1d0>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0c6      	beq.n	8007cfa <_vfiprintf_r+0x15a>
 8007d6c:	9105      	str	r1, [sp, #20]
 8007d6e:	e7c4      	b.n	8007cfa <_vfiprintf_r+0x15a>
 8007d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d74:	4604      	mov	r4, r0
 8007d76:	2301      	movs	r3, #1
 8007d78:	e7f0      	b.n	8007d5c <_vfiprintf_r+0x1bc>
 8007d7a:	ab03      	add	r3, sp, #12
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	462a      	mov	r2, r5
 8007d80:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <_vfiprintf_r+0x22c>)
 8007d82:	a904      	add	r1, sp, #16
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7fd fc23 	bl	80055d0 <_printf_float>
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	1c78      	adds	r0, r7, #1
 8007d8e:	d1d6      	bne.n	8007d3e <_vfiprintf_r+0x19e>
 8007d90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d92:	07d9      	lsls	r1, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_vfiprintf_r+0x202>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	059a      	lsls	r2, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_vfiprintf_r+0x202>
 8007d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9e:	f7fe fa83 	bl	80062a8 <__retarget_lock_release_recursive>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	065b      	lsls	r3, r3, #25
 8007da6:	f53f af1d 	bmi.w	8007be4 <_vfiprintf_r+0x44>
 8007daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dac:	e71c      	b.n	8007be8 <_vfiprintf_r+0x48>
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	462a      	mov	r2, r5
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <_vfiprintf_r+0x22c>)
 8007db6:	a904      	add	r1, sp, #16
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7fd fead 	bl	8005b18 <_printf_i>
 8007dbe:	e7e4      	b.n	8007d8a <_vfiprintf_r+0x1ea>
 8007dc0:	08008a24 	.word	0x08008a24
 8007dc4:	08008a2e 	.word	0x08008a2e
 8007dc8:	080055d1 	.word	0x080055d1
 8007dcc:	08007b7b 	.word	0x08007b7b
 8007dd0:	08008a2a 	.word	0x08008a2a

08007dd4 <__sflush_r>:
 8007dd4:	898a      	ldrh	r2, [r1, #12]
 8007dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	4605      	mov	r5, r0
 8007ddc:	0710      	lsls	r0, r2, #28
 8007dde:	460c      	mov	r4, r1
 8007de0:	d458      	bmi.n	8007e94 <__sflush_r+0xc0>
 8007de2:	684b      	ldr	r3, [r1, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc05      	bgt.n	8007df4 <__sflush_r+0x20>
 8007de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	dc02      	bgt.n	8007df4 <__sflush_r+0x20>
 8007dee:	2000      	movs	r0, #0
 8007df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007df6:	2e00      	cmp	r6, #0
 8007df8:	d0f9      	beq.n	8007dee <__sflush_r+0x1a>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e00:	682f      	ldr	r7, [r5, #0]
 8007e02:	6a21      	ldr	r1, [r4, #32]
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	d032      	beq.n	8007e6e <__sflush_r+0x9a>
 8007e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	075a      	lsls	r2, r3, #29
 8007e0e:	d505      	bpl.n	8007e1c <__sflush_r+0x48>
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	1ac0      	subs	r0, r0, r3
 8007e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e16:	b10b      	cbz	r3, 8007e1c <__sflush_r+0x48>
 8007e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e1a:	1ac0      	subs	r0, r0, r3
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e22:	6a21      	ldr	r1, [r4, #32]
 8007e24:	4628      	mov	r0, r5
 8007e26:	47b0      	blx	r6
 8007e28:	1c43      	adds	r3, r0, #1
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	d106      	bne.n	8007e3c <__sflush_r+0x68>
 8007e2e:	6829      	ldr	r1, [r5, #0]
 8007e30:	291d      	cmp	r1, #29
 8007e32:	d82b      	bhi.n	8007e8c <__sflush_r+0xb8>
 8007e34:	4a29      	ldr	r2, [pc, #164]	; (8007edc <__sflush_r+0x108>)
 8007e36:	410a      	asrs	r2, r1
 8007e38:	07d6      	lsls	r6, r2, #31
 8007e3a:	d427      	bmi.n	8007e8c <__sflush_r+0xb8>
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	6062      	str	r2, [r4, #4]
 8007e40:	04d9      	lsls	r1, r3, #19
 8007e42:	6922      	ldr	r2, [r4, #16]
 8007e44:	6022      	str	r2, [r4, #0]
 8007e46:	d504      	bpl.n	8007e52 <__sflush_r+0x7e>
 8007e48:	1c42      	adds	r2, r0, #1
 8007e4a:	d101      	bne.n	8007e50 <__sflush_r+0x7c>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b903      	cbnz	r3, 8007e52 <__sflush_r+0x7e>
 8007e50:	6560      	str	r0, [r4, #84]	; 0x54
 8007e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e54:	602f      	str	r7, [r5, #0]
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d0c9      	beq.n	8007dee <__sflush_r+0x1a>
 8007e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d002      	beq.n	8007e68 <__sflush_r+0x94>
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7ff f89e 	bl	8006fa4 <_free_r>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e6c:	e7c0      	b.n	8007df0 <__sflush_r+0x1c>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4628      	mov	r0, r5
 8007e72:	47b0      	blx	r6
 8007e74:	1c41      	adds	r1, r0, #1
 8007e76:	d1c8      	bne.n	8007e0a <__sflush_r+0x36>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0c5      	beq.n	8007e0a <__sflush_r+0x36>
 8007e7e:	2b1d      	cmp	r3, #29
 8007e80:	d001      	beq.n	8007e86 <__sflush_r+0xb2>
 8007e82:	2b16      	cmp	r3, #22
 8007e84:	d101      	bne.n	8007e8a <__sflush_r+0xb6>
 8007e86:	602f      	str	r7, [r5, #0]
 8007e88:	e7b1      	b.n	8007dee <__sflush_r+0x1a>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	e7ad      	b.n	8007df0 <__sflush_r+0x1c>
 8007e94:	690f      	ldr	r7, [r1, #16]
 8007e96:	2f00      	cmp	r7, #0
 8007e98:	d0a9      	beq.n	8007dee <__sflush_r+0x1a>
 8007e9a:	0793      	lsls	r3, r2, #30
 8007e9c:	680e      	ldr	r6, [r1, #0]
 8007e9e:	bf08      	it	eq
 8007ea0:	694b      	ldreq	r3, [r1, #20]
 8007ea2:	600f      	str	r7, [r1, #0]
 8007ea4:	bf18      	it	ne
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	eba6 0807 	sub.w	r8, r6, r7
 8007eac:	608b      	str	r3, [r1, #8]
 8007eae:	f1b8 0f00 	cmp.w	r8, #0
 8007eb2:	dd9c      	ble.n	8007dee <__sflush_r+0x1a>
 8007eb4:	6a21      	ldr	r1, [r4, #32]
 8007eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eb8:	4643      	mov	r3, r8
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b0      	blx	r6
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	dc06      	bgt.n	8007ed2 <__sflush_r+0xfe>
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ed0:	e78e      	b.n	8007df0 <__sflush_r+0x1c>
 8007ed2:	4407      	add	r7, r0
 8007ed4:	eba8 0800 	sub.w	r8, r8, r0
 8007ed8:	e7e9      	b.n	8007eae <__sflush_r+0xda>
 8007eda:	bf00      	nop
 8007edc:	dfbffffe 	.word	0xdfbffffe

08007ee0 <_fflush_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	690b      	ldr	r3, [r1, #16]
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	b913      	cbnz	r3, 8007ef0 <_fflush_r+0x10>
 8007eea:	2500      	movs	r5, #0
 8007eec:	4628      	mov	r0, r5
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	b118      	cbz	r0, 8007efa <_fflush_r+0x1a>
 8007ef2:	6a03      	ldr	r3, [r0, #32]
 8007ef4:	b90b      	cbnz	r3, 8007efa <_fflush_r+0x1a>
 8007ef6:	f7fd ffbd 	bl	8005e74 <__sinit>
 8007efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0f3      	beq.n	8007eea <_fflush_r+0xa>
 8007f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f04:	07d0      	lsls	r0, r2, #31
 8007f06:	d404      	bmi.n	8007f12 <_fflush_r+0x32>
 8007f08:	0599      	lsls	r1, r3, #22
 8007f0a:	d402      	bmi.n	8007f12 <_fflush_r+0x32>
 8007f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f0e:	f7fe f9ca 	bl	80062a6 <__retarget_lock_acquire_recursive>
 8007f12:	4628      	mov	r0, r5
 8007f14:	4621      	mov	r1, r4
 8007f16:	f7ff ff5d 	bl	8007dd4 <__sflush_r>
 8007f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f1c:	07da      	lsls	r2, r3, #31
 8007f1e:	4605      	mov	r5, r0
 8007f20:	d4e4      	bmi.n	8007eec <_fflush_r+0xc>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	059b      	lsls	r3, r3, #22
 8007f26:	d4e1      	bmi.n	8007eec <_fflush_r+0xc>
 8007f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f2a:	f7fe f9bd 	bl	80062a8 <__retarget_lock_release_recursive>
 8007f2e:	e7dd      	b.n	8007eec <_fflush_r+0xc>

08007f30 <__swhatbuf_r>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	460c      	mov	r4, r1
 8007f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	b096      	sub	sp, #88	; 0x58
 8007f3c:	4615      	mov	r5, r2
 8007f3e:	461e      	mov	r6, r3
 8007f40:	da0d      	bge.n	8007f5e <__swhatbuf_r+0x2e>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f48:	f04f 0100 	mov.w	r1, #0
 8007f4c:	bf0c      	ite	eq
 8007f4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007f52:	2340      	movne	r3, #64	; 0x40
 8007f54:	2000      	movs	r0, #0
 8007f56:	6031      	str	r1, [r6, #0]
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	b016      	add	sp, #88	; 0x58
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
 8007f5e:	466a      	mov	r2, sp
 8007f60:	f000 f862 	bl	8008028 <_fstat_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	dbec      	blt.n	8007f42 <__swhatbuf_r+0x12>
 8007f68:	9901      	ldr	r1, [sp, #4]
 8007f6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007f6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007f72:	4259      	negs	r1, r3
 8007f74:	4159      	adcs	r1, r3
 8007f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7a:	e7eb      	b.n	8007f54 <__swhatbuf_r+0x24>

08007f7c <__smakebuf_r>:
 8007f7c:	898b      	ldrh	r3, [r1, #12]
 8007f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f80:	079d      	lsls	r5, r3, #30
 8007f82:	4606      	mov	r6, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	d507      	bpl.n	8007f98 <__smakebuf_r+0x1c>
 8007f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	6123      	str	r3, [r4, #16]
 8007f90:	2301      	movs	r3, #1
 8007f92:	6163      	str	r3, [r4, #20]
 8007f94:	b002      	add	sp, #8
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	ab01      	add	r3, sp, #4
 8007f9a:	466a      	mov	r2, sp
 8007f9c:	f7ff ffc8 	bl	8007f30 <__swhatbuf_r>
 8007fa0:	9900      	ldr	r1, [sp, #0]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f7ff f871 	bl	800708c <_malloc_r>
 8007faa:	b948      	cbnz	r0, 8007fc0 <__smakebuf_r+0x44>
 8007fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fb0:	059a      	lsls	r2, r3, #22
 8007fb2:	d4ef      	bmi.n	8007f94 <__smakebuf_r+0x18>
 8007fb4:	f023 0303 	bic.w	r3, r3, #3
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	e7e3      	b.n	8007f88 <__smakebuf_r+0xc>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	6020      	str	r0, [r4, #0]
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	6163      	str	r3, [r4, #20]
 8007fce:	9b01      	ldr	r3, [sp, #4]
 8007fd0:	6120      	str	r0, [r4, #16]
 8007fd2:	b15b      	cbz	r3, 8007fec <__smakebuf_r+0x70>
 8007fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f000 f837 	bl	800804c <_isatty_r>
 8007fde:	b128      	cbz	r0, 8007fec <__smakebuf_r+0x70>
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	431d      	orrs	r5, r3
 8007ff0:	81a5      	strh	r5, [r4, #12]
 8007ff2:	e7cf      	b.n	8007f94 <__smakebuf_r+0x18>

08007ff4 <memmove>:
 8007ff4:	4288      	cmp	r0, r1
 8007ff6:	b510      	push	{r4, lr}
 8007ff8:	eb01 0402 	add.w	r4, r1, r2
 8007ffc:	d902      	bls.n	8008004 <memmove+0x10>
 8007ffe:	4284      	cmp	r4, r0
 8008000:	4623      	mov	r3, r4
 8008002:	d807      	bhi.n	8008014 <memmove+0x20>
 8008004:	1e43      	subs	r3, r0, #1
 8008006:	42a1      	cmp	r1, r4
 8008008:	d008      	beq.n	800801c <memmove+0x28>
 800800a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008012:	e7f8      	b.n	8008006 <memmove+0x12>
 8008014:	4402      	add	r2, r0
 8008016:	4601      	mov	r1, r0
 8008018:	428a      	cmp	r2, r1
 800801a:	d100      	bne.n	800801e <memmove+0x2a>
 800801c:	bd10      	pop	{r4, pc}
 800801e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008026:	e7f7      	b.n	8008018 <memmove+0x24>

08008028 <_fstat_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d07      	ldr	r5, [pc, #28]	; (8008048 <_fstat_r+0x20>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	4611      	mov	r1, r2
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	f7f9 fb12 	bl	800165e <_fstat>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	d102      	bne.n	8008044 <_fstat_r+0x1c>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	b103      	cbz	r3, 8008044 <_fstat_r+0x1c>
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	bd38      	pop	{r3, r4, r5, pc}
 8008046:	bf00      	nop
 8008048:	200004d4 	.word	0x200004d4

0800804c <_isatty_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	4d06      	ldr	r5, [pc, #24]	; (8008068 <_isatty_r+0x1c>)
 8008050:	2300      	movs	r3, #0
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7f9 fb11 	bl	800167e <_isatty>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_isatty_r+0x1a>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_isatty_r+0x1a>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	200004d4 	.word	0x200004d4

0800806c <_sbrk_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d06      	ldr	r5, [pc, #24]	; (8008088 <_sbrk_r+0x1c>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f9 fb1a 	bl	80016b0 <_sbrk>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_sbrk_r+0x1a>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_sbrk_r+0x1a>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	200004d4 	.word	0x200004d4

0800808c <memcpy>:
 800808c:	440a      	add	r2, r1
 800808e:	4291      	cmp	r1, r2
 8008090:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008094:	d100      	bne.n	8008098 <memcpy+0xc>
 8008096:	4770      	bx	lr
 8008098:	b510      	push	{r4, lr}
 800809a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800809e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080a2:	4291      	cmp	r1, r2
 80080a4:	d1f9      	bne.n	800809a <memcpy+0xe>
 80080a6:	bd10      	pop	{r4, pc}

080080a8 <__assert_func>:
 80080a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080aa:	4614      	mov	r4, r2
 80080ac:	461a      	mov	r2, r3
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <__assert_func+0x2c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4605      	mov	r5, r0
 80080b4:	68d8      	ldr	r0, [r3, #12]
 80080b6:	b14c      	cbz	r4, 80080cc <__assert_func+0x24>
 80080b8:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <__assert_func+0x30>)
 80080ba:	9100      	str	r1, [sp, #0]
 80080bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c0:	4906      	ldr	r1, [pc, #24]	; (80080dc <__assert_func+0x34>)
 80080c2:	462b      	mov	r3, r5
 80080c4:	f000 f872 	bl	80081ac <fiprintf>
 80080c8:	f000 f882 	bl	80081d0 <abort>
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <__assert_func+0x38>)
 80080ce:	461c      	mov	r4, r3
 80080d0:	e7f3      	b.n	80080ba <__assert_func+0x12>
 80080d2:	bf00      	nop
 80080d4:	200000b4 	.word	0x200000b4
 80080d8:	08008a3f 	.word	0x08008a3f
 80080dc:	08008a4c 	.word	0x08008a4c
 80080e0:	08008a7a 	.word	0x08008a7a

080080e4 <_calloc_r>:
 80080e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080e6:	fba1 2402 	umull	r2, r4, r1, r2
 80080ea:	b94c      	cbnz	r4, 8008100 <_calloc_r+0x1c>
 80080ec:	4611      	mov	r1, r2
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	f7fe ffcc 	bl	800708c <_malloc_r>
 80080f4:	9a01      	ldr	r2, [sp, #4]
 80080f6:	4605      	mov	r5, r0
 80080f8:	b930      	cbnz	r0, 8008108 <_calloc_r+0x24>
 80080fa:	4628      	mov	r0, r5
 80080fc:	b003      	add	sp, #12
 80080fe:	bd30      	pop	{r4, r5, pc}
 8008100:	220c      	movs	r2, #12
 8008102:	6002      	str	r2, [r0, #0]
 8008104:	2500      	movs	r5, #0
 8008106:	e7f8      	b.n	80080fa <_calloc_r+0x16>
 8008108:	4621      	mov	r1, r4
 800810a:	f7fe f84f 	bl	80061ac <memset>
 800810e:	e7f4      	b.n	80080fa <_calloc_r+0x16>

08008110 <__ascii_mbtowc>:
 8008110:	b082      	sub	sp, #8
 8008112:	b901      	cbnz	r1, 8008116 <__ascii_mbtowc+0x6>
 8008114:	a901      	add	r1, sp, #4
 8008116:	b142      	cbz	r2, 800812a <__ascii_mbtowc+0x1a>
 8008118:	b14b      	cbz	r3, 800812e <__ascii_mbtowc+0x1e>
 800811a:	7813      	ldrb	r3, [r2, #0]
 800811c:	600b      	str	r3, [r1, #0]
 800811e:	7812      	ldrb	r2, [r2, #0]
 8008120:	1e10      	subs	r0, r2, #0
 8008122:	bf18      	it	ne
 8008124:	2001      	movne	r0, #1
 8008126:	b002      	add	sp, #8
 8008128:	4770      	bx	lr
 800812a:	4610      	mov	r0, r2
 800812c:	e7fb      	b.n	8008126 <__ascii_mbtowc+0x16>
 800812e:	f06f 0001 	mvn.w	r0, #1
 8008132:	e7f8      	b.n	8008126 <__ascii_mbtowc+0x16>

08008134 <_realloc_r>:
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	4680      	mov	r8, r0
 800813a:	4614      	mov	r4, r2
 800813c:	460e      	mov	r6, r1
 800813e:	b921      	cbnz	r1, 800814a <_realloc_r+0x16>
 8008140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008144:	4611      	mov	r1, r2
 8008146:	f7fe bfa1 	b.w	800708c <_malloc_r>
 800814a:	b92a      	cbnz	r2, 8008158 <_realloc_r+0x24>
 800814c:	f7fe ff2a 	bl	8006fa4 <_free_r>
 8008150:	4625      	mov	r5, r4
 8008152:	4628      	mov	r0, r5
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	f000 f841 	bl	80081de <_malloc_usable_size_r>
 800815c:	4284      	cmp	r4, r0
 800815e:	4607      	mov	r7, r0
 8008160:	d802      	bhi.n	8008168 <_realloc_r+0x34>
 8008162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008166:	d812      	bhi.n	800818e <_realloc_r+0x5a>
 8008168:	4621      	mov	r1, r4
 800816a:	4640      	mov	r0, r8
 800816c:	f7fe ff8e 	bl	800708c <_malloc_r>
 8008170:	4605      	mov	r5, r0
 8008172:	2800      	cmp	r0, #0
 8008174:	d0ed      	beq.n	8008152 <_realloc_r+0x1e>
 8008176:	42bc      	cmp	r4, r7
 8008178:	4622      	mov	r2, r4
 800817a:	4631      	mov	r1, r6
 800817c:	bf28      	it	cs
 800817e:	463a      	movcs	r2, r7
 8008180:	f7ff ff84 	bl	800808c <memcpy>
 8008184:	4631      	mov	r1, r6
 8008186:	4640      	mov	r0, r8
 8008188:	f7fe ff0c 	bl	8006fa4 <_free_r>
 800818c:	e7e1      	b.n	8008152 <_realloc_r+0x1e>
 800818e:	4635      	mov	r5, r6
 8008190:	e7df      	b.n	8008152 <_realloc_r+0x1e>

08008192 <__ascii_wctomb>:
 8008192:	b149      	cbz	r1, 80081a8 <__ascii_wctomb+0x16>
 8008194:	2aff      	cmp	r2, #255	; 0xff
 8008196:	bf85      	ittet	hi
 8008198:	238a      	movhi	r3, #138	; 0x8a
 800819a:	6003      	strhi	r3, [r0, #0]
 800819c:	700a      	strbls	r2, [r1, #0]
 800819e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80081a2:	bf98      	it	ls
 80081a4:	2001      	movls	r0, #1
 80081a6:	4770      	bx	lr
 80081a8:	4608      	mov	r0, r1
 80081aa:	4770      	bx	lr

080081ac <fiprintf>:
 80081ac:	b40e      	push	{r1, r2, r3}
 80081ae:	b503      	push	{r0, r1, lr}
 80081b0:	4601      	mov	r1, r0
 80081b2:	ab03      	add	r3, sp, #12
 80081b4:	4805      	ldr	r0, [pc, #20]	; (80081cc <fiprintf+0x20>)
 80081b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f7ff fcef 	bl	8007ba0 <_vfiprintf_r>
 80081c2:	b002      	add	sp, #8
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b003      	add	sp, #12
 80081ca:	4770      	bx	lr
 80081cc:	200000b4 	.word	0x200000b4

080081d0 <abort>:
 80081d0:	b508      	push	{r3, lr}
 80081d2:	2006      	movs	r0, #6
 80081d4:	f000 f834 	bl	8008240 <raise>
 80081d8:	2001      	movs	r0, #1
 80081da:	f7f9 f9f1 	bl	80015c0 <_exit>

080081de <_malloc_usable_size_r>:
 80081de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e2:	1f18      	subs	r0, r3, #4
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bfbc      	itt	lt
 80081e8:	580b      	ldrlt	r3, [r1, r0]
 80081ea:	18c0      	addlt	r0, r0, r3
 80081ec:	4770      	bx	lr

080081ee <_raise_r>:
 80081ee:	291f      	cmp	r1, #31
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	d904      	bls.n	8008202 <_raise_r+0x14>
 80081f8:	2316      	movs	r3, #22
 80081fa:	6003      	str	r3, [r0, #0]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008204:	b112      	cbz	r2, 800820c <_raise_r+0x1e>
 8008206:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800820a:	b94b      	cbnz	r3, 8008220 <_raise_r+0x32>
 800820c:	4620      	mov	r0, r4
 800820e:	f000 f831 	bl	8008274 <_getpid_r>
 8008212:	462a      	mov	r2, r5
 8008214:	4601      	mov	r1, r0
 8008216:	4620      	mov	r0, r4
 8008218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800821c:	f000 b818 	b.w	8008250 <_kill_r>
 8008220:	2b01      	cmp	r3, #1
 8008222:	d00a      	beq.n	800823a <_raise_r+0x4c>
 8008224:	1c59      	adds	r1, r3, #1
 8008226:	d103      	bne.n	8008230 <_raise_r+0x42>
 8008228:	2316      	movs	r3, #22
 800822a:	6003      	str	r3, [r0, #0]
 800822c:	2001      	movs	r0, #1
 800822e:	e7e7      	b.n	8008200 <_raise_r+0x12>
 8008230:	2400      	movs	r4, #0
 8008232:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008236:	4628      	mov	r0, r5
 8008238:	4798      	blx	r3
 800823a:	2000      	movs	r0, #0
 800823c:	e7e0      	b.n	8008200 <_raise_r+0x12>
	...

08008240 <raise>:
 8008240:	4b02      	ldr	r3, [pc, #8]	; (800824c <raise+0xc>)
 8008242:	4601      	mov	r1, r0
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f7ff bfd2 	b.w	80081ee <_raise_r>
 800824a:	bf00      	nop
 800824c:	200000b4 	.word	0x200000b4

08008250 <_kill_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d07      	ldr	r5, [pc, #28]	; (8008270 <_kill_r+0x20>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	4611      	mov	r1, r2
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	f7f9 f99f 	bl	80015a0 <_kill>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d102      	bne.n	800826c <_kill_r+0x1c>
 8008266:	682b      	ldr	r3, [r5, #0]
 8008268:	b103      	cbz	r3, 800826c <_kill_r+0x1c>
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	bf00      	nop
 8008270:	200004d4 	.word	0x200004d4

08008274 <_getpid_r>:
 8008274:	f7f9 b98c 	b.w	8001590 <_getpid>

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
