
Slave_NRF24L01_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  08007cf0  08007cf0  00017cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085cc  080085cc  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d4  080085d4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  080085dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000228  08008800  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08008800  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b2c  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab7  00000000  00000000  00030dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00033880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d61  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ea8  00000000  00000000  00035731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bf4  00000000  00000000  000595d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d538e  00000000  00000000  0006d1cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000580c  00000000  00000000  0014255c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00147d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cd8 	.word	0x08007cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08007cd8 	.word	0x08007cd8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b42      	ldr	r3, [pc, #264]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a41      	ldr	r2, [pc, #260]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_GPIO_Init+0x124>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2122      	movs	r1, #34	; 0x22
 8000f6e:	4827      	ldr	r0, [pc, #156]	; (800100c <MX_GPIO_Init+0x128>)
 8000f70:	f000 ffa6 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2130      	movs	r1, #48	; 0x30
 8000f78:	4825      	ldr	r0, [pc, #148]	; (8001010 <MX_GPIO_Init+0x12c>)
 8000f7a:	f000 ffa1 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f96:	f000 fdff 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000f9a:	2322      	movs	r3, #34	; 0x22
 8000f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4816      	ldr	r0, [pc, #88]	; (800100c <MX_GPIO_Init+0x128>)
 8000fb2:	f000 fdf1 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <MX_GPIO_Init+0x12c>)
 8000fce:	f000 fde3 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000fd2:	2330      	movs	r3, #48	; 0x30
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <MX_GPIO_Init+0x12c>)
 8000fea:	f000 fdd5 	bl	8001b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2028      	movs	r0, #40	; 0x28
 8000ff4:	f000 fd99 	bl	8001b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f000 fdb2 	bl	8001b62 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800

08001018 <Tx_Mode>:
char myAckPayload[32] = "Ack by Node 1";

int count = 0;

// Function to configure NRF24 module for transmit mode without acknowledgment
void Tx_Mode(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	// Print information about entering transmit mode without acknowledgment
	//printf("________________________Tx Mode________________________ \n\r");

	// Stop listening for incoming data
	NRF24_stopListening();
 800101c:	f003 fac6 	bl	80045ac <NRF24_stopListening>

	// Set writing pipe address to TxpipeAddrs
	NRF24_openWritingPipe(TxpipeAddrs);
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <Tx_Mode+0x40>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f003 fb3f 	bl	80046ac <NRF24_openWritingPipe>

	// Enable auto acknowledgment
	NRF24_setAutoAck(true);
 800102e:	2001      	movs	r0, #1
 8001030:	f003 fc82 	bl	8004938 <NRF24_setAutoAck>

	// Set channel to 52
	NRF24_setChannel(52);
 8001034:	2034      	movs	r0, #52	; 0x34
 8001036:	f003 fbc6 	bl	80047c6 <NRF24_setChannel>

	// Set payload size to 32 bytes
	NRF24_setPayloadSize(32);
 800103a:	2020      	movs	r0, #32
 800103c:	f003 fbd8 	bl	80047f0 <NRF24_setPayloadSize>

	// Enable dynamic payloads
	NRF24_enableDynamicPayloads();
 8001040:	f003 fc30 	bl	80048a4 <NRF24_enableDynamicPayloads>

	// Enable acknowledgment payloads
	NRF24_enableAckPayload();
 8001044:	f003 fc00 	bl	8004848 <NRF24_enableAckPayload>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <Tx_Mode+0x44>)
 800104e:	f000 ff37 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	40020000 	.word	0x40020000

08001060 <Send_Data>:
 * Function: Send_Data
 * Description: Sends data using NRF24 module and waits for acknowledgment from Node 1.
 * Parameters: None
 * Returns: bool - Indicates whether data was sent successfully or not
 */
bool Send_Data(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	// Variable to track the status of data transmission
	bool send_stat = false;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]

	// Attempt to write data to NRF24 module
	if (NRF24_write(myTxData, 32)) {
 800106a:	2120      	movs	r1, #32
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <Send_Data+0x3c>)
 800106e:	f003 faa9 	bl	80045c4 <NRF24_write>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d009      	beq.n	800108c <Send_Data+0x2c>
		// If data is successfully written, read acknowledgment payload
		NRF24_read(AckPayload, 32);
 8001078:	2120      	movs	r1, #32
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <Send_Data+0x40>)
 800107c:	f003 faf6 	bl	800466c <NRF24_read>
		printf("%s \r\n", AckPayload);
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <Send_Data+0x40>)
 8001082:	4808      	ldr	r0, [pc, #32]	; (80010a4 <Send_Data+0x44>)
 8001084:	f004 fe26 	bl	8005cd4 <iprintf>
		send_stat = true;
 8001088:	2301      	movs	r3, #1
 800108a:	71fb      	strb	r3, [r7, #7]
//			send_stat = false;
//		}
	}

	// Delay before returning to avoid immediate retries
	HAL_Delay(50);
 800108c:	2032      	movs	r0, #50	; 0x32
 800108e:	f000 fc4d 	bl	800192c <HAL_Delay>

	// Return the status of data transmission
	return send_stat;
 8001092:	79fb      	ldrb	r3, [r7, #7]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000010 	.word	0x20000010
 80010a0:	20000244 	.word	0x20000244
 80010a4:	08007cf0 	.word	0x08007cf0

080010a8 <Rx_Mode>:

// Function to configure NRF24 module for receiving mode without acknowledgment
void Rx_Mode(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	// Print information about changing settings to receiver mode with acknowledgment
	//printf("________________________Rx Mode________________________ \n\r");

	// Enable auto acknowledgment
	NRF24_setAutoAck(true);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f003 fc43 	bl	8004938 <NRF24_setAutoAck>

	// Set channel to 52
	NRF24_setChannel(52);
 80010b2:	2034      	movs	r0, #52	; 0x34
 80010b4:	f003 fb87 	bl	80047c6 <NRF24_setChannel>

	// Set payload size to 32 bytes
	NRF24_setPayloadSize(32);
 80010b8:	2020      	movs	r0, #32
 80010ba:	f003 fb99 	bl	80047f0 <NRF24_setPayloadSize>

	// Open reading pipe with address RxpipeAddrs
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <Rx_Mode+0x3c>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	2001      	movs	r0, #1
 80010c6:	f003 fb15 	bl	80046f4 <NRF24_openReadingPipe>

	// Enable dynamic payloads
	NRF24_enableDynamicPayloads();
 80010ca:	f003 fbeb 	bl	80048a4 <NRF24_enableDynamicPayloads>

	// Enable acknowledgment payloads
	NRF24_enableAckPayload();
 80010ce:	f003 fbbb 	bl	8004848 <NRF24_enableAckPayload>

	// Start listening for incoming data
	NRF24_startListening();
 80010d2:	f003 fa45 	bl	8004560 <NRF24_startListening>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2120      	movs	r1, #32
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <Rx_Mode+0x40>)
 80010dc:	f000 fef0 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000008 	.word	0x20000008
 80010e8:	40020000 	.word	0x40020000

080010ec <Receive_Data>:
 * Function: Receive_Data
 * Description: Receives data from Node 1 using NRF24 module.
 * Parameters: None
 * Returns: bool - Indicates whether data was received successfully or not
 */
bool Receive_Data(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	// Variable to track the status of data reception
	bool receive_stat = false;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]

	// Check if there is data available to read
	if (NRF24_available()) {
 80010f6:	f003 fab1 	bl	800465c <NRF24_available>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d016      	beq.n	800112e <Receive_Data+0x42>
		// Read data from NRF24 module
		NRF24_read(myRxData, 32);
 8001100:	2120      	movs	r1, #32
 8001102:	480f      	ldr	r0, [pc, #60]	; (8001140 <Receive_Data+0x54>)
 8001104:	f003 fab2 	bl	800466c <NRF24_read>

		// Send acknowledgment payload to Node 1
		NRF24_writeAckPayload(1, myAckPayload, 32);
 8001108:	2220      	movs	r2, #32
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <Receive_Data+0x58>)
 800110c:	2001      	movs	r0, #1
 800110e:	f003 fd3d 	bl	8004b8c <NRF24_writeAckPayload>

		// Print the received data
		count++;
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <Receive_Data+0x5c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <Receive_Data+0x5c>)
 800111a:	6013      	str	r3, [r2, #0]
		printf("%s : %d \r\n", myRxData, count);
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <Receive_Data+0x5c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4907      	ldr	r1, [pc, #28]	; (8001140 <Receive_Data+0x54>)
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <Receive_Data+0x60>)
 8001126:	f004 fdd5 	bl	8005cd4 <iprintf>

		// Set receive_stat to true to indicate successful data reception
		receive_stat = true;
 800112a:	2301      	movs	r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
	}

	// Delay for 10 milliseconds before returning to avoid immediate retries
	HAL_Delay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f000 fbfc 	bl	800192c <HAL_Delay>

	// Return the status of data reception
	return receive_stat;
 8001134:	79fb      	ldrb	r3, [r7, #7]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000264 	.word	0x20000264
 8001144:	20000030 	.word	0x20000030
 8001148:	20000284 	.word	0x20000284
 800114c:	08007cf8 	.word	0x08007cf8

08001150 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001156:	f000 fb77 	bl	8001848 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800115a:	f000 f843 	bl	80011e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800115e:	f7ff fec1 	bl	8000ee4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001162:	f000 fac3 	bl	80016ec <MX_USART2_UART_Init>
	MX_SPI2_Init();
 8001166:	f000 f8b5 	bl	80012d4 <MX_SPI2_Init>
	MX_TIM6_Init();
 800116a:	f000 fa67 	bl	800163c <MX_TIM6_Init>
	 * Description: This block of code initializes the NRF24 module, enters receive mode,
	 *              and prints current radio settings.
	 */

	// Initialize NRF24 module
	NRF24_Init();
 800116e:	f003 f9d2 	bl	8004516 <NRF24_Init>

	// Print information about entering receive mode with acknowledgment
	printf("//**** RECEIVE - ACK ****//   \n\r");
 8001172:	481a      	ldr	r0, [pc, #104]	; (80011dc <main+0x8c>)
 8001174:	f004 fdae 	bl	8005cd4 <iprintf>
	printf(
 8001178:	4819      	ldr	r0, [pc, #100]	; (80011e0 <main+0x90>)
 800117a:	f004 fdab 	bl	8005cd4 <iprintf>
			"________________________After change Setting________________________ \n\r");

	// Switch NRF24 module to receive mode
	Rx_Mode();
 800117e:	f7ff ff93 	bl	80010a8 <Rx_Mode>

	// Print current radio settings
	printRadioSettings();
 8001182:	f003 fd83 	bl	8004c8c <printRadioSettings>
		 *              sends the acknowledgment, and switches back to receive mode.
		 *              If no data is received, it prints a message indicating no request from the master.
		 */

		// Check if data is received successfully
		if (Receive_Data()) {
 8001186:	f7ff ffb1 	bl	80010ec <Receive_Data>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d021      	beq.n	80011d4 <main+0x84>
			// Switch NRF24 module to transmit mode

			Tx_Mode();
 8001190:	f7ff ff42 	bl	8001018 <Tx_Mode>

			// Print a message indicating that transmit mode is activated
//			printf("Tx Mode is Activated\r\n");

			// Loop indefinitely until acknowledgment is sent or a timeout occurs
			int coun = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
			while (coun < 5) {
 8001198:	e016      	b.n	80011c8 <main+0x78>
//				printf("wite ....\n");
				// Check if acknowledgment is sent successfully
				if (Send_Data()) {
 800119a:	f7ff ff61 	bl	8001060 <Send_Data>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <main+0x62>
					// Switch NRF24 module back to receive mode
					Rx_Mode();
 80011a4:	f7ff ff80 	bl	80010a8 <Rx_Mode>

					// Print a message indicating that receive mode is activated
//								printf("Rx Mode is Activated\r\n");

					// Delay for 500 milliseconds before breaking out of the loop
					HAL_Delay(400);
 80011a8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80011ac:	f000 fbbe 	bl	800192c <HAL_Delay>

					// Exit the loop
					break;
 80011b0:	e00d      	b.n	80011ce <main+0x7e>

				} else if (coun == 5) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d101      	bne.n	80011bc <main+0x6c>
					// Switch NRF24 module back to receive mode
					Rx_Mode();
 80011b8:	f7ff ff76 	bl	80010a8 <Rx_Mode>
				}

				// If acknowledgment transmission fails, wait for a short period before retrying
				HAL_Delay(50);
 80011bc:	2032      	movs	r0, #50	; 0x32
 80011be:	f000 fbb5 	bl	800192c <HAL_Delay>

				coun++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3301      	adds	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
			while (coun < 5) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	dde5      	ble.n	800119a <main+0x4a>

			}

			Rx_Mode();
 80011ce:	f7ff ff6b 	bl	80010a8 <Rx_Mode>
 80011d2:	e7d8      	b.n	8001186 <main+0x36>

			// If no data is received, print a message indicating no request from the master
			//printf("There is no request from the Master\r\n");

			// Delay for 50 milliseconds before continuing
			HAL_Delay(50);
 80011d4:	2032      	movs	r0, #50	; 0x32
 80011d6:	f000 fba9 	bl	800192c <HAL_Delay>
		if (Receive_Data()) {
 80011da:	e7d4      	b.n	8001186 <main+0x36>
 80011dc:	08007d04 	.word	0x08007d04
 80011e0:	08007d28 	.word	0x08007d28

080011e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 feb4 	bl	8005f60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <SystemClock_Config+0xdc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <SystemClock_Config+0xdc>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <SystemClock_Config+0xdc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <SystemClock_Config+0xe0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <SystemClock_Config+0xe0>)
 800122e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <SystemClock_Config+0xe0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001258:	23b4      	movs	r3, #180	; 0xb4
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4618      	mov	r0, r3
 800126e:	f001 f9ff 	bl	8002670 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x98>
		Error_Handler();
 8001278:	f000 f826 	bl	80012c8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800127c:	f000 fe5e 	bl	8001f3c <HAL_PWREx_EnableOverDrive>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0xa6>
		Error_Handler();
 8001286:	f000 f81f 	bl	80012c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001296:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2105      	movs	r1, #5
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fe97 	bl	8001fdc <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0xd4>
		Error_Handler();
 80012b4:	f000 f808 	bl	80012c8 <Error_Handler>
	}
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	; 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012d0:	e7fe      	b.n	80012d0 <Error_Handler+0x8>
	...

080012d4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_SPI2_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <MX_SPI2_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_SPI2_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI2_Init+0x64>)
 8001308:	2210      	movs	r2, #16
 800130a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_SPI2_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI2_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_SPI2_Init+0x64>)
 8001326:	f001 fc41 	bl	8002bac <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001330:	f7ff ffca 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000288 	.word	0x20000288
 800133c:	40003800 	.word	0x40003800

08001340 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_SPI_MspInit+0x84>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12c      	bne.n	80013bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_SPI_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <HAL_SPI_MspInit+0x88>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_SPI_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_SPI_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_SPI_MspInit+0x88>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_SPI_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800139a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ac:	2305      	movs	r3, #5
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <HAL_SPI_MspInit+0x8c>)
 80013b8:	f000 fbee 	bl	8001b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40003800 	.word	0x40003800
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020400 	.word	0x40020400

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800140e:	2007      	movs	r0, #7
 8001410:	f000 fb80 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <MemManage_Handler+0x4>

08001432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <UsageFault_Handler+0x4>

0800143e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146c:	f000 fa3e 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8001478:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800147c:	f000 fd3a 	bl	8001ef4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001480:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001484:	f000 fd36 	bl	8001ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return 1;
 8001490:	2301      	movs	r3, #1
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_kill>:

int _kill(int pid, int sig)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a6:	f004 fdad 	bl	8006004 <__errno>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2216      	movs	r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
  return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_exit>:

void _exit (int status)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffe7 	bl	800149c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ce:	e7fe      	b.n	80014ce <_exit+0x12>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
  }

  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	e009      	b.n	8001530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	60ba      	str	r2, [r7, #8]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f953 	bl	80017d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf1      	blt.n	800151c <_write+0x12>
  }
  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_close>:

int _close(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800156a:	605a      	str	r2, [r3, #4]
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_isatty>:

int _isatty(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <_sbrk+0x5c>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <_sbrk+0x60>)
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <_sbrk+0x64>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <_sbrk+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d207      	bcs.n	80015ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015dc:	f004 fd12 	bl	8006004 <__errno>
 80015e0:	4603      	mov	r3, r0
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ea:	e009      	b.n	8001600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <_sbrk+0x64>)
 80015fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20020000 	.word	0x20020000
 800160c:	00000400 	.word	0x00000400
 8001610:	200002e0 	.word	0x200002e0
 8001614:	200004d8 	.word	0x200004d8

08001618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <SystemInit+0x20>)
 800161e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SystemInit+0x20>)
 8001624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM6_Init+0x64>)
 800164c:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <MX_TIM6_Init+0x68>)
 800164e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_TIM6_Init+0x64>)
 8001652:	225a      	movs	r2, #90	; 0x5a
 8001654:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_TIM6_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_TIM6_Init+0x64>)
 800165e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001662:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_TIM6_Init+0x64>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM6_Init+0x64>)
 800166c:	f002 f874 	bl	8003758 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001676:	f7ff fe27 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_TIM6_Init+0x64>)
 8001688:	f002 f962 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001692:	f7ff fe19 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002e4 	.word	0x200002e4
 80016a4:	40001000 	.word	0x40001000

080016a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10d      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_TIM_Base_MspInit+0x40>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_TIM_Base_MspInit+0x40>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_TIM_Base_MspInit+0x40>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40001000 	.word	0x40001000
 80016e8:	40023800 	.word	0x40023800

080016ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_USART2_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001724:	f002 f990 	bl	8003a48 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172e:	f7ff fdcb 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000032c 	.word	0x2000032c
 800173c:	40004400 	.word	0x40004400

08001740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x88>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179a:	230c      	movs	r3, #12
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0x8c>)
 80017b6:	f000 f9ef 	bl	8001b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80017d8:	1d39      	adds	r1, r7, #4
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017de:	2201      	movs	r2, #1
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <__io_putchar+0x20>)
 80017e2:	f002 f981 	bl	8003ae8 <HAL_UART_Transmit>
	return ch;
 80017e6:	687b      	ldr	r3, [r7, #4]

}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000032c 	.word	0x2000032c

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017f8:	f7ff ff0e 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001822:	f004 fbf5 	bl	8006010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fc93 	bl	8001150 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001838:	080085dc 	.word	0x080085dc
  ldr r2, =_sbss
 800183c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001840:	200004d4 	.word	0x200004d4

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f94f 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fda8 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f967 	bl	8001b7e <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c8:	f000 f92f 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000050 	.word	0x20000050
 80018e4:	20000058 	.word	0x20000058
 80018e8:	20000054 	.word	0x20000054

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000058 	.word	0x20000058
 8001910:	20000374 	.word	0x20000374

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000374 	.word	0x20000374

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000058 	.word	0x20000058

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff29 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff3e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff31 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e165      	b.n	8001e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8154 	bne.w	8001e7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d130      	bne.n	8001c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ae 	beq.w	8001e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <HAL_GPIO_Init+0x300>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a5c      	ldr	r2, [pc, #368]	; (8001e98 <HAL_GPIO_Init+0x300>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <HAL_GPIO_Init+0x300>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <HAL_GPIO_Init+0x308>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d025      	beq.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4e      	ldr	r2, [pc, #312]	; (8001ea4 <HAL_GPIO_Init+0x30c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01f      	beq.n	8001dae <HAL_GPIO_Init+0x216>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x310>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_Init+0x212>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <HAL_GPIO_Init+0x314>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x20e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4b      	ldr	r2, [pc, #300]	; (8001eb0 <HAL_GPIO_Init+0x318>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x20a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4a      	ldr	r2, [pc, #296]	; (8001eb4 <HAL_GPIO_Init+0x31c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x206>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a49      	ldr	r2, [pc, #292]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x202>
 8001d96:	2306      	movs	r3, #6
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001d9a:	2307      	movs	r3, #7
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x21c>
 8001db2:	2300      	movs	r3, #0
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc4:	4935      	ldr	r1, [pc, #212]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df6:	4a31      	ldr	r2, [pc, #196]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e20:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f ae96 	bls.w	8001bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f806 	bl	8001f24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x90>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x90>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_PWREx_EnableOverDrive+0x90>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f68:	f7ff fcd4 	bl	8001914 <HAL_GetTick>
 8001f6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f6e:	e009      	b.n	8001f84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f70:	f7ff fcd0 	bl	8001914 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7e:	d901      	bls.n	8001f84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e01f      	b.n	8001fc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d1ee      	bne.n	8001f70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f98:	f7ff fcbc 	bl	8001914 <HAL_GetTick>
 8001f9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f9e:	e009      	b.n	8001fb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fa0:	f7ff fcb8 	bl	8001914 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fae:	d901      	bls.n	8001fb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e007      	b.n	8001fc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	420e0040 	.word	0x420e0040
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	420e0044 	.word	0x420e0044

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff fc22 	bl	8001914 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff fc1e 	bl	8001914 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f855 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fb82 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	08008234 	.word	0x08008234
 80021a0:	20000050 	.word	0x20000050
 80021a4:	20000054 	.word	0x20000054

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000050 	.word	0x20000050

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff0 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	08008244 	.word	0x08008244

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021ec:	f7ff ffdc 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0b5b      	lsrs	r3, r3, #13
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	08008244 	.word	0x08008244

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b0ae      	sub	sp, #184	; 0xb8
 8002216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002236:	4bcb      	ldr	r3, [pc, #812]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b0c      	cmp	r3, #12
 8002240:	f200 8206 	bhi.w	8002650 <HAL_RCC_GetSysClockFreq+0x440>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	08002281 	.word	0x08002281
 8002250:	08002651 	.word	0x08002651
 8002254:	08002651 	.word	0x08002651
 8002258:	08002651 	.word	0x08002651
 800225c:	08002289 	.word	0x08002289
 8002260:	08002651 	.word	0x08002651
 8002264:	08002651 	.word	0x08002651
 8002268:	08002651 	.word	0x08002651
 800226c:	08002291 	.word	0x08002291
 8002270:	08002651 	.word	0x08002651
 8002274:	08002651 	.word	0x08002651
 8002278:	08002651 	.word	0x08002651
 800227c:	08002481 	.word	0x08002481
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4bb9      	ldr	r3, [pc, #740]	; (8002568 <HAL_RCC_GetSysClockFreq+0x358>)
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002286:	e1e7      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4bb8      	ldr	r3, [pc, #736]	; (800256c <HAL_RCC_GetSysClockFreq+0x35c>)
 800228a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800228e:	e1e3      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002290:	4bb4      	ldr	r3, [pc, #720]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229c:	4bb1      	ldr	r3, [pc, #708]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d071      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4bae      	ldr	r3, [pc, #696]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80022b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	0159      	lsls	r1, r3, #5
 80022dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e0:	0150      	lsls	r0, r2, #5
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4621      	mov	r1, r4
 80022e8:	1a51      	subs	r1, r2, r1
 80022ea:	6439      	str	r1, [r7, #64]	; 0x40
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb63 0301 	sbc.w	r3, r3, r1
 80022f2:	647b      	str	r3, [r7, #68]	; 0x44
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002300:	4649      	mov	r1, r9
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	4641      	mov	r1, r8
 8002306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230a:	4641      	mov	r1, r8
 800230c:	018a      	lsls	r2, r1, #6
 800230e:	4641      	mov	r1, r8
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	63b9      	str	r1, [r7, #56]	; 0x38
 8002314:	4649      	mov	r1, r9
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002328:	4649      	mov	r1, r9
 800232a:	00cb      	lsls	r3, r1, #3
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002332:	4641      	mov	r1, r8
 8002334:	00ca      	lsls	r2, r1, #3
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	4603      	mov	r3, r0
 800233c:	4622      	mov	r2, r4
 800233e:	189b      	adds	r3, r3, r2
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
 8002342:	462b      	mov	r3, r5
 8002344:	460a      	mov	r2, r1
 8002346:	eb42 0303 	adc.w	r3, r2, r3
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002358:	4629      	mov	r1, r5
 800235a:	024b      	lsls	r3, r1, #9
 800235c:	4621      	mov	r1, r4
 800235e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002362:	4621      	mov	r1, r4
 8002364:	024a      	lsls	r2, r1, #9
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800236e:	2200      	movs	r2, #0
 8002370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002378:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800237c:	f7fe fc34 	bl	8000be8 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4613      	mov	r3, r2
 8002386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800238a:	e067      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238c:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	2200      	movs	r2, #0
 8002394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002398:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800239c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80023a6:	2300      	movs	r3, #0
 80023a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023aa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023ae:	4622      	mov	r2, r4
 80023b0:	462b      	mov	r3, r5
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	0159      	lsls	r1, r3, #5
 80023bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c0:	0150      	lsls	r0, r2, #5
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4621      	mov	r1, r4
 80023c8:	1a51      	subs	r1, r2, r1
 80023ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80023cc:	4629      	mov	r1, r5
 80023ce:	eb63 0301 	sbc.w	r3, r3, r1
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80023e0:	4649      	mov	r1, r9
 80023e2:	018b      	lsls	r3, r1, #6
 80023e4:	4641      	mov	r1, r8
 80023e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ea:	4641      	mov	r1, r8
 80023ec:	018a      	lsls	r2, r1, #6
 80023ee:	4641      	mov	r1, r8
 80023f0:	ebb2 0a01 	subs.w	sl, r2, r1
 80023f4:	4649      	mov	r1, r9
 80023f6:	eb63 0b01 	sbc.w	fp, r3, r1
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002406:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800240a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800240e:	4692      	mov	sl, r2
 8002410:	469b      	mov	fp, r3
 8002412:	4623      	mov	r3, r4
 8002414:	eb1a 0303 	adds.w	r3, sl, r3
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	462b      	mov	r3, r5
 800241c:	eb4b 0303 	adc.w	r3, fp, r3
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800242e:	4629      	mov	r1, r5
 8002430:	028b      	lsls	r3, r1, #10
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002438:	4621      	mov	r1, r4
 800243a:	028a      	lsls	r2, r1, #10
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002444:	2200      	movs	r2, #0
 8002446:	673b      	str	r3, [r7, #112]	; 0x70
 8002448:	677a      	str	r2, [r7, #116]	; 0x74
 800244a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800244e:	f7fe fbcb 	bl	8000be8 <__aeabi_uldivmod>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4613      	mov	r3, r2
 8002458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800246e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800247e:	e0eb      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002480:	4b38      	ldr	r3, [pc, #224]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d06b      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002498:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_RCC_GetSysClockFreq+0x354>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	099b      	lsrs	r3, r3, #6
 800249e:	2200      	movs	r2, #0
 80024a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80024a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	663b      	str	r3, [r7, #96]	; 0x60
 80024ac:	2300      	movs	r3, #0
 80024ae:	667b      	str	r3, [r7, #100]	; 0x64
 80024b0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80024b4:	4622      	mov	r2, r4
 80024b6:	462b      	mov	r3, r5
 80024b8:	f04f 0000 	mov.w	r0, #0
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	0159      	lsls	r1, r3, #5
 80024c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c6:	0150      	lsls	r0, r2, #5
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4621      	mov	r1, r4
 80024ce:	1a51      	subs	r1, r2, r1
 80024d0:	61b9      	str	r1, [r7, #24]
 80024d2:	4629      	mov	r1, r5
 80024d4:	eb63 0301 	sbc.w	r3, r3, r1
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024e6:	4659      	mov	r1, fp
 80024e8:	018b      	lsls	r3, r1, #6
 80024ea:	4651      	mov	r1, sl
 80024ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f0:	4651      	mov	r1, sl
 80024f2:	018a      	lsls	r2, r1, #6
 80024f4:	4651      	mov	r1, sl
 80024f6:	ebb2 0801 	subs.w	r8, r2, r1
 80024fa:	4659      	mov	r1, fp
 80024fc:	eb63 0901 	sbc.w	r9, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800250c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002510:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002514:	4690      	mov	r8, r2
 8002516:	4699      	mov	r9, r3
 8002518:	4623      	mov	r3, r4
 800251a:	eb18 0303 	adds.w	r3, r8, r3
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	462b      	mov	r3, r5
 8002522:	eb49 0303 	adc.w	r3, r9, r3
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002534:	4629      	mov	r1, r5
 8002536:	024b      	lsls	r3, r1, #9
 8002538:	4621      	mov	r1, r4
 800253a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253e:	4621      	mov	r1, r4
 8002540:	024a      	lsls	r2, r1, #9
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800254a:	2200      	movs	r2, #0
 800254c:	65bb      	str	r3, [r7, #88]	; 0x58
 800254e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002550:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002554:	f7fe fb48 	bl	8000be8 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002562:	e065      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x420>
 8002564:	40023800 	.word	0x40023800
 8002568:	00f42400 	.word	0x00f42400
 800256c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_GetSysClockFreq+0x458>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	2200      	movs	r2, #0
 8002578:	4618      	mov	r0, r3
 800257a:	4611      	mov	r1, r2
 800257c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002580:	653b      	str	r3, [r7, #80]	; 0x50
 8002582:	2300      	movs	r3, #0
 8002584:	657b      	str	r3, [r7, #84]	; 0x54
 8002586:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800258a:	4642      	mov	r2, r8
 800258c:	464b      	mov	r3, r9
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	0159      	lsls	r1, r3, #5
 8002598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259c:	0150      	lsls	r0, r2, #5
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4641      	mov	r1, r8
 80025a4:	1a51      	subs	r1, r2, r1
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	4649      	mov	r1, r9
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025bc:	4659      	mov	r1, fp
 80025be:	018b      	lsls	r3, r1, #6
 80025c0:	4651      	mov	r1, sl
 80025c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c6:	4651      	mov	r1, sl
 80025c8:	018a      	lsls	r2, r1, #6
 80025ca:	4651      	mov	r1, sl
 80025cc:	1a54      	subs	r4, r2, r1
 80025ce:	4659      	mov	r1, fp
 80025d0:	eb63 0501 	sbc.w	r5, r3, r1
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	00eb      	lsls	r3, r5, #3
 80025de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e2:	00e2      	lsls	r2, r4, #3
 80025e4:	4614      	mov	r4, r2
 80025e6:	461d      	mov	r5, r3
 80025e8:	4643      	mov	r3, r8
 80025ea:	18e3      	adds	r3, r4, r3
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	464b      	mov	r3, r9
 80025f0:	eb45 0303 	adc.w	r3, r5, r3
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	2200      	movs	r2, #0
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
 800261c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800261e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002622:	f7fe fae1 	bl	8000be8 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCC_GetSysClockFreq+0x458>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0f1b      	lsrs	r3, r3, #28
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800263e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002642:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800264e:	e003      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002656:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800265c:	4618      	mov	r0, r3
 800265e:	37b8      	adds	r7, #184	; 0xb8
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	00f42400 	.word	0x00f42400

08002670 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e28d      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8083 	beq.w	8002796 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	d019      	beq.n	80026d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800269c:	4b91      	ldr	r3, [pc, #580]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026a8:	4b8e      	ldr	r3, [pc, #568]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b8b      	ldr	r3, [pc, #556]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b84      	ldr	r3, [pc, #528]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x124>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e25a      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x90>
 80026f2:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7b      	ldr	r2, [pc, #492]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xcc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0xb4>
 800270a:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a75      	ldr	r2, [pc, #468]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a72      	ldr	r2, [pc, #456]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xcc>
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff f8e6 	bl	8001914 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff f8e2 	bl	8001914 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e21f      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b61      	ldr	r3, [pc, #388]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xdc>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff f8d2 	bl	8001914 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f8ce 	bl	8001914 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e20b      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x104>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d06f      	beq.n	8002882 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027a2:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d017      	beq.n	80027de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ae:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d11c      	bne.n	800280c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x186>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1d3      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4937      	ldr	r1, [pc, #220]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	e03a      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <HAL_RCC_OscConfig+0x278>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7ff f87b 	bl	8001914 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7ff f877 	bl	8001914 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1b4      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4925      	ldr	r1, [pc, #148]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_OscConfig+0x278>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff f85a 	bl	8001914 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002864:	f7ff f856 	bl	8001914 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e193      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d036      	beq.n	80028fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_RCC_OscConfig+0x27c>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff f83a 	bl	8001914 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a4:	f7ff f836 	bl	8001914 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e173      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_OscConfig+0x274>)
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x234>
 80028c2:	e01b      	b.n	80028fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_OscConfig+0x27c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7ff f823 	bl	8001914 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	e00e      	b.n	80028f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d2:	f7ff f81f 	bl	8001914 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d907      	bls.n	80028f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e15c      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	42470000 	.word	0x42470000
 80028ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	4b8a      	ldr	r3, [pc, #552]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ea      	bne.n	80028d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8097 	beq.w	8002a38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b83      	ldr	r3, [pc, #524]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b7f      	ldr	r3, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a7e      	ldr	r2, [pc, #504]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b79      	ldr	r3, [pc, #484]	; (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe ffdf 	bl	8001914 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe ffdb 	bl	8001914 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e118      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b6c      	ldr	r3, [pc, #432]	; (8002b20 <HAL_RCC_OscConfig+0x4b0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x31e>
 8002980:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x358>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x340>
 8002996:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a60      	ldr	r2, [pc, #384]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0x358>
 80029b0:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a59      	ldr	r2, [pc, #356]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a56      	ldr	r2, [pc, #344]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	f023 0304 	bic.w	r3, r3, #4
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe ffa0 	bl	8001914 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7fe ff9c 	bl	8001914 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0d7      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ee:	4b4b      	ldr	r3, [pc, #300]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ee      	beq.n	80029d8 <HAL_RCC_OscConfig+0x368>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe ff8a 	bl	8001914 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a04:	f7fe ff86 	bl	8001914 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0c1      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a1a:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ee      	bne.n	8002a04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	4a3a      	ldr	r2, [pc, #232]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80ad 	beq.w	8002b9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d060      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d145      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <HAL_RCC_OscConfig+0x4b4>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff5a 	bl	8001914 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe ff56 	bl	8001914 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e093      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4b4>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe ff2b 	bl	8001914 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe ff27 	bl	8001914 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e064      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x452>
 8002ae0:	e05c      	b.n	8002b9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x4b4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe ff14 	bl	8001914 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe ff10 	bl	8001914 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e04d      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x480>
 8002b0e:	e045      	b.n	8002b9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e040      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_RCC_OscConfig+0x538>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d030      	beq.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d129      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d122      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d119      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d10f      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07b      	b.n	8002cb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bce:	d009      	beq.n	8002be4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
 8002bd6:	e005      	b.n	8002be4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe fb9e 	bl	8001340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	ea42 0103 	orr.w	r1, r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0104 	and.w	r1, r3, #4
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f003 0210 	and.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b088      	sub	sp, #32
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_SPI_Transmit+0x22>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e12d      	b.n	8002f3c <HAL_SPI_Transmit+0x27e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ce8:	f7fe fe14 	bl	8001914 <HAL_GetTick>
 8002cec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d02:	e116      	b.n	8002f32 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_Transmit+0x52>
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d14:	e10d      	b.n	8002f32 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5c:	d10f      	bne.n	8002d7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d007      	beq.n	8002d9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da4:	d14f      	bne.n	8002e46 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Transmit+0xf6>
 8002dae:	8afb      	ldrh	r3, [r7, #22]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d142      	bne.n	8002e3a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	1c9a      	adds	r2, r3, #2
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dd8:	e02f      	b.n	8002e3a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d112      	bne.n	8002e0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e0c:	e015      	b.n	8002e3a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e0e:	f7fe fd81 	bl	8001914 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d803      	bhi.n	8002e26 <HAL_SPI_Transmit+0x168>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e24:	d102      	bne.n	8002e2c <HAL_SPI_Transmit+0x16e>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e38:	e07b      	b.n	8002f32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1ca      	bne.n	8002dda <HAL_SPI_Transmit+0x11c>
 8002e44:	e050      	b.n	8002ee8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_Transmit+0x196>
 8002e4e:	8afb      	ldrh	r3, [r7, #22]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d144      	bne.n	8002ede <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e7a:	e030      	b.n	8002ede <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d113      	bne.n	8002eb2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eb0:	e015      	b.n	8002ede <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb2:	f7fe fd2f 	bl	8001914 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d803      	bhi.n	8002eca <HAL_SPI_Transmit+0x20c>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec8:	d102      	bne.n	8002ed0 <HAL_SPI_Transmit+0x212>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002edc:	e029      	b.n	8002f32 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1c9      	bne.n	8002e7c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	6839      	ldr	r1, [r7, #0]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fbdf 	bl	80036b0 <SPI_EndRxTxTransaction>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10a      	bne.n	8002f1c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e003      	b.n	8002f32 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
 8002f66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f68:	e0fb      	b.n	8003162 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f72:	d112      	bne.n	8002f9a <HAL_SPI_Receive+0x56>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10e      	bne.n	8002f9a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f84:	88fa      	ldrh	r2, [r7, #6]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f8ef 	bl	8003174 <HAL_SPI_TransmitReceive>
 8002f96:	4603      	mov	r3, r0
 8002f98:	e0e8      	b.n	800316c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_SPI_Receive+0x64>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0e1      	b.n	800316c <HAL_SPI_Receive+0x228>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb0:	f7fe fcb0 	bl	8001914 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Receive+0x7e>
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fc6:	e0cc      	b.n	8003162 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300e:	d10f      	bne.n	8003030 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d007      	beq.n	800304e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d16a      	bne.n	800312c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003056:	e032      	b.n	80030be <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d115      	bne.n	8003092 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f103 020c 	add.w	r2, r3, #12
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003090:	e015      	b.n	80030be <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003092:	f7fe fc3f 	bl	8001914 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d803      	bhi.n	80030aa <HAL_SPI_Receive+0x166>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a8:	d102      	bne.n	80030b0 <HAL_SPI_Receive+0x16c>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030bc:	e051      	b.n	8003162 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1c7      	bne.n	8003058 <HAL_SPI_Receive+0x114>
 80030c8:	e035      	b.n	8003136 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d113      	bne.n	8003100 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	b292      	uxth	r2, r2
 80030e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	1c9a      	adds	r2, r3, #2
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030fe:	e015      	b.n	800312c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003100:	f7fe fc08 	bl	8001914 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d803      	bhi.n	8003118 <HAL_SPI_Receive+0x1d4>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003116:	d102      	bne.n	800311e <HAL_SPI_Receive+0x1da>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800312a:	e01a      	b.n	8003162 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1c9      	bne.n	80030ca <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa52 	bl	80035e4 <SPI_EndRxTransaction>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
 8003158:	e003      	b.n	8003162 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08c      	sub	sp, #48	; 0x30
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_SPI_TransmitReceive+0x26>
 8003196:	2302      	movs	r3, #2
 8003198:	e198      	b.n	80034cc <HAL_SPI_TransmitReceive+0x358>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031a2:	f7fe fbb7 	bl	8001914 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d00f      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x70>
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ca:	d107      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <HAL_SPI_TransmitReceive+0x68>
 80031d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d003      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031e2:	e16d      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x82>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x82>
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031fc:	e160      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b04      	cmp	r3, #4
 8003208:	d003      	beq.n	8003212 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d007      	beq.n	8003266 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d17c      	bne.n	800336a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_SPI_TransmitReceive+0x10a>
 8003278:	8b7b      	ldrh	r3, [r7, #26]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d16a      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	881a      	ldrh	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	e057      	b.n	8003354 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d11b      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x176>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d016      	beq.n	80032ea <HAL_SPI_TransmitReceive+0x176>
 80032bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d113      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	881a      	ldrh	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d119      	bne.n	800332c <HAL_SPI_TransmitReceive+0x1b8>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d014      	beq.n	800332c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	b292      	uxth	r2, r2
 800330e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800332c:	f7fe faf2 	bl	8001914 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003338:	429a      	cmp	r2, r3
 800333a:	d80b      	bhi.n	8003354 <HAL_SPI_TransmitReceive+0x1e0>
 800333c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003342:	d007      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003352:	e0b5      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1a2      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x130>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d19d      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x130>
 8003368:	e080      	b.n	800346c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x204>
 8003372:	8b7b      	ldrh	r3, [r7, #26]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d16f      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339e:	e05b      	b.n	8003458 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d11c      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x274>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d017      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x274>
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d114      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d119      	bne.n	800342a <HAL_SPI_TransmitReceive+0x2b6>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d014      	beq.n	800342a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003426:	2301      	movs	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800342a:	f7fe fa73 	bl	8001914 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003436:	429a      	cmp	r2, r3
 8003438:	d803      	bhi.n	8003442 <HAL_SPI_TransmitReceive+0x2ce>
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003440:	d102      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x2d4>
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003456:	e033      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d19e      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x22c>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d199      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f91d 	bl	80036b0 <SPI_EndRxTxTransaction>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003488:	e01a      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b6:	e003      	b.n	80034c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3730      	adds	r7, #48	; 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034e4:	f7fe fa16 	bl	8001914 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034f4:	f7fe fa0e 	bl	8001914 <HAL_GetTick>
 80034f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	0d1b      	lsrs	r3, r3, #20
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350a:	e054      	b.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003512:	d050      	beq.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003514:	f7fe f9fe 	bl	8001914 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	d902      	bls.n	800352a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d13d      	bne.n	80035a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003542:	d111      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	d004      	beq.n	8003558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003556:	d107      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003570:	d10f      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e017      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d19b      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000050 	.word	0x20000050

080035e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f8:	d111      	bne.n	800361e <SPI_EndRxTransaction+0x3a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d004      	beq.n	800360e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360c:	d107      	bne.n	800361e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003626:	d12a      	bne.n	800367e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d012      	beq.n	8003658 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff ff49 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02d      	beq.n	80036a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e026      	b.n	80036a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	2101      	movs	r1, #1
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff ff36 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01a      	beq.n	80036a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e013      	b.n	80036a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2200      	movs	r2, #0
 8003686:	2101      	movs	r1, #1
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff ff23 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e000      	b.n	80036a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2201      	movs	r2, #1
 80036c4:	2102      	movs	r1, #2
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff ff04 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d007      	beq.n	80036e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e032      	b.n	8003748 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <SPI_EndRxTxTransaction+0xa0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <SPI_EndRxTxTransaction+0xa4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	0d5b      	lsrs	r3, r3, #21
 80036ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003700:	d112      	bne.n	8003728 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff fee1 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e00f      	b.n	8003748 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3b01      	subs	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d0f2      	beq.n	8003728 <SPI_EndRxTxTransaction+0x78>
 8003742:	e000      	b.n	8003746 <SPI_EndRxTxTransaction+0x96>
        break;
 8003744:	bf00      	nop
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000050 	.word	0x20000050
 8003754:	165e9f81 	.word	0x165e9f81

08003758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e041      	b.n	80037ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd ff92 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 f82e 	bl	80037f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a46      	ldr	r2, [pc, #280]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a43      	ldr	r2, [pc, #268]	; (8003928 <TIM_Base_SetConfig+0x130>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a42      	ldr	r2, [pc, #264]	; (800392c <TIM_Base_SetConfig+0x134>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a41      	ldr	r2, [pc, #260]	; (8003930 <TIM_Base_SetConfig+0x138>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0x40>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a40      	ldr	r2, [pc, #256]	; (8003934 <TIM_Base_SetConfig+0x13c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a35      	ldr	r2, [pc, #212]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02b      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d027      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a32      	ldr	r2, [pc, #200]	; (8003928 <TIM_Base_SetConfig+0x130>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d023      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <TIM_Base_SetConfig+0x134>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01f      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a30      	ldr	r2, [pc, #192]	; (8003930 <TIM_Base_SetConfig+0x138>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01b      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2f      	ldr	r2, [pc, #188]	; (8003934 <TIM_Base_SetConfig+0x13c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d017      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2e      	ldr	r2, [pc, #184]	; (8003938 <TIM_Base_SetConfig+0x140>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2d      	ldr	r2, [pc, #180]	; (800393c <TIM_Base_SetConfig+0x144>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00f      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <TIM_Base_SetConfig+0x148>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00b      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a2b      	ldr	r2, [pc, #172]	; (8003944 <TIM_Base_SetConfig+0x14c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <TIM_Base_SetConfig+0x150>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <TIM_Base_SetConfig+0x154>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d108      	bne.n	80038bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a10      	ldr	r2, [pc, #64]	; (8003924 <TIM_Base_SetConfig+0x12c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0xf8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <TIM_Base_SetConfig+0x13c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d103      	bne.n	80038f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	611a      	str	r2, [r3, #16]
  }
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40010000 	.word	0x40010000
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40000c00 	.word	0x40000c00
 8003934:	40010400 	.word	0x40010400
 8003938:	40014000 	.word	0x40014000
 800393c:	40014400 	.word	0x40014400
 8003940:	40014800 	.word	0x40014800
 8003944:	40001800 	.word	0x40001800
 8003948:	40001c00 	.word	0x40001c00
 800394c:	40002000 	.word	0x40002000

08003950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003964:	2302      	movs	r3, #2
 8003966:	e05a      	b.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d01d      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10c      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40010400 	.word	0x40010400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40001800 	.word	0x40001800

08003a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e042      	b.n	8003ae0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fd fe66 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f973 	bl	8003d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695a      	ldr	r2, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d175      	bne.n	8003bf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_UART_Transmit+0x2c>
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e06e      	b.n	8003bf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2221      	movs	r2, #33	; 0x21
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b26:	f7fd fef5 	bl	8001914 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	88fa      	ldrh	r2, [r7, #6]
 8003b36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b40:	d108      	bne.n	8003b54 <HAL_UART_Transmit+0x6c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	e003      	b.n	8003b5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b5c:	e02e      	b.n	8003bbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f848 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e03a      	b.n	8003bf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3302      	adds	r3, #2
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e007      	b.n	8003bae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	3301      	adds	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1cb      	bne.n	8003b5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2140      	movs	r1, #64	; 0x40
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f814 	bl	8003bfe <UART_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e006      	b.n	8003bf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0e:	e03b      	b.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c16:	d037      	beq.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7fd fe7c 	bl	8001914 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e03a      	b.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d023      	beq.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d020      	beq.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d01d      	beq.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d116      	bne.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f81d 	bl	8003cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e00f      	b.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d0b4      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b095      	sub	sp, #84	; 0x54
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cd8:	643a      	str	r2, [r7, #64]	; 0x40
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e5      	bne.n	8003cb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3314      	adds	r3, #20
 8003cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d119      	bne.n	8003d5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f023 0310 	bic.w	r3, r3, #16
 8003d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d48:	61ba      	str	r2, [r7, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	613b      	str	r3, [r7, #16]
   return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e5      	bne.n	8003d28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d6a:	bf00      	nop
 8003d6c:	3754      	adds	r7, #84	; 0x54
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d7c:	b0c0      	sub	sp, #256	; 0x100
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d94:	68d9      	ldr	r1, [r3, #12]
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	ea40 0301 	orr.w	r3, r0, r1
 8003da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd0:	f021 010c 	bic.w	r1, r1, #12
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dde:	430b      	orrs	r3, r1
 8003de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df2:	6999      	ldr	r1, [r3, #24]
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	ea40 0301 	orr.w	r3, r0, r1
 8003dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b8f      	ldr	r3, [pc, #572]	; (8004044 <UART_SetConfig+0x2cc>)
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d005      	beq.n	8003e18 <UART_SetConfig+0xa0>
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4b8d      	ldr	r3, [pc, #564]	; (8004048 <UART_SetConfig+0x2d0>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d104      	bne.n	8003e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e18:	f7fe f9e6 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8003e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e20:	e003      	b.n	8003e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e22:	f7fe f9cd 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8003e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e34:	f040 810c 	bne.w	8004050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	1891      	adds	r1, r2, r2
 8003e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e52:	415b      	adcs	r3, r3
 8003e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	eb12 0801 	adds.w	r8, r2, r1
 8003e60:	4629      	mov	r1, r5
 8003e62:	eb43 0901 	adc.w	r9, r3, r1
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e7a:	4690      	mov	r8, r2
 8003e7c:	4699      	mov	r9, r3
 8003e7e:	4623      	mov	r3, r4
 8003e80:	eb18 0303 	adds.w	r3, r8, r3
 8003e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e88:	462b      	mov	r3, r5
 8003e8a:	eb49 0303 	adc.w	r3, r9, r3
 8003e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	18db      	adds	r3, r3, r3
 8003eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8003eac:	4613      	mov	r3, r2
 8003eae:	eb42 0303 	adc.w	r3, r2, r3
 8003eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ebc:	f7fc fe94 	bl	8000be8 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4b61      	ldr	r3, [pc, #388]	; (800404c <UART_SetConfig+0x2d4>)
 8003ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	011c      	lsls	r4, r3, #4
 8003ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	1891      	adds	r1, r2, r2
 8003ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ee8:	415b      	adcs	r3, r3
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f10:	4692      	mov	sl, r2
 8003f12:	469b      	mov	fp, r3
 8003f14:	4643      	mov	r3, r8
 8003f16:	eb1a 0303 	adds.w	r3, sl, r3
 8003f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	eb4b 0303 	adc.w	r3, fp, r3
 8003f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	18db      	adds	r3, r3, r3
 8003f40:	643b      	str	r3, [r7, #64]	; 0x40
 8003f42:	4613      	mov	r3, r2
 8003f44:	eb42 0303 	adc.w	r3, r2, r3
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f52:	f7fc fe49 	bl	8000be8 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	; (800404c <UART_SetConfig+0x2d4>)
 8003f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2264      	movs	r2, #100	; 0x64
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <UART_SetConfig+0x2d4>)
 8003f74:	fba3 2302 	umull	r2, r3, r3, r2
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f80:	441c      	add	r4, r3
 8003f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	1851      	adds	r1, r2, r1
 8003fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8003faa:	4649      	mov	r1, r9
 8003fac:	414b      	adcs	r3, r1
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	00cb      	lsls	r3, r1, #3
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	00ca      	lsls	r2, r1, #3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd8:	464b      	mov	r3, r9
 8003fda:	460a      	mov	r2, r1
 8003fdc:	eb42 0303 	adc.w	r3, r2, r3
 8003fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	18db      	adds	r3, r3, r3
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffe:	4613      	mov	r3, r2
 8004000:	eb42 0303 	adc.w	r3, r2, r3
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800400a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800400e:	f7fc fdeb 	bl	8000be8 <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <UART_SetConfig+0x2d4>)
 8004018:	fba3 1302 	umull	r1, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	2164      	movs	r1, #100	; 0x64
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	3332      	adds	r3, #50	; 0x32
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <UART_SetConfig+0x2d4>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	f003 0207 	and.w	r2, r3, #7
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4422      	add	r2, r4
 800403e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004040:	e106      	b.n	8004250 <UART_SetConfig+0x4d8>
 8004042:	bf00      	nop
 8004044:	40011000 	.word	0x40011000
 8004048:	40011400 	.word	0x40011400
 800404c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004054:	2200      	movs	r2, #0
 8004056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800405a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800405e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004062:	4642      	mov	r2, r8
 8004064:	464b      	mov	r3, r9
 8004066:	1891      	adds	r1, r2, r2
 8004068:	6239      	str	r1, [r7, #32]
 800406a:	415b      	adcs	r3, r3
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004072:	4641      	mov	r1, r8
 8004074:	1854      	adds	r4, r2, r1
 8004076:	4649      	mov	r1, r9
 8004078:	eb43 0501 	adc.w	r5, r3, r1
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	00eb      	lsls	r3, r5, #3
 8004086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800408a:	00e2      	lsls	r2, r4, #3
 800408c:	4614      	mov	r4, r2
 800408e:	461d      	mov	r5, r3
 8004090:	4643      	mov	r3, r8
 8004092:	18e3      	adds	r3, r4, r3
 8004094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004098:	464b      	mov	r3, r9
 800409a:	eb45 0303 	adc.w	r3, r5, r3
 800409e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040be:	4629      	mov	r1, r5
 80040c0:	008b      	lsls	r3, r1, #2
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c8:	4621      	mov	r1, r4
 80040ca:	008a      	lsls	r2, r1, #2
 80040cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040d0:	f7fc fd8a 	bl	8000be8 <__aeabi_uldivmod>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4b60      	ldr	r3, [pc, #384]	; (800425c <UART_SetConfig+0x4e4>)
 80040da:	fba3 2302 	umull	r2, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	011c      	lsls	r4, r3, #4
 80040e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040f4:	4642      	mov	r2, r8
 80040f6:	464b      	mov	r3, r9
 80040f8:	1891      	adds	r1, r2, r2
 80040fa:	61b9      	str	r1, [r7, #24]
 80040fc:	415b      	adcs	r3, r3
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004104:	4641      	mov	r1, r8
 8004106:	1851      	adds	r1, r2, r1
 8004108:	6139      	str	r1, [r7, #16]
 800410a:	4649      	mov	r1, r9
 800410c:	414b      	adcs	r3, r1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800411c:	4659      	mov	r1, fp
 800411e:	00cb      	lsls	r3, r1, #3
 8004120:	4651      	mov	r1, sl
 8004122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004126:	4651      	mov	r1, sl
 8004128:	00ca      	lsls	r2, r1, #3
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	4603      	mov	r3, r0
 8004130:	4642      	mov	r2, r8
 8004132:	189b      	adds	r3, r3, r2
 8004134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004138:	464b      	mov	r3, r9
 800413a:	460a      	mov	r2, r1
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	67bb      	str	r3, [r7, #120]	; 0x78
 800414e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800415c:	4649      	mov	r1, r9
 800415e:	008b      	lsls	r3, r1, #2
 8004160:	4641      	mov	r1, r8
 8004162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004166:	4641      	mov	r1, r8
 8004168:	008a      	lsls	r2, r1, #2
 800416a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800416e:	f7fc fd3b 	bl	8000be8 <__aeabi_uldivmod>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4611      	mov	r1, r2
 8004178:	4b38      	ldr	r3, [pc, #224]	; (800425c <UART_SetConfig+0x4e4>)
 800417a:	fba3 2301 	umull	r2, r3, r3, r1
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2264      	movs	r2, #100	; 0x64
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	1acb      	subs	r3, r1, r3
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	3332      	adds	r3, #50	; 0x32
 800418c:	4a33      	ldr	r2, [pc, #204]	; (800425c <UART_SetConfig+0x4e4>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004198:	441c      	add	r4, r3
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	673b      	str	r3, [r7, #112]	; 0x70
 80041a2:	677a      	str	r2, [r7, #116]	; 0x74
 80041a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	1891      	adds	r1, r2, r2
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	415b      	adcs	r3, r3
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b8:	4641      	mov	r1, r8
 80041ba:	1851      	adds	r1, r2, r1
 80041bc:	6039      	str	r1, [r7, #0]
 80041be:	4649      	mov	r1, r9
 80041c0:	414b      	adcs	r3, r1
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d0:	4659      	mov	r1, fp
 80041d2:	00cb      	lsls	r3, r1, #3
 80041d4:	4651      	mov	r1, sl
 80041d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041da:	4651      	mov	r1, sl
 80041dc:	00ca      	lsls	r2, r1, #3
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	4603      	mov	r3, r0
 80041e4:	4642      	mov	r2, r8
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80041ea:	464b      	mov	r3, r9
 80041ec:	460a      	mov	r2, r1
 80041ee:	eb42 0303 	adc.w	r3, r2, r3
 80041f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	663b      	str	r3, [r7, #96]	; 0x60
 80041fe:	667a      	str	r2, [r7, #100]	; 0x64
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800420c:	4649      	mov	r1, r9
 800420e:	008b      	lsls	r3, r1, #2
 8004210:	4641      	mov	r1, r8
 8004212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004216:	4641      	mov	r1, r8
 8004218:	008a      	lsls	r2, r1, #2
 800421a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800421e:	f7fc fce3 	bl	8000be8 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <UART_SetConfig+0x4e4>)
 8004228:	fba3 1302 	umull	r1, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	2164      	movs	r1, #100	; 0x64
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	3332      	adds	r3, #50	; 0x32
 800423a:	4a08      	ldr	r2, [pc, #32]	; (800425c <UART_SetConfig+0x4e4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 020f 	and.w	r2, r3, #15
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4422      	add	r2, r4
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004256:	46bd      	mov	sp, r7
 8004258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800425c:	51eb851f 	.word	0x51eb851f

08004260 <NRF24_DelayMicroSeconds>:
//static SPI_HandleTypeDef nrf24_hspi;
//Debugging UART handle

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <NRF24_DelayMicroSeconds+0x3c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0b      	ldr	r2, [pc, #44]	; (80042a0 <NRF24_DelayMicroSeconds+0x40>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0c9a      	lsrs	r2, r3, #18
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	60fb      	str	r3, [r7, #12]
	while (uSecVar--)
 8004280:	bf00      	nop
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1fa      	bne.n	8004282 <NRF24_DelayMicroSeconds+0x22>
		;
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000050 	.word	0x20000050
 80042a0:	165e9f81 	.word	0x165e9f81

080042a4 <NRF24_CSN>:

//1. Chip Select function
void NRF24_CSN(int state) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	if (state)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <NRF24_CSN+0x1a>
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80042b2:	2201      	movs	r2, #1
 80042b4:	2120      	movs	r1, #32
 80042b6:	4806      	ldr	r0, [pc, #24]	; (80042d0 <NRF24_CSN+0x2c>)
 80042b8:	f7fd fe02 	bl	8001ec0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
}
 80042bc:	e004      	b.n	80042c8 <NRF24_CSN+0x24>
		HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80042be:	2200      	movs	r2, #0
 80042c0:	2120      	movs	r1, #32
 80042c2:	4803      	ldr	r0, [pc, #12]	; (80042d0 <NRF24_CSN+0x2c>)
 80042c4:	f7fd fdfc 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40020400 	.word	0x40020400

080042d4 <NRF24_CE>:
//2. Chip Enable
void NRF24_CE(int state) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	if (state)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <NRF24_CE+0x1a>

		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80042e2:	2201      	movs	r2, #1
 80042e4:	2110      	movs	r1, #16
 80042e6:	4806      	ldr	r0, [pc, #24]	; (8004300 <NRF24_CE+0x2c>)
 80042e8:	f7fd fdea 	bl	8001ec0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
}
 80042ec:	e004      	b.n	80042f8 <NRF24_CE+0x24>
		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2110      	movs	r1, #16
 80042f2:	4803      	ldr	r0, [pc, #12]	; (8004300 <NRF24_CE+0x2c>)
 80042f4:	f7fd fde4 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 80042f8:	bf00      	nop
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40020400 	.word	0x40020400

08004304 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_CSN(0);
 800430e:	2000      	movs	r0, #0
 8004310:	f7ff ffc8 	bl	80042a4 <NRF24_CSN>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	b2db      	uxtb	r3, r3
 800431c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 800431e:	f107 010c 	add.w	r1, r7, #12
 8004322:	2364      	movs	r3, #100	; 0x64
 8004324:	2201      	movs	r2, #1
 8004326:	480a      	ldr	r0, [pc, #40]	; (8004350 <NRF24_read_register+0x4c>)
 8004328:	f7fe fcc9 	bl	8002cbe <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, &spiBuf[1], 1, 100);
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	1c59      	adds	r1, r3, #1
 8004332:	2364      	movs	r3, #100	; 0x64
 8004334:	2201      	movs	r2, #1
 8004336:	4806      	ldr	r0, [pc, #24]	; (8004350 <NRF24_read_register+0x4c>)
 8004338:	f7fe fe04 	bl	8002f44 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800433c:	7b7b      	ldrb	r3, [r7, #13]
 800433e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_CSN(1);
 8004340:	2001      	movs	r0, #1
 8004342:	f7ff ffaf 	bl	80042a4 <NRF24_CSN>
	return retData;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000288 	.word	0x20000288

08004354 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
 8004360:	4613      	mov	r3, r2
 8004362:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 8004364:	2000      	movs	r0, #0
 8004366:	f7ff ff9d 	bl	80042a4 <NRF24_CSN>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	b2db      	uxtb	r3, r3
 8004372:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 8004374:	f107 010c 	add.w	r1, r7, #12
 8004378:	2364      	movs	r3, #100	; 0x64
 800437a:	2201      	movs	r2, #1
 800437c:	4808      	ldr	r0, [pc, #32]	; (80043a0 <NRF24_read_registerN+0x4c>)
 800437e:	f7fe fc9e 	bl	8002cbe <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&hspi2, buf, len, 100);
 8004382:	79bb      	ldrb	r3, [r7, #6]
 8004384:	b29a      	uxth	r2, r3
 8004386:	2364      	movs	r3, #100	; 0x64
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	4805      	ldr	r0, [pc, #20]	; (80043a0 <NRF24_read_registerN+0x4c>)
 800438c:	f7fe fdda 	bl	8002f44 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_CSN(1);
 8004390:	2001      	movs	r0, #1
 8004392:	f7ff ff87 	bl	80042a4 <NRF24_CSN>
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000288 	.word	0x20000288

080043a4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	460a      	mov	r2, r1
 80043ae:	71fb      	strb	r3, [r7, #7]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7ff ff75 	bl	80042a4 <NRF24_CSN>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	f043 0320 	orr.w	r3, r3, #32
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80043c4:	79bb      	ldrb	r3, [r7, #6]
 80043c6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, spiBuf, 2, 100);
 80043c8:	f107 010c 	add.w	r1, r7, #12
 80043cc:	2364      	movs	r3, #100	; 0x64
 80043ce:	2202      	movs	r2, #2
 80043d0:	4804      	ldr	r0, [pc, #16]	; (80043e4 <NRF24_write_register+0x40>)
 80043d2:	f7fe fc74 	bl	8002cbe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 80043d6:	2001      	movs	r0, #1
 80043d8:	f7ff ff64 	bl	80042a4 <NRF24_CSN>
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000288 	.word	0x20000288

080043e8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	6039      	str	r1, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
 80043f4:	4613      	mov	r3, r2
 80043f6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_CSN(0);
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff ff53 	bl	80042a4 <NRF24_CSN>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	f043 0320 	orr.w	r3, r3, #32
 8004404:	b2db      	uxtb	r3, r3
 8004406:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi2, spiBuf, 1, 100);
 8004408:	f107 010c 	add.w	r1, r7, #12
 800440c:	2364      	movs	r3, #100	; 0x64
 800440e:	2201      	movs	r2, #1
 8004410:	4808      	ldr	r0, [pc, #32]	; (8004434 <NRF24_write_registerN+0x4c>)
 8004412:	f7fe fc54 	bl	8002cbe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) buf, len, 100);
 8004416:	79bb      	ldrb	r3, [r7, #6]
 8004418:	b29a      	uxth	r2, r3
 800441a:	2364      	movs	r3, #100	; 0x64
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4805      	ldr	r0, [pc, #20]	; (8004434 <NRF24_write_registerN+0x4c>)
 8004420:	f7fe fc4d 	bl	8002cbe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 8004424:	2001      	movs	r0, #1
 8004426:	f7ff ff3d 	bl	80042a4 <NRF24_CSN>
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000288 	.word	0x20000288

08004438 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void *buf, uint8_t len) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_CSN(0);
 8004444:	2000      	movs	r0, #0
 8004446:	f7ff ff2d 	bl	80042a4 <NRF24_CSN>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800444a:	23a0      	movs	r3, #160	; 0xa0
 800444c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi2, &wrPayloadCmd, 1, 100);
 800444e:	f107 010f 	add.w	r1, r7, #15
 8004452:	2364      	movs	r3, #100	; 0x64
 8004454:	2201      	movs	r2, #1
 8004456:	4808      	ldr	r0, [pc, #32]	; (8004478 <NRF24_write_payload+0x40>)
 8004458:	f7fe fc31 	bl	8002cbe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) buf, len, 100);
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	b29a      	uxth	r2, r3
 8004460:	2364      	movs	r3, #100	; 0x64
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4804      	ldr	r0, [pc, #16]	; (8004478 <NRF24_write_payload+0x40>)
 8004466:	f7fe fc2a 	bl	8002cbe <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_CSN(1);
 800446a:	2001      	movs	r0, #1
 800446c:	f7ff ff1a 	bl	80042a4 <NRF24_CSN>
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000288 	.word	0x20000288

0800447c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void *buf, uint8_t len) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8004488:	f000 f9ca 	bl	8004820 <NRF24_getPayloadSize>
 800448c:	4603      	mov	r3, r0
 800448e:	461a      	mov	r2, r3
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	4293      	cmp	r3, r2
 8004494:	d303      	bcc.n	800449e <NRF24_read_payload+0x22>
 8004496:	f000 f9c3 	bl	8004820 <NRF24_getPayloadSize>
 800449a:	4603      	mov	r3, r0
 800449c:	e000      	b.n	80044a0 <NRF24_read_payload+0x24>
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_CSN(0);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7ff fefe 	bl	80042a4 <NRF24_CSN>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80044a8:	2361      	movs	r3, #97	; 0x61
 80044aa:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, &cmdRxBuf, 1, 100);
 80044ac:	f107 010e 	add.w	r1, r7, #14
 80044b0:	2364      	movs	r3, #100	; 0x64
 80044b2:	2201      	movs	r2, #1
 80044b4:	4808      	ldr	r0, [pc, #32]	; (80044d8 <NRF24_read_payload+0x5c>)
 80044b6:	f7fe fc02 	bl	8002cbe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buf, data_len, 100);
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	2364      	movs	r3, #100	; 0x64
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4805      	ldr	r0, [pc, #20]	; (80044d8 <NRF24_read_payload+0x5c>)
 80044c4:	f7fe fd3e 	bl	8002f44 <HAL_SPI_Receive>
	NRF24_CSN(1);
 80044c8:	2001      	movs	r0, #1
 80044ca:	f7ff feeb 	bl	80042a4 <NRF24_CSN>
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000288 	.word	0x20000288

080044dc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80044e0:	21ff      	movs	r1, #255	; 0xff
 80044e2:	20e1      	movs	r0, #225	; 0xe1
 80044e4:	f7ff ff5e 	bl	80043a4 <NRF24_write_register>
}
 80044e8:	bf00      	nop
 80044ea:	bd80      	pop	{r7, pc}

080044ec <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80044f0:	21ff      	movs	r1, #255	; 0xff
 80044f2:	20e2      	movs	r0, #226	; 0xe2
 80044f4:	f7ff ff56 	bl	80043a4 <NRF24_write_register>
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}

080044fc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8004502:	2007      	movs	r0, #7
 8004504:	f7ff fefe 	bl	8004304 <NRF24_read_register>
 8004508:	4603      	mov	r3, r0
 800450a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800450c:	79fb      	ldrb	r3, [r7, #7]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <NRF24_Init>:

//12. Begin function
void NRF24_Init(void) {
 8004516:	b580      	push	{r7, lr}
 8004518:	af00      	add	r7, sp, #0

	NRF24_SoftwareReset();
 800451a:	f000 fe17 	bl	800514c <NRF24_SoftwareReset>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800451e:	210f      	movs	r1, #15
 8004520:	200f      	movs	r0, #15
 8004522:	f000 f935 	bl	8004790 <NRF24_setRetries>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_250KBPS);	//RF24_250KBPS RF24_1MBPS RF24_2MBPS
 8004526:	2002      	movs	r0, #2
 8004528:	f000 fa54 	bl	80049d4 <NRF24_setDataRate>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m18dB); //RF24_PA_m18dB  RF24_PA_m18dB RF24_PA_m12dB
 800452c:	2000      	movs	r0, #0
 800452e:	f000 fa18 	bl	8004962 <NRF24_setPALevel>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8004532:	2002      	movs	r0, #2
 8004534:	f000 fa94 	bl	8004a60 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8004538:	f000 f9e6 	bl	8004908 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800453c:	2020      	movs	r0, #32
 800453e:	f000 f957 	bl	80047f0 <NRF24_setPayloadSize>
	//Reset status register
	NRF24_resetStatus();
 8004542:	f000 fb80 	bl	8004c46 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8004546:	204c      	movs	r0, #76	; 0x4c
 8004548:	f000 f93d 	bl	80047c6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800454c:	f7ff ffc6 	bl	80044dc <NRF24_flush_tx>
	NRF24_flush_rx();
 8004550:	f7ff ffcc 	bl	80044ec <NRF24_flush_rx>
	NRF24_powerDown();
 8004554:	f000 faac 	bl	8004ab0 <NRF24_powerDown>
	printRadioSettings();
 8004558:	f000 fb98 	bl	8004c8c <printRadioSettings>
}
 800455c:	bf00      	nop
 800455e:	bd80      	pop	{r7, pc}

08004560 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 8004564:	2000      	movs	r0, #0
 8004566:	f7ff fecd 	bl	8004304 <NRF24_read_register>
 800456a:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 800456c:	f043 0303 	orr.w	r3, r3, #3
 8004570:	b2db      	uxtb	r3, r3
 8004572:	4619      	mov	r1, r3
 8004574:	2000      	movs	r0, #0
 8004576:	f7ff ff15 	bl	80043a4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address)
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <NRF24_startListening+0x48>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	4313      	orrs	r3, r2
 8004582:	d004      	beq.n	800458e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0,
 8004584:	2205      	movs	r2, #5
 8004586:	4908      	ldr	r1, [pc, #32]	; (80045a8 <NRF24_startListening+0x48>)
 8004588:	200a      	movs	r0, #10
 800458a:	f7ff ff2d 	bl	80043e8 <NRF24_write_registerN>
				(uint8_t*) (&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 800458e:	f7ff ffa5 	bl	80044dc <NRF24_flush_tx>
	NRF24_flush_rx();
 8004592:	f7ff ffab 	bl	80044ec <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_CE(1);
 8004596:	2001      	movs	r0, #1
 8004598:	f7ff fe9c 	bl	80042d4 <NRF24_CE>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 800459c:	2096      	movs	r0, #150	; 0x96
 800459e:	f7ff fe5f 	bl	8004260 <NRF24_DelayMicroSeconds>
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000378 	.word	0x20000378

080045ac <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
	NRF24_CE(0);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7ff fe8f 	bl	80042d4 <NRF24_CE>
	NRF24_flush_tx();
 80045b6:	f7ff ff91 	bl	80044dc <NRF24_flush_tx>
	NRF24_flush_rx();
 80045ba:	f7ff ff97 	bl	80044ec <NRF24_flush_rx>
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write(const void *buf, uint8_t len) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80045d0:	f000 fb39 	bl	8004c46 <NRF24_resetStatus>
	NRF24_startWrite(buf, len);
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 faa8 	bl	8004b2e <NRF24_startWrite>
	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 80045de:	f7fd f999 	bl	8001914 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80045e4:	230a      	movs	r3, #10
 80045e6:	613b      	str	r3, [r7, #16]
	do {
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 80045e8:	f107 030d 	add.w	r3, r7, #13
 80045ec:	2201      	movs	r2, #1
 80045ee:	4619      	mov	r1, r3
 80045f0:	2008      	movs	r0, #8
 80045f2:	f7ff feaf 	bl	8004354 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80045f6:	f7ff ff81 	bl	80044fc <NRF24_get_status>
 80045fa:	4603      	mov	r3, r0
 80045fc:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT)))
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	f003 0330 	and.w	r3, r3, #48	; 0x30
			&& (HAL_GetTick() - sent_at < timeout));
 8004604:	2b00      	cmp	r3, #0
 8004606:	d107      	bne.n	8004618 <NRF24_write+0x54>
 8004608:	f7fd f984 	bl	8001914 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8e7      	bhi.n	80045e8 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
	NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 8004618:	f107 010b 	add.w	r1, r7, #11
 800461c:	f107 030c 	add.w	r3, r7, #12
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <NRF24_write+0x90>)
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fadc 	bl	8004be0 <NRF24_whatHappened>
	retStatus = tx_ok;
 8004628:	7b3b      	ldrb	r3, [r7, #12]
 800462a:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available) {
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <NRF24_write+0x90>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <NRF24_write+0x7c>
		ack_payload_length = NRF24_getDynamicPayloadSize();
 8004634:	f000 f900 	bl	8004838 <NRF24_getDynamicPayloadSize>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <NRF24_write+0x94>)
 800463e:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8004640:	f000 f80c 	bl	800465c <NRF24_available>
	NRF24_flush_tx();
 8004644:	f7ff ff4a 	bl	80044dc <NRF24_flush_tx>
	return retStatus;
 8004648:	7bbb      	ldrb	r3, [r7, #14]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000380 	.word	0x20000380
 8004658:	20000381 	.word	0x20000381

0800465c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8004660:	2000      	movs	r0, #0
 8004662:	f000 fa34 	bl	8004ace <NRF24_availablePipe>
 8004666:	4603      	mov	r3, r0
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}

0800466c <NRF24_read>:
//17. Read received data
bool NRF24_read(void *buf, uint8_t len) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload(buf, len);
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fefd 	bl	800447c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8004682:	2017      	movs	r0, #23
 8004684:	f7ff fe3e 	bl	8004304 <NRF24_read_register>
 8004688:	4603      	mov	r3, r0
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8004690:	f7ff ff2c 	bl	80044ec <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8004694:	f000 f8d0 	bl	8004838 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 80046b6:	463b      	mov	r3, r7
 80046b8:	2205      	movs	r2, #5
 80046ba:	4619      	mov	r1, r3
 80046bc:	200a      	movs	r0, #10
 80046be:	f7ff fe93 	bl	80043e8 <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 80046c2:	463b      	mov	r3, r7
 80046c4:	2205      	movs	r2, #5
 80046c6:	4619      	mov	r1, r3
 80046c8:	2010      	movs	r0, #16
 80046ca:	f7ff fe8d 	bl	80043e8 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80046ce:	2320      	movs	r3, #32
 80046d0:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 80046d2:	4b07      	ldr	r3, [pc, #28]	; (80046f0 <NRF24_openWritingPipe+0x44>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	7bfa      	ldrb	r2, [r7, #15]
 80046d8:	4293      	cmp	r3, r2
 80046da:	bf28      	it	cs
 80046dc:	4613      	movcs	r3, r2
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	4619      	mov	r1, r3
 80046e2:	2011      	movs	r0, #17
 80046e4:	f7ff fe5e 	bl	80043a4 <NRF24_write_register>
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000382 	.word	0x20000382

080046f4 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4601      	mov	r1, r0
 80046fc:	e9c7 2300 	strd	r2, r3, [r7]
 8004700:	460b      	mov	r3, r1
 8004702:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 800470a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800470e:	491c      	ldr	r1, [pc, #112]	; (8004780 <NRF24_openReadingPipe+0x8c>)
 8004710:	e9c1 2300 	strd	r2, r3, [r1]

	if (number <= 6) {
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d82d      	bhi.n	8004776 <NRF24_openReadingPipe+0x82>
		if (number < 2) {
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d808      	bhi.n	8004732 <NRF24_openReadingPipe+0x3e>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <NRF24_openReadingPipe+0x90>)
 8004724:	5cd3      	ldrb	r3, [r2, r3]
 8004726:	4639      	mov	r1, r7
 8004728:	2205      	movs	r2, #5
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fe5c 	bl	80043e8 <NRF24_write_registerN>
 8004730:	e007      	b.n	8004742 <NRF24_openReadingPipe+0x4e>
					(uint8_t*) (&address), 5);
		} else {
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	4a13      	ldr	r2, [pc, #76]	; (8004784 <NRF24_openReadingPipe+0x90>)
 8004736:	5cd3      	ldrb	r3, [r2, r3]
 8004738:	4639      	mov	r1, r7
 800473a:	2201      	movs	r2, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fe53 	bl	80043e8 <NRF24_write_registerN>
					(uint8_t*) (&address), 1);
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number], payload_size);
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	4a10      	ldr	r2, [pc, #64]	; (8004788 <NRF24_openReadingPipe+0x94>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	4a10      	ldr	r2, [pc, #64]	; (800478c <NRF24_openReadingPipe+0x98>)
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	4611      	mov	r1, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff fe28 	bl	80043a4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR,
				NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8004754:	2002      	movs	r0, #2
 8004756:	f7ff fdd5 	bl	8004304 <NRF24_read_register>
 800475a:	4603      	mov	r3, r0
 800475c:	b25a      	sxtb	r2, r3
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	b25b      	sxtb	r3, r3
 8004768:	4313      	orrs	r3, r2
 800476a:	b25b      	sxtb	r3, r3
		NRF24_write_register(REG_EN_RXADDR,
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4619      	mov	r1, r3
 8004770:	2002      	movs	r0, #2
 8004772:	f7ff fe17 	bl	80043a4 <NRF24_write_register>
	}

}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000378 	.word	0x20000378
 8004784:	0800824c 	.word	0x0800824c
 8004788:	08008254 	.word	0x08008254
 800478c:	20000382 	.word	0x20000382

08004790 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	460a      	mov	r2, r1
 800479a:	71fb      	strb	r3, [r7, #7]
 800479c:	4613      	mov	r3, r2
 800479e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,
			(delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	b25a      	sxtb	r2, r3
 80047a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	b25b      	sxtb	r3, r3
 80047b0:	4313      	orrs	r3, r2
 80047b2:	b25b      	sxtb	r3, r3
	NRF24_write_register(REG_SETUP_RETR,
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	2004      	movs	r0, #4
 80047ba:	f7ff fdf3 	bl	80043a4 <NRF24_write_register>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80047d0:	237f      	movs	r3, #127	; 0x7f
 80047d2:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	4293      	cmp	r3, r2
 80047da:	bf28      	it	cs
 80047dc:	4613      	movcs	r3, r2
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	4619      	mov	r1, r3
 80047e2:	2005      	movs	r0, #5
 80047e4:	f7ff fdde 	bl	80043a4 <NRF24_write_register>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size) {
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80047fa:	2320      	movs	r3, #32
 80047fc:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 80047fe:	7bfa      	ldrb	r2, [r7, #15]
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	4293      	cmp	r3, r2
 8004804:	bf28      	it	cs
 8004806:	4613      	movcs	r3, r2
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <NRF24_setPayloadSize+0x2c>)
 800480c:	701a      	strb	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000382 	.word	0x20000382

08004820 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void) {
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
	return payload_size;
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <NRF24_getPayloadSize+0x14>)
 8004826:	781b      	ldrb	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000382 	.word	0x20000382

08004838 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800483c:	2060      	movs	r0, #96	; 0x60
 800483e:	f7ff fd61 	bl	8004304 <NRF24_read_register>
 8004842:	4603      	mov	r3, r0
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}

08004848 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	NRF24_write_register(REG_FEATURE, NRF24_read_register(
 800484c:	201d      	movs	r0, #29
 800484e:	f7ff fd59 	bl	8004304 <NRF24_read_register>
 8004852:	4603      	mov	r3, r0
 8004854:	f043 0306 	orr.w	r3, r3, #6
 8004858:	b2db      	uxtb	r3, r3
 800485a:	4619      	mov	r1, r3
 800485c:	201d      	movs	r0, #29
 800485e:	f7ff fda1 	bl	80043a4 <NRF24_write_register>
	REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL));
	if (!NRF24_read_register(REG_FEATURE)) {
 8004862:	201d      	movs	r0, #29
 8004864:	f7ff fd4e 	bl	8004304 <NRF24_read_register>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10c      	bne.n	8004888 <NRF24_enableAckPayload+0x40>
		NRF24_ACTIVATE_cmd();
 800486e:	f000 f9f3 	bl	8004c58 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE, NRF24_read_register(
 8004872:	201d      	movs	r0, #29
 8004874:	f7ff fd46 	bl	8004304 <NRF24_read_register>
 8004878:	4603      	mov	r3, r0
 800487a:	f043 0306 	orr.w	r3, r3, #6
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4619      	mov	r1, r3
 8004882:	201d      	movs	r0, #29
 8004884:	f7ff fd8e 	bl	80043a4 <NRF24_write_register>
		REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL));
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,
			NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004888:	201c      	movs	r0, #28
 800488a:	f7ff fd3b 	bl	8004304 <NRF24_read_register>
 800488e:	4603      	mov	r3, r0
	NRF24_write_register(REG_DYNPD,
 8004890:	f043 0303 	orr.w	r3, r3, #3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4619      	mov	r1, r3
 8004898:	201c      	movs	r0, #28
 800489a:	f7ff fd83 	bl	80043a4 <NRF24_write_register>
}
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 80048a8:	201d      	movs	r0, #29
 80048aa:	f7ff fd2b 	bl	8004304 <NRF24_read_register>
 80048ae:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	4619      	mov	r1, r3
 80048b8:	201d      	movs	r0, #29
 80048ba:	f7ff fd73 	bl	80043a4 <NRF24_write_register>
	if (!NRF24_read_register(REG_FEATURE)) {
 80048be:	201d      	movs	r0, #29
 80048c0:	f7ff fd20 	bl	8004304 <NRF24_read_register>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10c      	bne.n	80048e4 <NRF24_enableDynamicPayloads+0x40>
		NRF24_ACTIVATE_cmd();
 80048ca:	f000 f9c5 	bl	8004c58 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,
				NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_DPL));
 80048ce:	201d      	movs	r0, #29
 80048d0:	f7ff fd18 	bl	8004304 <NRF24_read_register>
 80048d4:	4603      	mov	r3, r0
		NRF24_write_register(REG_FEATURE,
 80048d6:	f043 0304 	orr.w	r3, r3, #4
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	4619      	mov	r1, r3
 80048de:	201d      	movs	r0, #29
 80048e0:	f7ff fd60 	bl	80043a4 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,
			NRF24_read_register(
 80048e4:	201c      	movs	r0, #28
 80048e6:	f7ff fd0d 	bl	8004304 <NRF24_read_register>
 80048ea:	4603      	mov	r3, r0
	NRF24_write_register(REG_DYNPD,
 80048ec:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	201c      	movs	r0, #28
 80048f6:	f7ff fd55 	bl	80043a4 <NRF24_write_register>
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;
 80048fa:	4b02      	ldr	r3, [pc, #8]	; (8004904 <NRF24_enableDynamicPayloads+0x60>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]

}
 8004900:	bf00      	nop
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000383 	.word	0x20000383

08004908 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void) {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 800490c:	201d      	movs	r0, #29
 800490e:	f7ff fcf9 	bl	8004304 <NRF24_read_register>
 8004912:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	b2db      	uxtb	r3, r3
 800491a:	4619      	mov	r1, r3
 800491c:	201d      	movs	r0, #29
 800491e:	f7ff fd41 	bl	80043a4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD, 0);
 8004922:	2100      	movs	r1, #0
 8004924:	201c      	movs	r0, #28
 8004926:	f7ff fd3d 	bl	80043a4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800492a:	4b02      	ldr	r3, [pc, #8]	; (8004934 <NRF24_disableDynamicPayloads+0x2c>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000383 	.word	0x20000383

08004938 <NRF24_setAutoAck>:
//27. Check if module is NRF24L01+ or normal module
bool NRF24_isNRF_Plus(void) {
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	71fb      	strb	r3, [r7, #7]
	if (enable)
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <NRF24_setAutoAck+0x1a>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8004948:	213f      	movs	r1, #63	; 0x3f
 800494a:	2001      	movs	r0, #1
 800494c:	f7ff fd2a 	bl	80043a4 <NRF24_write_register>
	else
		NRF24_write_register(REG_EN_AA, 0x00);
}
 8004950:	e003      	b.n	800495a <NRF24_setAutoAck+0x22>
		NRF24_write_register(REG_EN_AA, 0x00);
 8004952:	2100      	movs	r1, #0
 8004954:	2001      	movs	r0, #1
 8004956:	f7ff fd25 	bl	80043a4 <NRF24_write_register>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]

	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 800496c:	2006      	movs	r0, #6
 800496e:	f7ff fcc9 	bl	8004304 <NRF24_read_register>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	f023 0306 	bic.w	r3, r3, #6
 800497c:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d104      	bne.n	800498e <NRF24_setPALevel+0x2c>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	f043 0306 	orr.w	r3, r3, #6
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e019      	b.n	80049c2 <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m6dB) {
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d104      	bne.n	800499e <NRF24_setPALevel+0x3c>
		setup |= _BV(RF_PWR_HIGH);
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	73fb      	strb	r3, [r7, #15]
 800499c:	e011      	b.n	80049c2 <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m12dB) {
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d104      	bne.n	80049ae <NRF24_setPALevel+0x4c>
		setup |= _BV(RF_PWR_LOW);
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e009      	b.n	80049c2 <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m18dB) {
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d006      	beq.n	80049c2 <NRF24_setPALevel+0x60>
		// nothing
	} else if (level == RF24_PA_ERROR) {
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d103      	bne.n	80049c2 <NRF24_setPALevel+0x60>
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	f043 0306 	orr.w	r3, r3, #6
 80049c0:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	4619      	mov	r1, r3
 80049c6:	2006      	movs	r0, #6
 80049c8:	f7ff fcec 	bl	80043a4 <NRF24_write_register>
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <NRF24_setDataRate>:
 return result;
 }

 */
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 80049e2:	2006      	movs	r0, #6
 80049e4:	f7ff fc8e 	bl	8004304 <NRF24_read_register>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <NRF24_setDataRate+0x88>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 80049f2:	7bbb      	ldrb	r3, [r7, #14]
 80049f4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80049f8:	73bb      	strb	r3, [r7, #14]

	if (speed == RF24_250KBPS) {
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d107      	bne.n	8004a10 <NRF24_setDataRate+0x3c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <NRF24_setDataRate+0x88>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 8004a06:	7bbb      	ldrb	r3, [r7, #14]
 8004a08:	f043 0320 	orr.w	r3, r3, #32
 8004a0c:	73bb      	strb	r3, [r7, #14]
 8004a0e:	e00d      	b.n	8004a2c <NRF24_setDataRate+0x58>
	} else {
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS) {
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d107      	bne.n	8004a26 <NRF24_setDataRate+0x52>
			wide_band = true;
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <NRF24_setDataRate+0x88>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8004a1c:	7bbb      	ldrb	r3, [r7, #14]
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	73bb      	strb	r3, [r7, #14]
 8004a24:	e002      	b.n	8004a2c <NRF24_setDataRate+0x58>
		} else {
			// 1Mbs
			wide_band = false;
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <NRF24_setDataRate+0x88>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 8004a2c:	7bbb      	ldrb	r3, [r7, #14]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	2006      	movs	r0, #6
 8004a32:	f7ff fcb7 	bl	80043a4 <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 8004a36:	2006      	movs	r0, #6
 8004a38:	f7ff fc64 	bl	8004304 <NRF24_read_register>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	7bbb      	ldrb	r3, [r7, #14]
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d102      	bne.n	8004a4c <NRF24_setDataRate+0x78>
		result = true;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
 8004a4a:	e002      	b.n	8004a52 <NRF24_setDataRate+0x7e>
	} else {
		wide_band = false;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <NRF24_setDataRate+0x88>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000384 	.word	0x20000384

08004a60 <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG)
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7ff fc4a 	bl	8004304 <NRF24_read_register>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f023 030c 	bic.w	r3, r3, #12
 8004a76:	73fb      	strb	r3, [r7, #15]
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00f      	beq.n	8004a9e <NRF24_setCRCLength+0x3e>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d104      	bne.n	8004a8e <NRF24_setCRCLength+0x2e>
		config |= _BV(BIT_EN_CRC);
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	f043 0308 	orr.w	r3, r3, #8
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e007      	b.n	8004a9e <NRF24_setCRCLength+0x3e>
	} else {
		config |= _BV(BIT_EN_CRC);
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	f043 0308 	orr.w	r3, r3, #8
 8004a94:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config);
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7ff fc7e 	bl	80043a4 <NRF24_write_register>
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f7ff fc25 	bl	8004304 <NRF24_read_register>
 8004aba:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 8004abc:	f023 0302 	bic.w	r3, r3, #2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	f7ff fc6d 	bl	80043a4 <NRF24_write_register>
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}

08004ace <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t *pipe_num) {
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004ad6:	f7ff fd11 	bl	80044fc <NRF24_get_status>
 8004ada:	4603      	mov	r3, r0
 8004adc:	73fb      	strb	r3, [r7, #15]
	bool result = (status & _BV(BIT_RX_DR));
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	73bb      	strb	r3, [r7, #14]

	if (result) {
 8004aee:	7bbb      	ldrb	r3, [r7, #14]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d017      	beq.n	8004b24 <NRF24_availablePipe+0x56>
		// If the caller wants the pipe number, include that
		if (pipe_num)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <NRF24_availablePipe+0x3c>
			*pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8004b0a:	2140      	movs	r1, #64	; 0x40
 8004b0c:	2007      	movs	r0, #7
 8004b0e:	f7ff fc49 	bl	80043a4 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS)) {
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <NRF24_availablePipe+0x56>
			NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	2007      	movs	r0, #7
 8004b20:	f7ff fc40 	bl	80043a4 <NRF24_write_register>
		}
	}
	return result;
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite(const void *buf, uint8_t len) {
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	NRF24_CE(0);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7ff fbca 	bl	80042d4 <NRF24_CE>
	NRF24_write_register(REG_CONFIG,
			(NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP))
 8004b40:	2000      	movs	r0, #0
 8004b42:	f7ff fbdf 	bl	8004304 <NRF24_read_register>
 8004b46:	4603      	mov	r3, r0
					& ~_BV(BIT_PRIM_RX));
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	b2db      	uxtb	r3, r3
	NRF24_write_register(REG_CONFIG,
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	4619      	mov	r1, r3
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7ff fc24 	bl	80043a4 <NRF24_write_register>
	NRF24_CE(1);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7ff fbb9 	bl	80042d4 <NRF24_CE>
	NRF24_DelayMicroSeconds(150);
 8004b62:	2096      	movs	r0, #150	; 0x96
 8004b64:	f7ff fb7c 	bl	8004260 <NRF24_DelayMicroSeconds>
	// Send the payload
	NRF24_write_payload(buf, len);
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fc63 	bl	8004438 <NRF24_write_payload>
	// Enable Tx for 15usec
	NRF24_CE(1);
 8004b72:	2001      	movs	r0, #1
 8004b74:	f7ff fbae 	bl	80042d4 <NRF24_CE>
	NRF24_DelayMicroSeconds(15);
 8004b78:	200f      	movs	r0, #15
 8004b7a:	f7ff fb71 	bl	8004260 <NRF24_DelayMicroSeconds>
	NRF24_CE(0);
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7ff fba8 	bl	80042d4 <NRF24_CE>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void *buf, uint8_t len) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71bb      	strb	r3, [r7, #6]
	const uint8_t *current = (uint8_t*) buf;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	72fb      	strb	r3, [r7, #11]
	uint8_t data_len = MIN(len, max_payload_size);
 8004ba4:	7afa      	ldrb	r2, [r7, #11]
 8004ba6:	79bb      	ldrb	r3, [r7, #6]
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	bf28      	it	cs
 8004bac:	4613      	movcs	r3, r2
 8004bae:	72bb      	strb	r3, [r7, #10]
	NRF24_CSN(0);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7ff fb77 	bl	80042a4 <NRF24_CSN>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | (pipe & 0x7), current, data_len);
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	b25b      	sxtb	r3, r3
 8004bc0:	f063 0357 	orn	r3, r3, #87	; 0x57
 8004bc4:	b25b      	sxtb	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	7aba      	ldrb	r2, [r7, #10]
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fc0b 	bl	80043e8 <NRF24_write_registerN>
	NRF24_CSN(1);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f7ff fb66 	bl	80042a4 <NRF24_CSN>
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <NRF24_whatHappened>:
	bool result = ack_payload_available;
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004bec:	f7ff fc86 	bl	80044fc <NRF24_get_status>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,
 8004bfa:	2170      	movs	r1, #112	; 0x70
 8004bfc:	2007      	movs	r0, #7
 8004bfe:	f7ff fbd1 	bl	80043a4 <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	701a      	strb	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <NRF24_resetStatus>:
bool NRF24_testRPD(void) {
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
 8004c46:	b580      	push	{r7, lr}
 8004c48:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,
 8004c4a:	2170      	movs	r1, #112	; 0x70
 8004c4c:	2007      	movs	r0, #7
 8004c4e:	f7ff fba9 	bl	80043a4 <NRF24_write_register>
	_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_CSN(0);
 8004c5e:	2000      	movs	r0, #0
 8004c60:	f7ff fb20 	bl	80042a4 <NRF24_CSN>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004c64:	2350      	movs	r3, #80	; 0x50
 8004c66:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004c68:	2373      	movs	r3, #115	; 0x73
 8004c6a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&hspi2, cmdRxBuf, 2, 100);
 8004c6c:	1d39      	adds	r1, r7, #4
 8004c6e:	2364      	movs	r3, #100	; 0x64
 8004c70:	2202      	movs	r2, #2
 8004c72:	4805      	ldr	r0, [pc, #20]	; (8004c88 <NRF24_ACTIVATE_cmd+0x30>)
 8004c74:	f7fe f823 	bl	8002cbe <HAL_SPI_Transmit>
	NRF24_CSN(1);
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f7ff fb13 	bl	80042a4 <NRF24_CSN>
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000288 	.word	0x20000288

08004c8c <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 8004c8c:	b5b0      	push	{r4, r5, r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	printf("\t****************************************************\r\n");
 8004c92:	487c      	ldr	r0, [pc, #496]	; (8004e84 <printRadioSettings+0x1f8>)
 8004c94:	f001 f884 	bl	8005da0 <puts>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f7ff fb33 	bl	8004304 <NRF24_read_register>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71fb      	strb	r3, [r7, #7]
	if (reg8Val & (1 << 3)) {
 8004ca2:	79fb      	ldrb	r3, [r7, #7]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00c      	beq.n	8004cc6 <printRadioSettings+0x3a>
		if (reg8Val & (1 << 2))
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <printRadioSettings+0x32>
			printf("\tCRC:\tEnabled, 2 Bytes\r\n");
 8004cb6:	4874      	ldr	r0, [pc, #464]	; (8004e88 <printRadioSettings+0x1fc>)
 8004cb8:	f001 f872 	bl	8005da0 <puts>
 8004cbc:	e006      	b.n	8004ccc <printRadioSettings+0x40>
		else
			printf("\tCRC:\tEnabled, 1 Byte\r\n");
 8004cbe:	4873      	ldr	r0, [pc, #460]	; (8004e8c <printRadioSettings+0x200>)
 8004cc0:	f001 f86e 	bl	8005da0 <puts>
 8004cc4:	e002      	b.n	8004ccc <printRadioSettings+0x40>
	} else {
		printf("\tCRC:\tDisabled\r\n");
 8004cc6:	4872      	ldr	r0, [pc, #456]	; (8004e90 <printRadioSettings+0x204>)
 8004cc8:	f001 f86a 	bl	8005da0 <puts>
	}

	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7ff fb19 	bl	8004304 <NRF24_read_register>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bfcc      	ite	gt
 8004ce0:	2301      	movgt	r3, #1
 8004ce2:	2300      	movle	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	f003 0302 	and.w	r3, r3, #2
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfcc      	ite	gt
 8004cf2:	2301      	movgt	r3, #1
 8004cf4:	2300      	movle	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfcc      	ite	gt
 8004d04:	2301      	movgt	r3, #1
 8004d06:	2300      	movle	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfcc      	ite	gt
 8004d16:	2301      	movgt	r3, #1
 8004d18:	2300      	movle	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	f003 0310 	and.w	r3, r3, #16
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bfcc      	ite	gt
 8004d28:	2301      	movgt	r3, #1
 8004d2a:	2300      	movle	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	f003 0320 	and.w	r3, r3, #32
	printf("\tENAA:\tP0: %d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfcc      	ite	gt
 8004d3a:	2301      	movgt	r3, #1
 8004d3c:	2300      	movle	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	9101      	str	r1, [sp, #4]
 8004d44:	9200      	str	r2, [sp, #0]
 8004d46:	462b      	mov	r3, r5
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4601      	mov	r1, r0
 8004d4c:	4851      	ldr	r0, [pc, #324]	; (8004e94 <printRadioSettings+0x208>)
 8004d4e:	f000 ffc1 	bl	8005cd4 <iprintf>

	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004d52:	2002      	movs	r0, #2
 8004d54:	f7ff fad6 	bl	8004304 <NRF24_read_register>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	71fb      	strb	r3, [r7, #7]
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bfcc      	ite	gt
 8004d66:	2301      	movgt	r3, #1
 8004d68:	2300      	movle	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	f003 0302 	and.w	r3, r3, #2
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bfcc      	ite	gt
 8004d78:	2301      	movgt	r3, #1
 8004d7a:	2300      	movle	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	f003 0304 	and.w	r3, r3, #4
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfcc      	ite	gt
 8004d8a:	2301      	movgt	r3, #1
 8004d8c:	2300      	movle	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 0308 	and.w	r3, r3, #8
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bfcc      	ite	gt
 8004d9c:	2301      	movgt	r3, #1
 8004d9e:	2300      	movle	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	f003 0310 	and.w	r3, r3, #16
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfcc      	ite	gt
 8004dae:	2301      	movgt	r3, #1
 8004db0:	2300      	movle	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	f003 0320 	and.w	r3, r3, #32
	printf("\tEN_RXADDR:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfcc      	ite	gt
 8004dc0:	2301      	movgt	r3, #1
 8004dc2:	2300      	movle	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	9302      	str	r3, [sp, #8]
 8004dc8:	9101      	str	r1, [sp, #4]
 8004dca:	9200      	str	r2, [sp, #0]
 8004dcc:	462b      	mov	r3, r5
 8004dce:	4622      	mov	r2, r4
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	4831      	ldr	r0, [pc, #196]	; (8004e98 <printRadioSettings+0x20c>)
 8004dd4:	f000 ff7e 	bl	8005cd4 <iprintf>

	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 8004dd8:	2003      	movs	r0, #3
 8004dda:	f7ff fa93 	bl	8004304 <NRF24_read_register>
 8004dde:	4603      	mov	r3, r0
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	71fb      	strb	r3, [r7, #7]
	reg8Val += 2;
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	3302      	adds	r3, #2
 8004dea:	71fb      	strb	r3, [r7, #7]
	printf("\tSETUP_AW:\t%d bytes \r\n", reg8Val);
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	4619      	mov	r1, r3
 8004df0:	482a      	ldr	r0, [pc, #168]	; (8004e9c <printRadioSettings+0x210>)
 8004df2:	f000 ff6f 	bl	8005cd4 <iprintf>

	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004df6:	2005      	movs	r0, #5
 8004df8:	f7ff fa84 	bl	8004304 <NRF24_read_register>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	71fb      	strb	r3, [r7, #7]
	printf("\tRF_CH:\t%d CH\r\n", reg8Val & 0x7F);
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e06:	4619      	mov	r1, r3
 8004e08:	4825      	ldr	r0, [pc, #148]	; (8004ea0 <printRadioSettings+0x214>)
 8004e0a:	f000 ff63 	bl	8005cd4 <iprintf>

	//f1) Data rate
	reg8Val = NRF24_read_register(0x06) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8004e0e:	2006      	movs	r0, #6
 8004e10:	f7ff fa78 	bl	8004304 <NRF24_read_register>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e1a:	71fb      	strb	r3, [r7, #7]
	if (reg8Val == _BV(RF_DR_LOW))
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d103      	bne.n	8004e2a <printRadioSettings+0x19e>
		printf("\tData Rate:\t250Kbps\r\n");	// '10' = 250KBPS
 8004e22:	4820      	ldr	r0, [pc, #128]	; (8004ea4 <printRadioSettings+0x218>)
 8004e24:	f000 ffbc 	bl	8005da0 <puts>
 8004e28:	e00b      	b.n	8004e42 <printRadioSettings+0x1b6>
	else if (reg8Val & _BV(RF_DR_HIGH))
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <printRadioSettings+0x1b0>
		printf("\tData Rate:\t2Mbps\r\n");
 8004e34:	481c      	ldr	r0, [pc, #112]	; (8004ea8 <printRadioSettings+0x21c>)
 8004e36:	f000 ffb3 	bl	8005da0 <puts>
 8004e3a:	e002      	b.n	8004e42 <printRadioSettings+0x1b6>
	else {
		printf("\tData Rate:\t1Mbps\r\n");
 8004e3c:	481b      	ldr	r0, [pc, #108]	; (8004eac <printRadioSettings+0x220>)
 8004e3e:	f000 ffaf 	bl	8005da0 <puts>
	}

	//f2) Data rate
	reg8Val = NRF24_read_register(0x06);
 8004e42:	2006      	movs	r0, #6
 8004e44:	f7ff fa5e 	bl	8004304 <NRF24_read_register>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	71fb      	strb	r3, [r7, #7]

	reg8Val &= (3 << 1);
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	f003 0306 	and.w	r3, r3, #6
 8004e52:	71fb      	strb	r3, [r7, #7]
	reg8Val = (reg8Val >> 1);
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	71fb      	strb	r3, [r7, #7]
	if (reg8Val == 0)
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <printRadioSettings+0x1dc>
		printf("\tRF_PWR:\t-18dB\r\n");
 8004e60:	4813      	ldr	r0, [pc, #76]	; (8004eb0 <printRadioSettings+0x224>)
 8004e62:	f000 ff9d 	bl	8005da0 <puts>
 8004e66:	e02f      	b.n	8004ec8 <printRadioSettings+0x23c>
	else if (reg8Val == 1)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d103      	bne.n	8004e76 <printRadioSettings+0x1ea>
		printf("\tRF_PWR:\t-12dB\r\n");
 8004e6e:	4811      	ldr	r0, [pc, #68]	; (8004eb4 <printRadioSettings+0x228>)
 8004e70:	f000 ff96 	bl	8005da0 <puts>
 8004e74:	e028      	b.n	8004ec8 <printRadioSettings+0x23c>
	else if (reg8Val == 2)
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d11f      	bne.n	8004ebc <printRadioSettings+0x230>
		printf("\tRF_PWR:\t-6dB\r\n");
 8004e7c:	480e      	ldr	r0, [pc, #56]	; (8004eb8 <printRadioSettings+0x22c>)
 8004e7e:	f000 ff8f 	bl	8005da0 <puts>
 8004e82:	e021      	b.n	8004ec8 <printRadioSettings+0x23c>
 8004e84:	08007d70 	.word	0x08007d70
 8004e88:	08007da8 	.word	0x08007da8
 8004e8c:	08007dc0 	.word	0x08007dc0
 8004e90:	08007dd8 	.word	0x08007dd8
 8004e94:	08007de8 	.word	0x08007de8
 8004e98:	08007e1c 	.word	0x08007e1c
 8004e9c:	08007e54 	.word	0x08007e54
 8004ea0:	08007e6c 	.word	0x08007e6c
 8004ea4:	08007e7c 	.word	0x08007e7c
 8004ea8:	08007e94 	.word	0x08007e94
 8004eac:	08007ea8 	.word	0x08007ea8
 8004eb0:	08007ebc 	.word	0x08007ebc
 8004eb4:	08007ecc 	.word	0x08007ecc
 8004eb8:	08007edc 	.word	0x08007edc
	else if (reg8Val == 3)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d102      	bne.n	8004ec8 <printRadioSettings+0x23c>
		printf("\tRF_PWR:\t0dB\r\n");
 8004ec2:	488e      	ldr	r0, [pc, #568]	; (80050fc <printRadioSettings+0x470>)
 8004ec4:	f000 ff6c 	bl	8005da0 <puts>

	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8004ec8:	463b      	mov	r3, r7
 8004eca:	2205      	movs	r2, #5
 8004ecc:	4619      	mov	r1, r3
 8004ece:	200a      	movs	r0, #10
 8004ed0:	f7ff fa40 	bl	8004354 <NRF24_read_registerN>
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004ed4:	793b      	ldrb	r3, [r7, #4]
 8004ed6:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004eda:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004edc:	78bb      	ldrb	r3, [r7, #2]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004ede:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004ee0:	787b      	ldrb	r3, [r7, #1]
 8004ee2:	783a      	ldrb	r2, [r7, #0]
	printf("\tRX_Pipe0 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004ee4:	9201      	str	r2, [sp, #4]
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	4623      	mov	r3, r4
 8004eea:	4602      	mov	r2, r0
 8004eec:	4884      	ldr	r0, [pc, #528]	; (8005100 <printRadioSettings+0x474>)
 8004eee:	f000 fef1 	bl	8005cd4 <iprintf>

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	2205      	movs	r2, #5
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	200b      	movs	r0, #11
 8004efa:	f7ff fa2b 	bl	8004354 <NRF24_read_registerN>
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004efe:	793b      	ldrb	r3, [r7, #4]
 8004f00:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004f02:	78fb      	ldrb	r3, [r7, #3]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f04:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004f06:	78bb      	ldrb	r3, [r7, #2]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f08:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004f0a:	787b      	ldrb	r3, [r7, #1]
 8004f0c:	783a      	ldrb	r2, [r7, #0]
	printf("\tRX_Pipe1 Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f0e:	9201      	str	r2, [sp, #4]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	4623      	mov	r3, r4
 8004f14:	4602      	mov	r2, r0
 8004f16:	487b      	ldr	r0, [pc, #492]	; (8005104 <printRadioSettings+0x478>)
 8004f18:	f000 fedc 	bl	8005cd4 <iprintf>

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4619      	mov	r1, r3
 8004f22:	200c      	movs	r0, #12
 8004f24:	f7ff fa16 	bl	8004354 <NRF24_read_registerN>
	printf("\tRX_Pipe2 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8004f28:	783b      	ldrb	r3, [r7, #0]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4876      	ldr	r0, [pc, #472]	; (8005108 <printRadioSettings+0x47c>)
 8004f2e:	f000 fed1 	bl	8005cd4 <iprintf>

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 8004f32:	463b      	mov	r3, r7
 8004f34:	2201      	movs	r2, #1
 8004f36:	4619      	mov	r1, r3
 8004f38:	200d      	movs	r0, #13
 8004f3a:	f7ff fa0b 	bl	8004354 <NRF24_read_registerN>
	printf("\tRX_Pipe3 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8004f3e:	783b      	ldrb	r3, [r7, #0]
 8004f40:	4619      	mov	r1, r3
 8004f42:	4872      	ldr	r0, [pc, #456]	; (800510c <printRadioSettings+0x480>)
 8004f44:	f000 fec6 	bl	8005cd4 <iprintf>

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 8004f48:	463b      	mov	r3, r7
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	200e      	movs	r0, #14
 8004f50:	f7ff fa00 	bl	8004354 <NRF24_read_registerN>
	printf("\tRX_Pipe4 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8004f54:	783b      	ldrb	r3, [r7, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	486d      	ldr	r0, [pc, #436]	; (8005110 <printRadioSettings+0x484>)
 8004f5a:	f000 febb 	bl	8005cd4 <iprintf>

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 8004f5e:	463b      	mov	r3, r7
 8004f60:	2201      	movs	r2, #1
 8004f62:	4619      	mov	r1, r3
 8004f64:	200f      	movs	r0, #15
 8004f66:	f7ff f9f5 	bl	8004354 <NRF24_read_registerN>
	printf("\tRX_Pipe5 Addrs:\txx,xx,xx,xx,%02X\r\n", pipeAddrs[0]);
 8004f6a:	783b      	ldrb	r3, [r7, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4869      	ldr	r0, [pc, #420]	; (8005114 <printRadioSettings+0x488>)
 8004f70:	f000 feb0 	bl	8005cd4 <iprintf>

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 8004f74:	463b      	mov	r3, r7
 8004f76:	2205      	movs	r2, #5
 8004f78:	4619      	mov	r1, r3
 8004f7a:	2010      	movs	r0, #16
 8004f7c:	f7ff f9ea 	bl	8004354 <NRF24_read_registerN>
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f80:	793b      	ldrb	r3, [r7, #4]
 8004f82:	4619      	mov	r1, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004f84:	78fb      	ldrb	r3, [r7, #3]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f86:	4618      	mov	r0, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004f88:	78bb      	ldrb	r3, [r7, #2]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f8a:	461c      	mov	r4, r3
			pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8004f8c:	787b      	ldrb	r3, [r7, #1]
 8004f8e:	783a      	ldrb	r2, [r7, #0]
	printf("\tTX Addrs:\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4],
 8004f90:	9201      	str	r2, [sp, #4]
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4623      	mov	r3, r4
 8004f96:	4602      	mov	r2, r0
 8004f98:	485f      	ldr	r0, [pc, #380]	; (8005118 <printRadioSettings+0x48c>)
 8004f9a:	f000 fe9b 	bl	8005cd4 <iprintf>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004f9e:	2011      	movs	r0, #17
 8004fa0:	f7ff f9b0 	bl	8004304 <NRF24_read_register>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P0:\t%d bytes \r\n", reg8Val & 0x3F);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fae:	4619      	mov	r1, r3
 8004fb0:	485a      	ldr	r0, [pc, #360]	; (800511c <printRadioSettings+0x490>)
 8004fb2:	f000 fe8f 	bl	8005cd4 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 1);
 8004fb6:	2012      	movs	r0, #18
 8004fb8:	f7ff f9a4 	bl	8004304 <NRF24_read_register>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P1:\t%d bytes \r\n", reg8Val & 0x3F);
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4855      	ldr	r0, [pc, #340]	; (8005120 <printRadioSettings+0x494>)
 8004fca:	f000 fe83 	bl	8005cd4 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 2);
 8004fce:	2013      	movs	r0, #19
 8004fd0:	f7ff f998 	bl	8004304 <NRF24_read_register>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P2:\t%d bytes \r\n", reg8Val & 0x3F);
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4850      	ldr	r0, [pc, #320]	; (8005124 <printRadioSettings+0x498>)
 8004fe2:	f000 fe77 	bl	8005cd4 <iprintf>

	//(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);

	reg8Val = NRF24_read_register(0x11 + 3);
 8004fe6:	2014      	movs	r0, #20
 8004fe8:	f7ff f98c 	bl	8004304 <NRF24_read_register>
 8004fec:	4603      	mov	r3, r0
 8004fee:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P3:\t%d bytes \r\n", reg8Val & 0x3F);
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	484b      	ldr	r0, [pc, #300]	; (8005128 <printRadioSettings+0x49c>)
 8004ffa:	f000 fe6b 	bl	8005cd4 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 4);
 8004ffe:	2015      	movs	r0, #21
 8005000:	f7ff f980 	bl	8004304 <NRF24_read_register>
 8005004:	4603      	mov	r3, r0
 8005006:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P4:\t%d bytes \r\n", reg8Val & 0x3F);
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800500e:	4619      	mov	r1, r3
 8005010:	4846      	ldr	r0, [pc, #280]	; (800512c <printRadioSettings+0x4a0>)
 8005012:	f000 fe5f 	bl	8005cd4 <iprintf>

	reg8Val = NRF24_read_register(0x11 + 5);
 8005016:	2016      	movs	r0, #22
 8005018:	f7ff f974 	bl	8004304 <NRF24_read_register>
 800501c:	4603      	mov	r3, r0
 800501e:	71fb      	strb	r3, [r7, #7]
	printf("\tRX_PW_P5:\t%d bytes \r\n", reg8Val & 0x3F);
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005026:	4619      	mov	r1, r3
 8005028:	4841      	ldr	r0, [pc, #260]	; (8005130 <printRadioSettings+0x4a4>)
 800502a:	f000 fe53 	bl	8005cd4 <iprintf>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800502e:	201c      	movs	r0, #28
 8005030:	f7ff f968 	bl	8004304 <NRF24_read_register>
 8005034:	4603      	mov	r3, r0
 8005036:	71fb      	strb	r3, [r7, #7]
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	f003 0301 	and.w	r3, r3, #1
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfcc      	ite	gt
 8005042:	2301      	movgt	r3, #1
 8005044:	2300      	movle	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	4618      	mov	r0, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	f003 0302 	and.w	r3, r3, #2
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfcc      	ite	gt
 8005054:	2301      	movgt	r3, #1
 8005056:	2300      	movle	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	f003 0304 	and.w	r3, r3, #4
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005062:	2b00      	cmp	r3, #0
 8005064:	bfcc      	ite	gt
 8005066:	2301      	movgt	r3, #1
 8005068:	2300      	movle	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 0308 	and.w	r3, r3, #8
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfcc      	ite	gt
 8005078:	2301      	movgt	r3, #1
 800507a:	2300      	movle	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 0310 	and.w	r3, r3, #16
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfcc      	ite	gt
 800508a:	2301      	movgt	r3, #1
 800508c:	2300      	movle	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	f003 0320 	and.w	r3, r3, #32
	printf("\tDYNPD_pipe:\tP0 :%d\tP1 :%d\tP2 :%d\tP3 :%d\tP4 :%d\tP5 :%d\r\n",
 8005098:	2b00      	cmp	r3, #0
 800509a:	bfcc      	ite	gt
 800509c:	2301      	movgt	r3, #1
 800509e:	2300      	movle	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	9101      	str	r1, [sp, #4]
 80050a6:	9200      	str	r2, [sp, #0]
 80050a8:	462b      	mov	r3, r5
 80050aa:	4622      	mov	r2, r4
 80050ac:	4601      	mov	r1, r0
 80050ae:	4821      	ldr	r0, [pc, #132]	; (8005134 <printRadioSettings+0x4a8>)
 80050b0:	f000 fe10 	bl	8005cd4 <iprintf>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80050b4:	201d      	movs	r0, #29
 80050b6:	f7ff f925 	bl	8004304 <NRF24_read_register>
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
	if (reg8Val & (1 << 2))
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <printRadioSettings+0x444>
		printf("\tEN_DPL:\tEnabled \r\n");
 80050c8:	481b      	ldr	r0, [pc, #108]	; (8005138 <printRadioSettings+0x4ac>)
 80050ca:	f000 fe69 	bl	8005da0 <puts>
 80050ce:	e002      	b.n	80050d6 <printRadioSettings+0x44a>
	else
		printf("\tEN_DPL:\tDisabled \r\n");
 80050d0:	481a      	ldr	r0, [pc, #104]	; (800513c <printRadioSettings+0x4b0>)
 80050d2:	f000 fe65 	bl	8005da0 <puts>

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <printRadioSettings+0x45c>
		printf("\tEN_ACK_PAY:\tEnabled \r\n");
 80050e0:	4817      	ldr	r0, [pc, #92]	; (8005140 <printRadioSettings+0x4b4>)
 80050e2:	f000 fe5d 	bl	8005da0 <puts>
 80050e6:	e002      	b.n	80050ee <printRadioSettings+0x462>
	else
		printf("\tEN_ACK_PAY:\tDisabled \r\n");
 80050e8:	4816      	ldr	r0, [pc, #88]	; (8005144 <printRadioSettings+0x4b8>)
 80050ea:	f000 fe59 	bl	8005da0 <puts>
	printf("\t****************************************************\r\n");
 80050ee:	4816      	ldr	r0, [pc, #88]	; (8005148 <printRadioSettings+0x4bc>)
 80050f0:	f000 fe56 	bl	8005da0 <puts>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bdb0      	pop	{r4, r5, r7, pc}
 80050fc:	08007eec 	.word	0x08007eec
 8005100:	08007efc 	.word	0x08007efc
 8005104:	08007f28 	.word	0x08007f28
 8005108:	08007f54 	.word	0x08007f54
 800510c:	08007f78 	.word	0x08007f78
 8005110:	08007f9c 	.word	0x08007f9c
 8005114:	08007fc0 	.word	0x08007fc0
 8005118:	08007fe4 	.word	0x08007fe4
 800511c:	0800800c 	.word	0x0800800c
 8005120:	08008024 	.word	0x08008024
 8005124:	0800803c 	.word	0x0800803c
 8005128:	08008054 	.word	0x08008054
 800512c:	0800806c 	.word	0x0800806c
 8005130:	08008084 	.word	0x08008084
 8005134:	0800809c 	.word	0x0800809c
 8005138:	080080d8 	.word	0x080080d8
 800513c:	080080ec 	.word	0x080080ec
 8005140:	08008100 	.word	0x08008100
 8005144:	08008118 	.word	0x08008118
 8005148:	08007d70 	.word	0x08007d70

0800514c <NRF24_SoftwareReset>:
			_BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 0)));
	printf("\t\r\n-------------------------\r\n");

}

void NRF24_SoftwareReset(void) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
	//Put pins to idle state
	NRF24_CSN(1);
 8005152:	2001      	movs	r0, #1
 8005154:	f7ff f8a6 	bl	80042a4 <NRF24_CSN>
	NRF24_CE(0);
 8005158:	2000      	movs	r0, #0
 800515a:	f7ff f8bb 	bl	80042d4 <NRF24_CE>
	//5 ms initial delay
	HAL_Delay(5);
 800515e:	2005      	movs	r0, #5
 8005160:	f7fc fbe4 	bl	800192c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8005164:	2108      	movs	r1, #8
 8005166:	2000      	movs	r0, #0
 8005168:	f7ff f91c 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800516c:	213f      	movs	r1, #63	; 0x3f
 800516e:	2001      	movs	r0, #1
 8005170:	f7ff f918 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8005174:	2103      	movs	r1, #3
 8005176:	2002      	movs	r0, #2
 8005178:	f7ff f914 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800517c:	2103      	movs	r1, #3
 800517e:	2003      	movs	r0, #3
 8005180:	f7ff f910 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8005184:	2103      	movs	r1, #3
 8005186:	2004      	movs	r0, #4
 8005188:	f7ff f90c 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800518c:	2102      	movs	r1, #2
 800518e:	2005      	movs	r0, #5
 8005190:	f7ff f908 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0F);
 8005194:	210f      	movs	r1, #15
 8005196:	2006      	movs	r0, #6
 8005198:	f7ff f904 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800519c:	210e      	movs	r1, #14
 800519e:	2007      	movs	r0, #7
 80051a0:	f7ff f900 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80051a4:	2100      	movs	r1, #0
 80051a6:	2008      	movs	r0, #8
 80051a8:	f7ff f8fc 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80051ac:	2100      	movs	r1, #0
 80051ae:	2009      	movs	r0, #9
 80051b0:	f7ff f8f8 	bl	80043a4 <NRF24_write_register>
	uint8_t pipeAddrVar[5];
	pipeAddrVar[4] = 0xE7;
 80051b4:	23e7      	movs	r3, #231	; 0xe7
 80051b6:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xE7;
 80051b8:	23e7      	movs	r3, #231	; 0xe7
 80051ba:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xE7;
 80051bc:	23e7      	movs	r3, #231	; 0xe7
 80051be:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xE7;
 80051c0:	23e7      	movs	r3, #231	; 0xe7
 80051c2:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xE7;
 80051c4:	23e7      	movs	r3, #231	; 0xe7
 80051c6:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80051c8:	463b      	mov	r3, r7
 80051ca:	2205      	movs	r2, #5
 80051cc:	4619      	mov	r1, r3
 80051ce:	200a      	movs	r0, #10
 80051d0:	f7ff f90a 	bl	80043e8 <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 80051d4:	23c2      	movs	r3, #194	; 0xc2
 80051d6:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xC2;
 80051d8:	23c2      	movs	r3, #194	; 0xc2
 80051da:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xC2;
 80051dc:	23c2      	movs	r3, #194	; 0xc2
 80051de:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xC2;
 80051e0:	23c2      	movs	r3, #194	; 0xc2
 80051e2:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xC2;
 80051e4:	23c2      	movs	r3, #194	; 0xc2
 80051e6:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80051e8:	463b      	mov	r3, r7
 80051ea:	2205      	movs	r2, #5
 80051ec:	4619      	mov	r1, r3
 80051ee:	200b      	movs	r0, #11
 80051f0:	f7ff f8fa 	bl	80043e8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80051f4:	21c3      	movs	r1, #195	; 0xc3
 80051f6:	200c      	movs	r0, #12
 80051f8:	f7ff f8d4 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80051fc:	21c4      	movs	r1, #196	; 0xc4
 80051fe:	200d      	movs	r0, #13
 8005200:	f7ff f8d0 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8005204:	21c5      	movs	r1, #197	; 0xc5
 8005206:	200e      	movs	r0, #14
 8005208:	f7ff f8cc 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800520c:	21c6      	movs	r1, #198	; 0xc6
 800520e:	200f      	movs	r0, #15
 8005210:	f7ff f8c8 	bl	80043a4 <NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 8005214:	23e7      	movs	r3, #231	; 0xe7
 8005216:	713b      	strb	r3, [r7, #4]
	pipeAddrVar[3] = 0xE7;
 8005218:	23e7      	movs	r3, #231	; 0xe7
 800521a:	70fb      	strb	r3, [r7, #3]
	pipeAddrVar[2] = 0xE7;
 800521c:	23e7      	movs	r3, #231	; 0xe7
 800521e:	70bb      	strb	r3, [r7, #2]
	pipeAddrVar[1] = 0xE7;
 8005220:	23e7      	movs	r3, #231	; 0xe7
 8005222:	707b      	strb	r3, [r7, #1]
	pipeAddrVar[0] = 0xE7;
 8005224:	23e7      	movs	r3, #231	; 0xe7
 8005226:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8005228:	463b      	mov	r3, r7
 800522a:	2205      	movs	r2, #5
 800522c:	4619      	mov	r1, r3
 800522e:	2010      	movs	r0, #16
 8005230:	f7ff f8da 	bl	80043e8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8005234:	2100      	movs	r1, #0
 8005236:	2011      	movs	r0, #17
 8005238:	f7ff f8b4 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800523c:	2100      	movs	r1, #0
 800523e:	2012      	movs	r0, #18
 8005240:	f7ff f8b0 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8005244:	2100      	movs	r1, #0
 8005246:	2013      	movs	r0, #19
 8005248:	f7ff f8ac 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800524c:	2100      	movs	r1, #0
 800524e:	2014      	movs	r0, #20
 8005250:	f7ff f8a8 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8005254:	2100      	movs	r1, #0
 8005256:	2015      	movs	r0, #21
 8005258:	f7ff f8a4 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800525c:	2100      	movs	r1, #0
 800525e:	2016      	movs	r0, #22
 8005260:	f7ff f8a0 	bl	80043a4 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8005264:	f7ff fcf8 	bl	8004c58 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8005268:	2100      	movs	r1, #0
 800526a:	201c      	movs	r0, #28
 800526c:	f7ff f89a 	bl	80043a4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8005270:	2100      	movs	r1, #0
 8005272:	201d      	movs	r0, #29
 8005274:	f7ff f896 	bl	80043a4 <NRF24_write_register>
	printRadioSettings();
 8005278:	f7ff fd08 	bl	8004c8c <printRadioSettings>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <__cvt>:
 8005284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	ec55 4b10 	vmov	r4, r5, d0
 800528c:	2d00      	cmp	r5, #0
 800528e:	460e      	mov	r6, r1
 8005290:	4619      	mov	r1, r3
 8005292:	462b      	mov	r3, r5
 8005294:	bfbb      	ittet	lt
 8005296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800529a:	461d      	movlt	r5, r3
 800529c:	2300      	movge	r3, #0
 800529e:	232d      	movlt	r3, #45	; 0x2d
 80052a0:	700b      	strb	r3, [r1, #0]
 80052a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052a8:	4691      	mov	r9, r2
 80052aa:	f023 0820 	bic.w	r8, r3, #32
 80052ae:	bfbc      	itt	lt
 80052b0:	4622      	movlt	r2, r4
 80052b2:	4614      	movlt	r4, r2
 80052b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052b8:	d005      	beq.n	80052c6 <__cvt+0x42>
 80052ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052be:	d100      	bne.n	80052c2 <__cvt+0x3e>
 80052c0:	3601      	adds	r6, #1
 80052c2:	2102      	movs	r1, #2
 80052c4:	e000      	b.n	80052c8 <__cvt+0x44>
 80052c6:	2103      	movs	r1, #3
 80052c8:	ab03      	add	r3, sp, #12
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	ab02      	add	r3, sp, #8
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	ec45 4b10 	vmov	d0, r4, r5
 80052d4:	4653      	mov	r3, sl
 80052d6:	4632      	mov	r2, r6
 80052d8:	f000 ff4a 	bl	8006170 <_dtoa_r>
 80052dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052e0:	4607      	mov	r7, r0
 80052e2:	d102      	bne.n	80052ea <__cvt+0x66>
 80052e4:	f019 0f01 	tst.w	r9, #1
 80052e8:	d022      	beq.n	8005330 <__cvt+0xac>
 80052ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052ee:	eb07 0906 	add.w	r9, r7, r6
 80052f2:	d110      	bne.n	8005316 <__cvt+0x92>
 80052f4:	783b      	ldrb	r3, [r7, #0]
 80052f6:	2b30      	cmp	r3, #48	; 0x30
 80052f8:	d10a      	bne.n	8005310 <__cvt+0x8c>
 80052fa:	2200      	movs	r2, #0
 80052fc:	2300      	movs	r3, #0
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	f7fb fc01 	bl	8000b08 <__aeabi_dcmpeq>
 8005306:	b918      	cbnz	r0, 8005310 <__cvt+0x8c>
 8005308:	f1c6 0601 	rsb	r6, r6, #1
 800530c:	f8ca 6000 	str.w	r6, [sl]
 8005310:	f8da 3000 	ldr.w	r3, [sl]
 8005314:	4499      	add	r9, r3
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	4620      	mov	r0, r4
 800531c:	4629      	mov	r1, r5
 800531e:	f7fb fbf3 	bl	8000b08 <__aeabi_dcmpeq>
 8005322:	b108      	cbz	r0, 8005328 <__cvt+0xa4>
 8005324:	f8cd 900c 	str.w	r9, [sp, #12]
 8005328:	2230      	movs	r2, #48	; 0x30
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	454b      	cmp	r3, r9
 800532e:	d307      	bcc.n	8005340 <__cvt+0xbc>
 8005330:	9b03      	ldr	r3, [sp, #12]
 8005332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005334:	1bdb      	subs	r3, r3, r7
 8005336:	4638      	mov	r0, r7
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	b004      	add	sp, #16
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	9103      	str	r1, [sp, #12]
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	e7f0      	b.n	800532a <__cvt+0xa6>

08005348 <__exponent>:
 8005348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800534a:	4603      	mov	r3, r0
 800534c:	2900      	cmp	r1, #0
 800534e:	bfb8      	it	lt
 8005350:	4249      	neglt	r1, r1
 8005352:	f803 2b02 	strb.w	r2, [r3], #2
 8005356:	bfb4      	ite	lt
 8005358:	222d      	movlt	r2, #45	; 0x2d
 800535a:	222b      	movge	r2, #43	; 0x2b
 800535c:	2909      	cmp	r1, #9
 800535e:	7042      	strb	r2, [r0, #1]
 8005360:	dd2a      	ble.n	80053b8 <__exponent+0x70>
 8005362:	f10d 0207 	add.w	r2, sp, #7
 8005366:	4617      	mov	r7, r2
 8005368:	260a      	movs	r6, #10
 800536a:	4694      	mov	ip, r2
 800536c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005370:	fb06 1415 	mls	r4, r6, r5, r1
 8005374:	3430      	adds	r4, #48	; 0x30
 8005376:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800537a:	460c      	mov	r4, r1
 800537c:	2c63      	cmp	r4, #99	; 0x63
 800537e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005382:	4629      	mov	r1, r5
 8005384:	dcf1      	bgt.n	800536a <__exponent+0x22>
 8005386:	3130      	adds	r1, #48	; 0x30
 8005388:	f1ac 0402 	sub.w	r4, ip, #2
 800538c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005390:	1c41      	adds	r1, r0, #1
 8005392:	4622      	mov	r2, r4
 8005394:	42ba      	cmp	r2, r7
 8005396:	d30a      	bcc.n	80053ae <__exponent+0x66>
 8005398:	f10d 0209 	add.w	r2, sp, #9
 800539c:	eba2 020c 	sub.w	r2, r2, ip
 80053a0:	42bc      	cmp	r4, r7
 80053a2:	bf88      	it	hi
 80053a4:	2200      	movhi	r2, #0
 80053a6:	4413      	add	r3, r2
 80053a8:	1a18      	subs	r0, r3, r0
 80053aa:	b003      	add	sp, #12
 80053ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053b6:	e7ed      	b.n	8005394 <__exponent+0x4c>
 80053b8:	2330      	movs	r3, #48	; 0x30
 80053ba:	3130      	adds	r1, #48	; 0x30
 80053bc:	7083      	strb	r3, [r0, #2]
 80053be:	70c1      	strb	r1, [r0, #3]
 80053c0:	1d03      	adds	r3, r0, #4
 80053c2:	e7f1      	b.n	80053a8 <__exponent+0x60>

080053c4 <_printf_float>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	ed2d 8b02 	vpush	{d8}
 80053cc:	b08d      	sub	sp, #52	; 0x34
 80053ce:	460c      	mov	r4, r1
 80053d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80053d4:	4616      	mov	r6, r2
 80053d6:	461f      	mov	r7, r3
 80053d8:	4605      	mov	r5, r0
 80053da:	f000 fdc9 	bl	8005f70 <_localeconv_r>
 80053de:	f8d0 a000 	ldr.w	sl, [r0]
 80053e2:	4650      	mov	r0, sl
 80053e4:	f7fa ff64 	bl	80002b0 <strlen>
 80053e8:	2300      	movs	r3, #0
 80053ea:	930a      	str	r3, [sp, #40]	; 0x28
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	9305      	str	r3, [sp, #20]
 80053f0:	f8d8 3000 	ldr.w	r3, [r8]
 80053f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053f8:	3307      	adds	r3, #7
 80053fa:	f023 0307 	bic.w	r3, r3, #7
 80053fe:	f103 0208 	add.w	r2, r3, #8
 8005402:	f8c8 2000 	str.w	r2, [r8]
 8005406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800540a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800540e:	9307      	str	r3, [sp, #28]
 8005410:	f8cd 8018 	str.w	r8, [sp, #24]
 8005414:	ee08 0a10 	vmov	s16, r0
 8005418:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800541c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005420:	4b9e      	ldr	r3, [pc, #632]	; (800569c <_printf_float+0x2d8>)
 8005422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005426:	f7fb fba1 	bl	8000b6c <__aeabi_dcmpun>
 800542a:	bb88      	cbnz	r0, 8005490 <_printf_float+0xcc>
 800542c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005430:	4b9a      	ldr	r3, [pc, #616]	; (800569c <_printf_float+0x2d8>)
 8005432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005436:	f7fb fb7b 	bl	8000b30 <__aeabi_dcmple>
 800543a:	bb48      	cbnz	r0, 8005490 <_printf_float+0xcc>
 800543c:	2200      	movs	r2, #0
 800543e:	2300      	movs	r3, #0
 8005440:	4640      	mov	r0, r8
 8005442:	4649      	mov	r1, r9
 8005444:	f7fb fb6a 	bl	8000b1c <__aeabi_dcmplt>
 8005448:	b110      	cbz	r0, 8005450 <_printf_float+0x8c>
 800544a:	232d      	movs	r3, #45	; 0x2d
 800544c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005450:	4a93      	ldr	r2, [pc, #588]	; (80056a0 <_printf_float+0x2dc>)
 8005452:	4b94      	ldr	r3, [pc, #592]	; (80056a4 <_printf_float+0x2e0>)
 8005454:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005458:	bf94      	ite	ls
 800545a:	4690      	movls	r8, r2
 800545c:	4698      	movhi	r8, r3
 800545e:	2303      	movs	r3, #3
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	9b05      	ldr	r3, [sp, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	f04f 0900 	mov.w	r9, #0
 800546e:	9700      	str	r7, [sp, #0]
 8005470:	4633      	mov	r3, r6
 8005472:	aa0b      	add	r2, sp, #44	; 0x2c
 8005474:	4621      	mov	r1, r4
 8005476:	4628      	mov	r0, r5
 8005478:	f000 f9da 	bl	8005830 <_printf_common>
 800547c:	3001      	adds	r0, #1
 800547e:	f040 8090 	bne.w	80055a2 <_printf_float+0x1de>
 8005482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005486:	b00d      	add	sp, #52	; 0x34
 8005488:	ecbd 8b02 	vpop	{d8}
 800548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	4640      	mov	r0, r8
 8005496:	4649      	mov	r1, r9
 8005498:	f7fb fb68 	bl	8000b6c <__aeabi_dcmpun>
 800549c:	b140      	cbz	r0, 80054b0 <_printf_float+0xec>
 800549e:	464b      	mov	r3, r9
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bfbc      	itt	lt
 80054a4:	232d      	movlt	r3, #45	; 0x2d
 80054a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054aa:	4a7f      	ldr	r2, [pc, #508]	; (80056a8 <_printf_float+0x2e4>)
 80054ac:	4b7f      	ldr	r3, [pc, #508]	; (80056ac <_printf_float+0x2e8>)
 80054ae:	e7d1      	b.n	8005454 <_printf_float+0x90>
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054b6:	9206      	str	r2, [sp, #24]
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	d13f      	bne.n	800553c <_printf_float+0x178>
 80054bc:	2306      	movs	r3, #6
 80054be:	6063      	str	r3, [r4, #4]
 80054c0:	9b05      	ldr	r3, [sp, #20]
 80054c2:	6861      	ldr	r1, [r4, #4]
 80054c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054c8:	2300      	movs	r3, #0
 80054ca:	9303      	str	r3, [sp, #12]
 80054cc:	ab0a      	add	r3, sp, #40	; 0x28
 80054ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80054d2:	ab09      	add	r3, sp, #36	; 0x24
 80054d4:	ec49 8b10 	vmov	d0, r8, r9
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	6022      	str	r2, [r4, #0]
 80054dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054e0:	4628      	mov	r0, r5
 80054e2:	f7ff fecf 	bl	8005284 <__cvt>
 80054e6:	9b06      	ldr	r3, [sp, #24]
 80054e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054ea:	2b47      	cmp	r3, #71	; 0x47
 80054ec:	4680      	mov	r8, r0
 80054ee:	d108      	bne.n	8005502 <_printf_float+0x13e>
 80054f0:	1cc8      	adds	r0, r1, #3
 80054f2:	db02      	blt.n	80054fa <_printf_float+0x136>
 80054f4:	6863      	ldr	r3, [r4, #4]
 80054f6:	4299      	cmp	r1, r3
 80054f8:	dd41      	ble.n	800557e <_printf_float+0x1ba>
 80054fa:	f1ab 0302 	sub.w	r3, fp, #2
 80054fe:	fa5f fb83 	uxtb.w	fp, r3
 8005502:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005506:	d820      	bhi.n	800554a <_printf_float+0x186>
 8005508:	3901      	subs	r1, #1
 800550a:	465a      	mov	r2, fp
 800550c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005510:	9109      	str	r1, [sp, #36]	; 0x24
 8005512:	f7ff ff19 	bl	8005348 <__exponent>
 8005516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005518:	1813      	adds	r3, r2, r0
 800551a:	2a01      	cmp	r2, #1
 800551c:	4681      	mov	r9, r0
 800551e:	6123      	str	r3, [r4, #16]
 8005520:	dc02      	bgt.n	8005528 <_printf_float+0x164>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	07d2      	lsls	r2, r2, #31
 8005526:	d501      	bpl.n	800552c <_printf_float+0x168>
 8005528:	3301      	adds	r3, #1
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005530:	2b00      	cmp	r3, #0
 8005532:	d09c      	beq.n	800546e <_printf_float+0xaa>
 8005534:	232d      	movs	r3, #45	; 0x2d
 8005536:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800553a:	e798      	b.n	800546e <_printf_float+0xaa>
 800553c:	9a06      	ldr	r2, [sp, #24]
 800553e:	2a47      	cmp	r2, #71	; 0x47
 8005540:	d1be      	bne.n	80054c0 <_printf_float+0xfc>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1bc      	bne.n	80054c0 <_printf_float+0xfc>
 8005546:	2301      	movs	r3, #1
 8005548:	e7b9      	b.n	80054be <_printf_float+0xfa>
 800554a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800554e:	d118      	bne.n	8005582 <_printf_float+0x1be>
 8005550:	2900      	cmp	r1, #0
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	dd0b      	ble.n	800556e <_printf_float+0x1aa>
 8005556:	6121      	str	r1, [r4, #16]
 8005558:	b913      	cbnz	r3, 8005560 <_printf_float+0x19c>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	07d0      	lsls	r0, r2, #31
 800555e:	d502      	bpl.n	8005566 <_printf_float+0x1a2>
 8005560:	3301      	adds	r3, #1
 8005562:	440b      	add	r3, r1
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	65a1      	str	r1, [r4, #88]	; 0x58
 8005568:	f04f 0900 	mov.w	r9, #0
 800556c:	e7de      	b.n	800552c <_printf_float+0x168>
 800556e:	b913      	cbnz	r3, 8005576 <_printf_float+0x1b2>
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	07d2      	lsls	r2, r2, #31
 8005574:	d501      	bpl.n	800557a <_printf_float+0x1b6>
 8005576:	3302      	adds	r3, #2
 8005578:	e7f4      	b.n	8005564 <_printf_float+0x1a0>
 800557a:	2301      	movs	r3, #1
 800557c:	e7f2      	b.n	8005564 <_printf_float+0x1a0>
 800557e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005584:	4299      	cmp	r1, r3
 8005586:	db05      	blt.n	8005594 <_printf_float+0x1d0>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	6121      	str	r1, [r4, #16]
 800558c:	07d8      	lsls	r0, r3, #31
 800558e:	d5ea      	bpl.n	8005566 <_printf_float+0x1a2>
 8005590:	1c4b      	adds	r3, r1, #1
 8005592:	e7e7      	b.n	8005564 <_printf_float+0x1a0>
 8005594:	2900      	cmp	r1, #0
 8005596:	bfd4      	ite	le
 8005598:	f1c1 0202 	rsble	r2, r1, #2
 800559c:	2201      	movgt	r2, #1
 800559e:	4413      	add	r3, r2
 80055a0:	e7e0      	b.n	8005564 <_printf_float+0x1a0>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	055a      	lsls	r2, r3, #21
 80055a6:	d407      	bmi.n	80055b8 <_printf_float+0x1f4>
 80055a8:	6923      	ldr	r3, [r4, #16]
 80055aa:	4642      	mov	r2, r8
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	d12c      	bne.n	8005610 <_printf_float+0x24c>
 80055b6:	e764      	b.n	8005482 <_printf_float+0xbe>
 80055b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055bc:	f240 80e0 	bls.w	8005780 <_printf_float+0x3bc>
 80055c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055c4:	2200      	movs	r2, #0
 80055c6:	2300      	movs	r3, #0
 80055c8:	f7fb fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d034      	beq.n	800563a <_printf_float+0x276>
 80055d0:	4a37      	ldr	r2, [pc, #220]	; (80056b0 <_printf_float+0x2ec>)
 80055d2:	2301      	movs	r3, #1
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f af51 	beq.w	8005482 <_printf_float+0xbe>
 80055e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e4:	429a      	cmp	r2, r3
 80055e6:	db02      	blt.n	80055ee <_printf_float+0x22a>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	07d8      	lsls	r0, r3, #31
 80055ec:	d510      	bpl.n	8005610 <_printf_float+0x24c>
 80055ee:	ee18 3a10 	vmov	r3, s16
 80055f2:	4652      	mov	r2, sl
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f af41 	beq.w	8005482 <_printf_float+0xbe>
 8005600:	f04f 0800 	mov.w	r8, #0
 8005604:	f104 091a 	add.w	r9, r4, #26
 8005608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800560a:	3b01      	subs	r3, #1
 800560c:	4543      	cmp	r3, r8
 800560e:	dc09      	bgt.n	8005624 <_printf_float+0x260>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	079b      	lsls	r3, r3, #30
 8005614:	f100 8107 	bmi.w	8005826 <_printf_float+0x462>
 8005618:	68e0      	ldr	r0, [r4, #12]
 800561a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561c:	4298      	cmp	r0, r3
 800561e:	bfb8      	it	lt
 8005620:	4618      	movlt	r0, r3
 8005622:	e730      	b.n	8005486 <_printf_float+0xc2>
 8005624:	2301      	movs	r3, #1
 8005626:	464a      	mov	r2, r9
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f af27 	beq.w	8005482 <_printf_float+0xbe>
 8005634:	f108 0801 	add.w	r8, r8, #1
 8005638:	e7e6      	b.n	8005608 <_printf_float+0x244>
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	dc39      	bgt.n	80056b4 <_printf_float+0x2f0>
 8005640:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <_printf_float+0x2ec>)
 8005642:	2301      	movs	r3, #1
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	f43f af19 	beq.w	8005482 <_printf_float+0xbe>
 8005650:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005654:	4313      	orrs	r3, r2
 8005656:	d102      	bne.n	800565e <_printf_float+0x29a>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d5d8      	bpl.n	8005610 <_printf_float+0x24c>
 800565e:	ee18 3a10 	vmov	r3, s16
 8005662:	4652      	mov	r2, sl
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f af09 	beq.w	8005482 <_printf_float+0xbe>
 8005670:	f04f 0900 	mov.w	r9, #0
 8005674:	f104 0a1a 	add.w	sl, r4, #26
 8005678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567a:	425b      	negs	r3, r3
 800567c:	454b      	cmp	r3, r9
 800567e:	dc01      	bgt.n	8005684 <_printf_float+0x2c0>
 8005680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005682:	e792      	b.n	80055aa <_printf_float+0x1e6>
 8005684:	2301      	movs	r3, #1
 8005686:	4652      	mov	r2, sl
 8005688:	4631      	mov	r1, r6
 800568a:	4628      	mov	r0, r5
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	f43f aef7 	beq.w	8005482 <_printf_float+0xbe>
 8005694:	f109 0901 	add.w	r9, r9, #1
 8005698:	e7ee      	b.n	8005678 <_printf_float+0x2b4>
 800569a:	bf00      	nop
 800569c:	7fefffff 	.word	0x7fefffff
 80056a0:	0800825a 	.word	0x0800825a
 80056a4:	0800825e 	.word	0x0800825e
 80056a8:	08008262 	.word	0x08008262
 80056ac:	08008266 	.word	0x08008266
 80056b0:	0800826a 	.word	0x0800826a
 80056b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056b8:	429a      	cmp	r2, r3
 80056ba:	bfa8      	it	ge
 80056bc:	461a      	movge	r2, r3
 80056be:	2a00      	cmp	r2, #0
 80056c0:	4691      	mov	r9, r2
 80056c2:	dc37      	bgt.n	8005734 <_printf_float+0x370>
 80056c4:	f04f 0b00 	mov.w	fp, #0
 80056c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056cc:	f104 021a 	add.w	r2, r4, #26
 80056d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	eba3 0309 	sub.w	r3, r3, r9
 80056d8:	455b      	cmp	r3, fp
 80056da:	dc33      	bgt.n	8005744 <_printf_float+0x380>
 80056dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056e0:	429a      	cmp	r2, r3
 80056e2:	db3b      	blt.n	800575c <_printf_float+0x398>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	07da      	lsls	r2, r3, #31
 80056e8:	d438      	bmi.n	800575c <_printf_float+0x398>
 80056ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056ee:	eba2 0903 	sub.w	r9, r2, r3
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	4591      	cmp	r9, r2
 80056f8:	bfa8      	it	ge
 80056fa:	4691      	movge	r9, r2
 80056fc:	f1b9 0f00 	cmp.w	r9, #0
 8005700:	dc35      	bgt.n	800576e <_printf_float+0x3aa>
 8005702:	f04f 0800 	mov.w	r8, #0
 8005706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800570a:	f104 0a1a 	add.w	sl, r4, #26
 800570e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	eba3 0309 	sub.w	r3, r3, r9
 8005718:	4543      	cmp	r3, r8
 800571a:	f77f af79 	ble.w	8005610 <_printf_float+0x24c>
 800571e:	2301      	movs	r3, #1
 8005720:	4652      	mov	r2, sl
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f aeaa 	beq.w	8005482 <_printf_float+0xbe>
 800572e:	f108 0801 	add.w	r8, r8, #1
 8005732:	e7ec      	b.n	800570e <_printf_float+0x34a>
 8005734:	4613      	mov	r3, r2
 8005736:	4631      	mov	r1, r6
 8005738:	4642      	mov	r2, r8
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	d1c0      	bne.n	80056c4 <_printf_float+0x300>
 8005742:	e69e      	b.n	8005482 <_printf_float+0xbe>
 8005744:	2301      	movs	r3, #1
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	9205      	str	r2, [sp, #20]
 800574c:	47b8      	blx	r7
 800574e:	3001      	adds	r0, #1
 8005750:	f43f ae97 	beq.w	8005482 <_printf_float+0xbe>
 8005754:	9a05      	ldr	r2, [sp, #20]
 8005756:	f10b 0b01 	add.w	fp, fp, #1
 800575a:	e7b9      	b.n	80056d0 <_printf_float+0x30c>
 800575c:	ee18 3a10 	vmov	r3, s16
 8005760:	4652      	mov	r2, sl
 8005762:	4631      	mov	r1, r6
 8005764:	4628      	mov	r0, r5
 8005766:	47b8      	blx	r7
 8005768:	3001      	adds	r0, #1
 800576a:	d1be      	bne.n	80056ea <_printf_float+0x326>
 800576c:	e689      	b.n	8005482 <_printf_float+0xbe>
 800576e:	9a05      	ldr	r2, [sp, #20]
 8005770:	464b      	mov	r3, r9
 8005772:	4442      	add	r2, r8
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	47b8      	blx	r7
 800577a:	3001      	adds	r0, #1
 800577c:	d1c1      	bne.n	8005702 <_printf_float+0x33e>
 800577e:	e680      	b.n	8005482 <_printf_float+0xbe>
 8005780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005782:	2a01      	cmp	r2, #1
 8005784:	dc01      	bgt.n	800578a <_printf_float+0x3c6>
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d53a      	bpl.n	8005800 <_printf_float+0x43c>
 800578a:	2301      	movs	r3, #1
 800578c:	4642      	mov	r2, r8
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae74 	beq.w	8005482 <_printf_float+0xbe>
 800579a:	ee18 3a10 	vmov	r3, s16
 800579e:	4652      	mov	r2, sl
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	f43f ae6b 	beq.w	8005482 <_printf_float+0xbe>
 80057ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057b0:	2200      	movs	r2, #0
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057b8:	f7fb f9a6 	bl	8000b08 <__aeabi_dcmpeq>
 80057bc:	b9d8      	cbnz	r0, 80057f6 <_printf_float+0x432>
 80057be:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80057c2:	f108 0201 	add.w	r2, r8, #1
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	d10e      	bne.n	80057ee <_printf_float+0x42a>
 80057d0:	e657      	b.n	8005482 <_printf_float+0xbe>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4652      	mov	r2, sl
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae50 	beq.w	8005482 <_printf_float+0xbe>
 80057e2:	f108 0801 	add.w	r8, r8, #1
 80057e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	4543      	cmp	r3, r8
 80057ec:	dcf1      	bgt.n	80057d2 <_printf_float+0x40e>
 80057ee:	464b      	mov	r3, r9
 80057f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057f4:	e6da      	b.n	80055ac <_printf_float+0x1e8>
 80057f6:	f04f 0800 	mov.w	r8, #0
 80057fa:	f104 0a1a 	add.w	sl, r4, #26
 80057fe:	e7f2      	b.n	80057e6 <_printf_float+0x422>
 8005800:	2301      	movs	r3, #1
 8005802:	4642      	mov	r2, r8
 8005804:	e7df      	b.n	80057c6 <_printf_float+0x402>
 8005806:	2301      	movs	r3, #1
 8005808:	464a      	mov	r2, r9
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae36 	beq.w	8005482 <_printf_float+0xbe>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	68e3      	ldr	r3, [r4, #12]
 800581c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800581e:	1a5b      	subs	r3, r3, r1
 8005820:	4543      	cmp	r3, r8
 8005822:	dcf0      	bgt.n	8005806 <_printf_float+0x442>
 8005824:	e6f8      	b.n	8005618 <_printf_float+0x254>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0919 	add.w	r9, r4, #25
 800582e:	e7f4      	b.n	800581a <_printf_float+0x456>

08005830 <_printf_common>:
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	4616      	mov	r6, r2
 8005836:	4699      	mov	r9, r3
 8005838:	688a      	ldr	r2, [r1, #8]
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005840:	4293      	cmp	r3, r2
 8005842:	bfb8      	it	lt
 8005844:	4613      	movlt	r3, r2
 8005846:	6033      	str	r3, [r6, #0]
 8005848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800584c:	4607      	mov	r7, r0
 800584e:	460c      	mov	r4, r1
 8005850:	b10a      	cbz	r2, 8005856 <_printf_common+0x26>
 8005852:	3301      	adds	r3, #1
 8005854:	6033      	str	r3, [r6, #0]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	0699      	lsls	r1, r3, #26
 800585a:	bf42      	ittt	mi
 800585c:	6833      	ldrmi	r3, [r6, #0]
 800585e:	3302      	addmi	r3, #2
 8005860:	6033      	strmi	r3, [r6, #0]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	f015 0506 	ands.w	r5, r5, #6
 8005868:	d106      	bne.n	8005878 <_printf_common+0x48>
 800586a:	f104 0a19 	add.w	sl, r4, #25
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	6832      	ldr	r2, [r6, #0]
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	42ab      	cmp	r3, r5
 8005876:	dc26      	bgt.n	80058c6 <_printf_common+0x96>
 8005878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800587c:	1e13      	subs	r3, r2, #0
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	bf18      	it	ne
 8005882:	2301      	movne	r3, #1
 8005884:	0692      	lsls	r2, r2, #26
 8005886:	d42b      	bmi.n	80058e0 <_printf_common+0xb0>
 8005888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800588c:	4649      	mov	r1, r9
 800588e:	4638      	mov	r0, r7
 8005890:	47c0      	blx	r8
 8005892:	3001      	adds	r0, #1
 8005894:	d01e      	beq.n	80058d4 <_printf_common+0xa4>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	6922      	ldr	r2, [r4, #16]
 800589a:	f003 0306 	and.w	r3, r3, #6
 800589e:	2b04      	cmp	r3, #4
 80058a0:	bf02      	ittt	eq
 80058a2:	68e5      	ldreq	r5, [r4, #12]
 80058a4:	6833      	ldreq	r3, [r6, #0]
 80058a6:	1aed      	subeq	r5, r5, r3
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	bf0c      	ite	eq
 80058ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b0:	2500      	movne	r5, #0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	bfc4      	itt	gt
 80058b6:	1a9b      	subgt	r3, r3, r2
 80058b8:	18ed      	addgt	r5, r5, r3
 80058ba:	2600      	movs	r6, #0
 80058bc:	341a      	adds	r4, #26
 80058be:	42b5      	cmp	r5, r6
 80058c0:	d11a      	bne.n	80058f8 <_printf_common+0xc8>
 80058c2:	2000      	movs	r0, #0
 80058c4:	e008      	b.n	80058d8 <_printf_common+0xa8>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	4649      	mov	r1, r9
 80058cc:	4638      	mov	r0, r7
 80058ce:	47c0      	blx	r8
 80058d0:	3001      	adds	r0, #1
 80058d2:	d103      	bne.n	80058dc <_printf_common+0xac>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058dc:	3501      	adds	r5, #1
 80058de:	e7c6      	b.n	800586e <_printf_common+0x3e>
 80058e0:	18e1      	adds	r1, r4, r3
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	2030      	movs	r0, #48	; 0x30
 80058e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ea:	4422      	add	r2, r4
 80058ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058f4:	3302      	adds	r3, #2
 80058f6:	e7c7      	b.n	8005888 <_printf_common+0x58>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4622      	mov	r2, r4
 80058fc:	4649      	mov	r1, r9
 80058fe:	4638      	mov	r0, r7
 8005900:	47c0      	blx	r8
 8005902:	3001      	adds	r0, #1
 8005904:	d0e6      	beq.n	80058d4 <_printf_common+0xa4>
 8005906:	3601      	adds	r6, #1
 8005908:	e7d9      	b.n	80058be <_printf_common+0x8e>
	...

0800590c <_printf_i>:
 800590c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	7e0f      	ldrb	r7, [r1, #24]
 8005912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005914:	2f78      	cmp	r7, #120	; 0x78
 8005916:	4691      	mov	r9, r2
 8005918:	4680      	mov	r8, r0
 800591a:	460c      	mov	r4, r1
 800591c:	469a      	mov	sl, r3
 800591e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005922:	d807      	bhi.n	8005934 <_printf_i+0x28>
 8005924:	2f62      	cmp	r7, #98	; 0x62
 8005926:	d80a      	bhi.n	800593e <_printf_i+0x32>
 8005928:	2f00      	cmp	r7, #0
 800592a:	f000 80d4 	beq.w	8005ad6 <_printf_i+0x1ca>
 800592e:	2f58      	cmp	r7, #88	; 0x58
 8005930:	f000 80c0 	beq.w	8005ab4 <_printf_i+0x1a8>
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800593c:	e03a      	b.n	80059b4 <_printf_i+0xa8>
 800593e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005942:	2b15      	cmp	r3, #21
 8005944:	d8f6      	bhi.n	8005934 <_printf_i+0x28>
 8005946:	a101      	add	r1, pc, #4	; (adr r1, 800594c <_printf_i+0x40>)
 8005948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059b9 	.word	0x080059b9
 8005954:	08005935 	.word	0x08005935
 8005958:	08005935 	.word	0x08005935
 800595c:	08005935 	.word	0x08005935
 8005960:	08005935 	.word	0x08005935
 8005964:	080059b9 	.word	0x080059b9
 8005968:	08005935 	.word	0x08005935
 800596c:	08005935 	.word	0x08005935
 8005970:	08005935 	.word	0x08005935
 8005974:	08005935 	.word	0x08005935
 8005978:	08005abd 	.word	0x08005abd
 800597c:	080059e5 	.word	0x080059e5
 8005980:	08005a77 	.word	0x08005a77
 8005984:	08005935 	.word	0x08005935
 8005988:	08005935 	.word	0x08005935
 800598c:	08005adf 	.word	0x08005adf
 8005990:	08005935 	.word	0x08005935
 8005994:	080059e5 	.word	0x080059e5
 8005998:	08005935 	.word	0x08005935
 800599c:	08005935 	.word	0x08005935
 80059a0:	08005a7f 	.word	0x08005a7f
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	602a      	str	r2, [r5, #0]
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b4:	2301      	movs	r3, #1
 80059b6:	e09f      	b.n	8005af8 <_printf_i+0x1ec>
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	0607      	lsls	r7, r0, #24
 80059be:	f103 0104 	add.w	r1, r3, #4
 80059c2:	6029      	str	r1, [r5, #0]
 80059c4:	d501      	bpl.n	80059ca <_printf_i+0xbe>
 80059c6:	681e      	ldr	r6, [r3, #0]
 80059c8:	e003      	b.n	80059d2 <_printf_i+0xc6>
 80059ca:	0646      	lsls	r6, r0, #25
 80059cc:	d5fb      	bpl.n	80059c6 <_printf_i+0xba>
 80059ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	da03      	bge.n	80059de <_printf_i+0xd2>
 80059d6:	232d      	movs	r3, #45	; 0x2d
 80059d8:	4276      	negs	r6, r6
 80059da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059de:	485a      	ldr	r0, [pc, #360]	; (8005b48 <_printf_i+0x23c>)
 80059e0:	230a      	movs	r3, #10
 80059e2:	e012      	b.n	8005a0a <_printf_i+0xfe>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	6820      	ldr	r0, [r4, #0]
 80059e8:	1d19      	adds	r1, r3, #4
 80059ea:	6029      	str	r1, [r5, #0]
 80059ec:	0605      	lsls	r5, r0, #24
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0xe8>
 80059f0:	681e      	ldr	r6, [r3, #0]
 80059f2:	e002      	b.n	80059fa <_printf_i+0xee>
 80059f4:	0641      	lsls	r1, r0, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0xe4>
 80059f8:	881e      	ldrh	r6, [r3, #0]
 80059fa:	4853      	ldr	r0, [pc, #332]	; (8005b48 <_printf_i+0x23c>)
 80059fc:	2f6f      	cmp	r7, #111	; 0x6f
 80059fe:	bf0c      	ite	eq
 8005a00:	2308      	moveq	r3, #8
 8005a02:	230a      	movne	r3, #10
 8005a04:	2100      	movs	r1, #0
 8005a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a0a:	6865      	ldr	r5, [r4, #4]
 8005a0c:	60a5      	str	r5, [r4, #8]
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	bfa2      	ittt	ge
 8005a12:	6821      	ldrge	r1, [r4, #0]
 8005a14:	f021 0104 	bicge.w	r1, r1, #4
 8005a18:	6021      	strge	r1, [r4, #0]
 8005a1a:	b90e      	cbnz	r6, 8005a20 <_printf_i+0x114>
 8005a1c:	2d00      	cmp	r5, #0
 8005a1e:	d04b      	beq.n	8005ab8 <_printf_i+0x1ac>
 8005a20:	4615      	mov	r5, r2
 8005a22:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a26:	fb03 6711 	mls	r7, r3, r1, r6
 8005a2a:	5dc7      	ldrb	r7, [r0, r7]
 8005a2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a30:	4637      	mov	r7, r6
 8005a32:	42bb      	cmp	r3, r7
 8005a34:	460e      	mov	r6, r1
 8005a36:	d9f4      	bls.n	8005a22 <_printf_i+0x116>
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d10b      	bne.n	8005a54 <_printf_i+0x148>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	07de      	lsls	r6, r3, #31
 8005a40:	d508      	bpl.n	8005a54 <_printf_i+0x148>
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	4299      	cmp	r1, r3
 8005a48:	bfde      	ittt	le
 8005a4a:	2330      	movle	r3, #48	; 0x30
 8005a4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a54:	1b52      	subs	r2, r2, r5
 8005a56:	6122      	str	r2, [r4, #16]
 8005a58:	f8cd a000 	str.w	sl, [sp]
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	aa03      	add	r2, sp, #12
 8005a60:	4621      	mov	r1, r4
 8005a62:	4640      	mov	r0, r8
 8005a64:	f7ff fee4 	bl	8005830 <_printf_common>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d14a      	bne.n	8005b02 <_printf_i+0x1f6>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a70:	b004      	add	sp, #16
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	f043 0320 	orr.w	r3, r3, #32
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	4833      	ldr	r0, [pc, #204]	; (8005b4c <_printf_i+0x240>)
 8005a80:	2778      	movs	r7, #120	; 0x78
 8005a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	6829      	ldr	r1, [r5, #0]
 8005a8a:	061f      	lsls	r7, r3, #24
 8005a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a90:	d402      	bmi.n	8005a98 <_printf_i+0x18c>
 8005a92:	065f      	lsls	r7, r3, #25
 8005a94:	bf48      	it	mi
 8005a96:	b2b6      	uxthmi	r6, r6
 8005a98:	07df      	lsls	r7, r3, #31
 8005a9a:	bf48      	it	mi
 8005a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8005aa0:	6029      	str	r1, [r5, #0]
 8005aa2:	bf48      	it	mi
 8005aa4:	6023      	strmi	r3, [r4, #0]
 8005aa6:	b91e      	cbnz	r6, 8005ab0 <_printf_i+0x1a4>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	f023 0320 	bic.w	r3, r3, #32
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	e7a7      	b.n	8005a04 <_printf_i+0xf8>
 8005ab4:	4824      	ldr	r0, [pc, #144]	; (8005b48 <_printf_i+0x23c>)
 8005ab6:	e7e4      	b.n	8005a82 <_printf_i+0x176>
 8005ab8:	4615      	mov	r5, r2
 8005aba:	e7bd      	b.n	8005a38 <_printf_i+0x12c>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	6826      	ldr	r6, [r4, #0]
 8005ac0:	6961      	ldr	r1, [r4, #20]
 8005ac2:	1d18      	adds	r0, r3, #4
 8005ac4:	6028      	str	r0, [r5, #0]
 8005ac6:	0635      	lsls	r5, r6, #24
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	d501      	bpl.n	8005ad0 <_printf_i+0x1c4>
 8005acc:	6019      	str	r1, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <_printf_i+0x1ca>
 8005ad0:	0670      	lsls	r0, r6, #25
 8005ad2:	d5fb      	bpl.n	8005acc <_printf_i+0x1c0>
 8005ad4:	8019      	strh	r1, [r3, #0]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6123      	str	r3, [r4, #16]
 8005ada:	4615      	mov	r5, r2
 8005adc:	e7bc      	b.n	8005a58 <_printf_i+0x14c>
 8005ade:	682b      	ldr	r3, [r5, #0]
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	681d      	ldr	r5, [r3, #0]
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7fa fb90 	bl	8000210 <memchr>
 8005af0:	b108      	cbz	r0, 8005af6 <_printf_i+0x1ea>
 8005af2:	1b40      	subs	r0, r0, r5
 8005af4:	6060      	str	r0, [r4, #4]
 8005af6:	6863      	ldr	r3, [r4, #4]
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	2300      	movs	r3, #0
 8005afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b00:	e7aa      	b.n	8005a58 <_printf_i+0x14c>
 8005b02:	6923      	ldr	r3, [r4, #16]
 8005b04:	462a      	mov	r2, r5
 8005b06:	4649      	mov	r1, r9
 8005b08:	4640      	mov	r0, r8
 8005b0a:	47d0      	blx	sl
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d0ad      	beq.n	8005a6c <_printf_i+0x160>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	079b      	lsls	r3, r3, #30
 8005b14:	d413      	bmi.n	8005b3e <_printf_i+0x232>
 8005b16:	68e0      	ldr	r0, [r4, #12]
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	4298      	cmp	r0, r3
 8005b1c:	bfb8      	it	lt
 8005b1e:	4618      	movlt	r0, r3
 8005b20:	e7a6      	b.n	8005a70 <_printf_i+0x164>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4632      	mov	r2, r6
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	47d0      	blx	sl
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d09d      	beq.n	8005a6c <_printf_i+0x160>
 8005b30:	3501      	adds	r5, #1
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	9903      	ldr	r1, [sp, #12]
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dcf2      	bgt.n	8005b22 <_printf_i+0x216>
 8005b3c:	e7eb      	b.n	8005b16 <_printf_i+0x20a>
 8005b3e:	2500      	movs	r5, #0
 8005b40:	f104 0619 	add.w	r6, r4, #25
 8005b44:	e7f5      	b.n	8005b32 <_printf_i+0x226>
 8005b46:	bf00      	nop
 8005b48:	0800826c 	.word	0x0800826c
 8005b4c:	0800827d 	.word	0x0800827d

08005b50 <std>:
 8005b50:	2300      	movs	r3, #0
 8005b52:	b510      	push	{r4, lr}
 8005b54:	4604      	mov	r4, r0
 8005b56:	e9c0 3300 	strd	r3, r3, [r0]
 8005b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b5e:	6083      	str	r3, [r0, #8]
 8005b60:	8181      	strh	r1, [r0, #12]
 8005b62:	6643      	str	r3, [r0, #100]	; 0x64
 8005b64:	81c2      	strh	r2, [r0, #14]
 8005b66:	6183      	str	r3, [r0, #24]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	305c      	adds	r0, #92	; 0x5c
 8005b6e:	f000 f9f7 	bl	8005f60 <memset>
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <std+0x58>)
 8005b74:	6263      	str	r3, [r4, #36]	; 0x24
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <std+0x5c>)
 8005b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <std+0x60>)
 8005b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <std+0x64>)
 8005b80:	6323      	str	r3, [r4, #48]	; 0x30
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <std+0x68>)
 8005b84:	6224      	str	r4, [r4, #32]
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d006      	beq.n	8005b98 <std+0x48>
 8005b8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b8e:	4294      	cmp	r4, r2
 8005b90:	d002      	beq.n	8005b98 <std+0x48>
 8005b92:	33d0      	adds	r3, #208	; 0xd0
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d105      	bne.n	8005ba4 <std+0x54>
 8005b98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba0:	f000 ba5a 	b.w	8006058 <__retarget_lock_init_recursive>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	08005db1 	.word	0x08005db1
 8005bac:	08005dd3 	.word	0x08005dd3
 8005bb0:	08005e0b 	.word	0x08005e0b
 8005bb4:	08005e2f 	.word	0x08005e2f
 8005bb8:	20000388 	.word	0x20000388

08005bbc <stdio_exit_handler>:
 8005bbc:	4a02      	ldr	r2, [pc, #8]	; (8005bc8 <stdio_exit_handler+0xc>)
 8005bbe:	4903      	ldr	r1, [pc, #12]	; (8005bcc <stdio_exit_handler+0x10>)
 8005bc0:	4803      	ldr	r0, [pc, #12]	; (8005bd0 <stdio_exit_handler+0x14>)
 8005bc2:	f000 b869 	b.w	8005c98 <_fwalk_sglue>
 8005bc6:	bf00      	nop
 8005bc8:	2000005c 	.word	0x2000005c
 8005bcc:	080079e1 	.word	0x080079e1
 8005bd0:	20000068 	.word	0x20000068

08005bd4 <cleanup_stdio>:
 8005bd4:	6841      	ldr	r1, [r0, #4]
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <cleanup_stdio+0x34>)
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	d001      	beq.n	8005be4 <cleanup_stdio+0x10>
 8005be0:	f001 fefe 	bl	80079e0 <_fflush_r>
 8005be4:	68a1      	ldr	r1, [r4, #8]
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <cleanup_stdio+0x38>)
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <cleanup_stdio+0x1e>
 8005bec:	4620      	mov	r0, r4
 8005bee:	f001 fef7 	bl	80079e0 <_fflush_r>
 8005bf2:	68e1      	ldr	r1, [r4, #12]
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <cleanup_stdio+0x3c>)
 8005bf6:	4299      	cmp	r1, r3
 8005bf8:	d004      	beq.n	8005c04 <cleanup_stdio+0x30>
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c00:	f001 beee 	b.w	80079e0 <_fflush_r>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	bf00      	nop
 8005c08:	20000388 	.word	0x20000388
 8005c0c:	200003f0 	.word	0x200003f0
 8005c10:	20000458 	.word	0x20000458

08005c14 <global_stdio_init.part.0>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <global_stdio_init.part.0+0x30>)
 8005c18:	4c0b      	ldr	r4, [pc, #44]	; (8005c48 <global_stdio_init.part.0+0x34>)
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <global_stdio_init.part.0+0x38>)
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	2200      	movs	r2, #0
 8005c22:	2104      	movs	r1, #4
 8005c24:	f7ff ff94 	bl	8005b50 <std>
 8005c28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	2109      	movs	r1, #9
 8005c30:	f7ff ff8e 	bl	8005b50 <std>
 8005c34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c38:	2202      	movs	r2, #2
 8005c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c3e:	2112      	movs	r1, #18
 8005c40:	f7ff bf86 	b.w	8005b50 <std>
 8005c44:	200004c0 	.word	0x200004c0
 8005c48:	20000388 	.word	0x20000388
 8005c4c:	08005bbd 	.word	0x08005bbd

08005c50 <__sfp_lock_acquire>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sfp_lock_acquire+0x8>)
 8005c52:	f000 ba02 	b.w	800605a <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	200004c9 	.word	0x200004c9

08005c5c <__sfp_lock_release>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__sfp_lock_release+0x8>)
 8005c5e:	f000 b9fd 	b.w	800605c <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	200004c9 	.word	0x200004c9

08005c68 <__sinit>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	f7ff fff0 	bl	8005c50 <__sfp_lock_acquire>
 8005c70:	6a23      	ldr	r3, [r4, #32]
 8005c72:	b11b      	cbz	r3, 8005c7c <__sinit+0x14>
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f7ff bff0 	b.w	8005c5c <__sfp_lock_release>
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <__sinit+0x28>)
 8005c7e:	6223      	str	r3, [r4, #32]
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <__sinit+0x2c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f5      	bne.n	8005c74 <__sinit+0xc>
 8005c88:	f7ff ffc4 	bl	8005c14 <global_stdio_init.part.0>
 8005c8c:	e7f2      	b.n	8005c74 <__sinit+0xc>
 8005c8e:	bf00      	nop
 8005c90:	08005bd5 	.word	0x08005bd5
 8005c94:	200004c0 	.word	0x200004c0

08005c98 <_fwalk_sglue>:
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4688      	mov	r8, r1
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	2600      	movs	r6, #0
 8005ca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ca8:	f1b9 0901 	subs.w	r9, r9, #1
 8005cac:	d505      	bpl.n	8005cba <_fwalk_sglue+0x22>
 8005cae:	6824      	ldr	r4, [r4, #0]
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	d1f7      	bne.n	8005ca4 <_fwalk_sglue+0xc>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cba:	89ab      	ldrh	r3, [r5, #12]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d907      	bls.n	8005cd0 <_fwalk_sglue+0x38>
 8005cc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	d003      	beq.n	8005cd0 <_fwalk_sglue+0x38>
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c0      	blx	r8
 8005cce:	4306      	orrs	r6, r0
 8005cd0:	3568      	adds	r5, #104	; 0x68
 8005cd2:	e7e9      	b.n	8005ca8 <_fwalk_sglue+0x10>

08005cd4 <iprintf>:
 8005cd4:	b40f      	push	{r0, r1, r2, r3}
 8005cd6:	b507      	push	{r0, r1, r2, lr}
 8005cd8:	4906      	ldr	r1, [pc, #24]	; (8005cf4 <iprintf+0x20>)
 8005cda:	ab04      	add	r3, sp, #16
 8005cdc:	6808      	ldr	r0, [r1, #0]
 8005cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce2:	6881      	ldr	r1, [r0, #8]
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f001 fcdb 	bl	80076a0 <_vfiprintf_r>
 8005cea:	b003      	add	sp, #12
 8005cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf0:	b004      	add	sp, #16
 8005cf2:	4770      	bx	lr
 8005cf4:	200000b4 	.word	0x200000b4

08005cf8 <_puts_r>:
 8005cf8:	6a03      	ldr	r3, [r0, #32]
 8005cfa:	b570      	push	{r4, r5, r6, lr}
 8005cfc:	6884      	ldr	r4, [r0, #8]
 8005cfe:	4605      	mov	r5, r0
 8005d00:	460e      	mov	r6, r1
 8005d02:	b90b      	cbnz	r3, 8005d08 <_puts_r+0x10>
 8005d04:	f7ff ffb0 	bl	8005c68 <__sinit>
 8005d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0a:	07db      	lsls	r3, r3, #31
 8005d0c:	d405      	bmi.n	8005d1a <_puts_r+0x22>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	0598      	lsls	r0, r3, #22
 8005d12:	d402      	bmi.n	8005d1a <_puts_r+0x22>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f000 f9a0 	bl	800605a <__retarget_lock_acquire_recursive>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	0719      	lsls	r1, r3, #28
 8005d1e:	d513      	bpl.n	8005d48 <_puts_r+0x50>
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	b18b      	cbz	r3, 8005d48 <_puts_r+0x50>
 8005d24:	3e01      	subs	r6, #1
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	60a3      	str	r3, [r4, #8]
 8005d30:	b9e9      	cbnz	r1, 8005d6e <_puts_r+0x76>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	da2e      	bge.n	8005d94 <_puts_r+0x9c>
 8005d36:	4622      	mov	r2, r4
 8005d38:	210a      	movs	r1, #10
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f000 f87b 	bl	8005e36 <__swbuf_r>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d007      	beq.n	8005d54 <_puts_r+0x5c>
 8005d44:	250a      	movs	r5, #10
 8005d46:	e007      	b.n	8005d58 <_puts_r+0x60>
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f000 f8b0 	bl	8005eb0 <__swsetup_r>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d0e7      	beq.n	8005d24 <_puts_r+0x2c>
 8005d54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d5a:	07da      	lsls	r2, r3, #31
 8005d5c:	d405      	bmi.n	8005d6a <_puts_r+0x72>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	d402      	bmi.n	8005d6a <_puts_r+0x72>
 8005d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d66:	f000 f979 	bl	800605c <__retarget_lock_release_recursive>
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da04      	bge.n	8005d7c <_puts_r+0x84>
 8005d72:	69a2      	ldr	r2, [r4, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	dc06      	bgt.n	8005d86 <_puts_r+0x8e>
 8005d78:	290a      	cmp	r1, #10
 8005d7a:	d004      	beq.n	8005d86 <_puts_r+0x8e>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	6022      	str	r2, [r4, #0]
 8005d82:	7019      	strb	r1, [r3, #0]
 8005d84:	e7cf      	b.n	8005d26 <_puts_r+0x2e>
 8005d86:	4622      	mov	r2, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 f854 	bl	8005e36 <__swbuf_r>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d1c9      	bne.n	8005d26 <_puts_r+0x2e>
 8005d92:	e7df      	b.n	8005d54 <_puts_r+0x5c>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	250a      	movs	r5, #10
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	6022      	str	r2, [r4, #0]
 8005d9c:	701d      	strb	r5, [r3, #0]
 8005d9e:	e7db      	b.n	8005d58 <_puts_r+0x60>

08005da0 <puts>:
 8005da0:	4b02      	ldr	r3, [pc, #8]	; (8005dac <puts+0xc>)
 8005da2:	4601      	mov	r1, r0
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	f7ff bfa7 	b.w	8005cf8 <_puts_r>
 8005daa:	bf00      	nop
 8005dac:	200000b4 	.word	0x200000b4

08005db0 <__sread>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	460c      	mov	r4, r1
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	f000 f900 	bl	8005fbc <_read_r>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	bfab      	itete	ge
 8005dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc4:	181b      	addge	r3, r3, r0
 8005dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dca:	bfac      	ite	ge
 8005dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dce:	81a3      	strhlt	r3, [r4, #12]
 8005dd0:	bd10      	pop	{r4, pc}

08005dd2 <__swrite>:
 8005dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	898b      	ldrh	r3, [r1, #12]
 8005dda:	05db      	lsls	r3, r3, #23
 8005ddc:	4605      	mov	r5, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	4616      	mov	r6, r2
 8005de2:	d505      	bpl.n	8005df0 <__swrite+0x1e>
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	2302      	movs	r3, #2
 8005dea:	2200      	movs	r2, #0
 8005dec:	f000 f8d4 	bl	8005f98 <_lseek_r>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4628      	mov	r0, r5
 8005e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e06:	f000 b8eb 	b.w	8005fe0 <_write_r>

08005e0a <__sseek>:
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e12:	f000 f8c1 	bl	8005f98 <_lseek_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	bf15      	itete	ne
 8005e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e26:	81a3      	strheq	r3, [r4, #12]
 8005e28:	bf18      	it	ne
 8005e2a:	81a3      	strhne	r3, [r4, #12]
 8005e2c:	bd10      	pop	{r4, pc}

08005e2e <__sclose>:
 8005e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e32:	f000 b8a1 	b.w	8005f78 <_close_r>

08005e36 <__swbuf_r>:
 8005e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e38:	460e      	mov	r6, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	b118      	cbz	r0, 8005e48 <__swbuf_r+0x12>
 8005e40:	6a03      	ldr	r3, [r0, #32]
 8005e42:	b90b      	cbnz	r3, 8005e48 <__swbuf_r+0x12>
 8005e44:	f7ff ff10 	bl	8005c68 <__sinit>
 8005e48:	69a3      	ldr	r3, [r4, #24]
 8005e4a:	60a3      	str	r3, [r4, #8]
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	071a      	lsls	r2, r3, #28
 8005e50:	d525      	bpl.n	8005e9e <__swbuf_r+0x68>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	b31b      	cbz	r3, 8005e9e <__swbuf_r+0x68>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	1a98      	subs	r0, r3, r2
 8005e5c:	6963      	ldr	r3, [r4, #20]
 8005e5e:	b2f6      	uxtb	r6, r6
 8005e60:	4283      	cmp	r3, r0
 8005e62:	4637      	mov	r7, r6
 8005e64:	dc04      	bgt.n	8005e70 <__swbuf_r+0x3a>
 8005e66:	4621      	mov	r1, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f001 fdb9 	bl	80079e0 <_fflush_r>
 8005e6e:	b9e0      	cbnz	r0, 8005eaa <__swbuf_r+0x74>
 8005e70:	68a3      	ldr	r3, [r4, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	60a3      	str	r3, [r4, #8]
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	701e      	strb	r6, [r3, #0]
 8005e7e:	6962      	ldr	r2, [r4, #20]
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d004      	beq.n	8005e90 <__swbuf_r+0x5a>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	07db      	lsls	r3, r3, #31
 8005e8a:	d506      	bpl.n	8005e9a <__swbuf_r+0x64>
 8005e8c:	2e0a      	cmp	r6, #10
 8005e8e:	d104      	bne.n	8005e9a <__swbuf_r+0x64>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4628      	mov	r0, r5
 8005e94:	f001 fda4 	bl	80079e0 <_fflush_r>
 8005e98:	b938      	cbnz	r0, 8005eaa <__swbuf_r+0x74>
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f805 	bl	8005eb0 <__swsetup_r>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d0d5      	beq.n	8005e56 <__swbuf_r+0x20>
 8005eaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005eae:	e7f4      	b.n	8005e9a <__swbuf_r+0x64>

08005eb0 <__swsetup_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <__swsetup_r+0xac>)
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	460c      	mov	r4, r1
 8005eba:	b118      	cbz	r0, 8005ec4 <__swsetup_r+0x14>
 8005ebc:	6a03      	ldr	r3, [r0, #32]
 8005ebe:	b90b      	cbnz	r3, 8005ec4 <__swsetup_r+0x14>
 8005ec0:	f7ff fed2 	bl	8005c68 <__sinit>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eca:	0718      	lsls	r0, r3, #28
 8005ecc:	d422      	bmi.n	8005f14 <__swsetup_r+0x64>
 8005ece:	06d9      	lsls	r1, r3, #27
 8005ed0:	d407      	bmi.n	8005ee2 <__swsetup_r+0x32>
 8005ed2:	2309      	movs	r3, #9
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005eda:	81a3      	strh	r3, [r4, #12]
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee0:	e034      	b.n	8005f4c <__swsetup_r+0x9c>
 8005ee2:	0758      	lsls	r0, r3, #29
 8005ee4:	d512      	bpl.n	8005f0c <__swsetup_r+0x5c>
 8005ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ee8:	b141      	cbz	r1, 8005efc <__swsetup_r+0x4c>
 8005eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	d002      	beq.n	8005ef8 <__swsetup_r+0x48>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 ff2e 	bl	8006d54 <_free_r>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6363      	str	r3, [r4, #52]	; 0x34
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	2300      	movs	r3, #0
 8005f06:	6063      	str	r3, [r4, #4]
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	6023      	str	r3, [r4, #0]
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	f043 0308 	orr.w	r3, r3, #8
 8005f12:	81a3      	strh	r3, [r4, #12]
 8005f14:	6923      	ldr	r3, [r4, #16]
 8005f16:	b94b      	cbnz	r3, 8005f2c <__swsetup_r+0x7c>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f22:	d003      	beq.n	8005f2c <__swsetup_r+0x7c>
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f001 fda8 	bl	8007a7c <__smakebuf_r>
 8005f2c:	89a0      	ldrh	r0, [r4, #12]
 8005f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f32:	f010 0301 	ands.w	r3, r0, #1
 8005f36:	d00a      	beq.n	8005f4e <__swsetup_r+0x9e>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60a3      	str	r3, [r4, #8]
 8005f3c:	6963      	ldr	r3, [r4, #20]
 8005f3e:	425b      	negs	r3, r3
 8005f40:	61a3      	str	r3, [r4, #24]
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	b943      	cbnz	r3, 8005f58 <__swsetup_r+0xa8>
 8005f46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f4a:	d1c4      	bne.n	8005ed6 <__swsetup_r+0x26>
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	0781      	lsls	r1, r0, #30
 8005f50:	bf58      	it	pl
 8005f52:	6963      	ldrpl	r3, [r4, #20]
 8005f54:	60a3      	str	r3, [r4, #8]
 8005f56:	e7f4      	b.n	8005f42 <__swsetup_r+0x92>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	e7f7      	b.n	8005f4c <__swsetup_r+0x9c>
 8005f5c:	200000b4 	.word	0x200000b4

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <_localeconv_r>:
 8005f70:	4800      	ldr	r0, [pc, #0]	; (8005f74 <_localeconv_r+0x4>)
 8005f72:	4770      	bx	lr
 8005f74:	200001a8 	.word	0x200001a8

08005f78 <_close_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d06      	ldr	r5, [pc, #24]	; (8005f94 <_close_r+0x1c>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fb fadd 	bl	8001542 <_close>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_close_r+0x1a>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_close_r+0x1a>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	200004c4 	.word	0x200004c4

08005f98 <_lseek_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	; (8005fb8 <_lseek_r+0x20>)
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fb faf2 	bl	8001590 <_lseek>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_lseek_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_lseek_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	200004c4 	.word	0x200004c4

08005fbc <_read_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d07      	ldr	r5, [pc, #28]	; (8005fdc <_read_r+0x20>)
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f7fb fa80 	bl	80014d0 <_read>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_read_r+0x1e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_read_r+0x1e>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200004c4 	.word	0x200004c4

08005fe0 <_write_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_write_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fb fa8b 	bl	800150a <_write>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_write_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_write_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	200004c4 	.word	0x200004c4

08006004 <__errno>:
 8006004:	4b01      	ldr	r3, [pc, #4]	; (800600c <__errno+0x8>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	200000b4 	.word	0x200000b4

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4d0d      	ldr	r5, [pc, #52]	; (8006048 <__libc_init_array+0x38>)
 8006014:	4c0d      	ldr	r4, [pc, #52]	; (800604c <__libc_init_array+0x3c>)
 8006016:	1b64      	subs	r4, r4, r5
 8006018:	10a4      	asrs	r4, r4, #2
 800601a:	2600      	movs	r6, #0
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	4d0b      	ldr	r5, [pc, #44]	; (8006050 <__libc_init_array+0x40>)
 8006022:	4c0c      	ldr	r4, [pc, #48]	; (8006054 <__libc_init_array+0x44>)
 8006024:	f001 fe58 	bl	8007cd8 <_init>
 8006028:	1b64      	subs	r4, r4, r5
 800602a:	10a4      	asrs	r4, r4, #2
 800602c:	2600      	movs	r6, #0
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	f855 3b04 	ldr.w	r3, [r5], #4
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	080085d4 	.word	0x080085d4
 800604c:	080085d4 	.word	0x080085d4
 8006050:	080085d4 	.word	0x080085d4
 8006054:	080085d8 	.word	0x080085d8

08006058 <__retarget_lock_init_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_acquire_recursive>:
 800605a:	4770      	bx	lr

0800605c <__retarget_lock_release_recursive>:
 800605c:	4770      	bx	lr

0800605e <quorem>:
 800605e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006062:	6903      	ldr	r3, [r0, #16]
 8006064:	690c      	ldr	r4, [r1, #16]
 8006066:	42a3      	cmp	r3, r4
 8006068:	4607      	mov	r7, r0
 800606a:	db7e      	blt.n	800616a <quorem+0x10c>
 800606c:	3c01      	subs	r4, #1
 800606e:	f101 0814 	add.w	r8, r1, #20
 8006072:	f100 0514 	add.w	r5, r0, #20
 8006076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006084:	3301      	adds	r3, #1
 8006086:	429a      	cmp	r2, r3
 8006088:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800608c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006090:	fbb2 f6f3 	udiv	r6, r2, r3
 8006094:	d331      	bcc.n	80060fa <quorem+0x9c>
 8006096:	f04f 0e00 	mov.w	lr, #0
 800609a:	4640      	mov	r0, r8
 800609c:	46ac      	mov	ip, r5
 800609e:	46f2      	mov	sl, lr
 80060a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80060a4:	b293      	uxth	r3, r2
 80060a6:	fb06 e303 	mla	r3, r6, r3, lr
 80060aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060ae:	0c1a      	lsrs	r2, r3, #16
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ebaa 0303 	sub.w	r3, sl, r3
 80060b6:	f8dc a000 	ldr.w	sl, [ip]
 80060ba:	fa13 f38a 	uxtah	r3, r3, sl
 80060be:	fb06 220e 	mla	r2, r6, lr, r2
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060ca:	b292      	uxth	r2, r2
 80060cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80060d8:	4581      	cmp	r9, r0
 80060da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060de:	f84c 3b04 	str.w	r3, [ip], #4
 80060e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060e6:	d2db      	bcs.n	80060a0 <quorem+0x42>
 80060e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80060ec:	b92b      	cbnz	r3, 80060fa <quorem+0x9c>
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	429d      	cmp	r5, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	d32c      	bcc.n	8006152 <quorem+0xf4>
 80060f8:	613c      	str	r4, [r7, #16]
 80060fa:	4638      	mov	r0, r7
 80060fc:	f001 f9a6 	bl	800744c <__mcmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	db22      	blt.n	800614a <quorem+0xec>
 8006104:	3601      	adds	r6, #1
 8006106:	4629      	mov	r1, r5
 8006108:	2000      	movs	r0, #0
 800610a:	f858 2b04 	ldr.w	r2, [r8], #4
 800610e:	f8d1 c000 	ldr.w	ip, [r1]
 8006112:	b293      	uxth	r3, r2
 8006114:	1ac3      	subs	r3, r0, r3
 8006116:	0c12      	lsrs	r2, r2, #16
 8006118:	fa13 f38c 	uxtah	r3, r3, ip
 800611c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006124:	b29b      	uxth	r3, r3
 8006126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800612a:	45c1      	cmp	r9, r8
 800612c:	f841 3b04 	str.w	r3, [r1], #4
 8006130:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006134:	d2e9      	bcs.n	800610a <quorem+0xac>
 8006136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800613a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800613e:	b922      	cbnz	r2, 800614a <quorem+0xec>
 8006140:	3b04      	subs	r3, #4
 8006142:	429d      	cmp	r5, r3
 8006144:	461a      	mov	r2, r3
 8006146:	d30a      	bcc.n	800615e <quorem+0x100>
 8006148:	613c      	str	r4, [r7, #16]
 800614a:	4630      	mov	r0, r6
 800614c:	b003      	add	sp, #12
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	3b04      	subs	r3, #4
 8006156:	2a00      	cmp	r2, #0
 8006158:	d1ce      	bne.n	80060f8 <quorem+0x9a>
 800615a:	3c01      	subs	r4, #1
 800615c:	e7c9      	b.n	80060f2 <quorem+0x94>
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	3b04      	subs	r3, #4
 8006162:	2a00      	cmp	r2, #0
 8006164:	d1f0      	bne.n	8006148 <quorem+0xea>
 8006166:	3c01      	subs	r4, #1
 8006168:	e7eb      	b.n	8006142 <quorem+0xe4>
 800616a:	2000      	movs	r0, #0
 800616c:	e7ee      	b.n	800614c <quorem+0xee>
	...

08006170 <_dtoa_r>:
 8006170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	ed2d 8b04 	vpush	{d8-d9}
 8006178:	69c5      	ldr	r5, [r0, #28]
 800617a:	b093      	sub	sp, #76	; 0x4c
 800617c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006188:	9107      	str	r1, [sp, #28]
 800618a:	4604      	mov	r4, r0
 800618c:	920a      	str	r2, [sp, #40]	; 0x28
 800618e:	930d      	str	r3, [sp, #52]	; 0x34
 8006190:	b975      	cbnz	r5, 80061b0 <_dtoa_r+0x40>
 8006192:	2010      	movs	r0, #16
 8006194:	f000 fe2a 	bl	8006dec <malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	61e0      	str	r0, [r4, #28]
 800619c:	b920      	cbnz	r0, 80061a8 <_dtoa_r+0x38>
 800619e:	4bae      	ldr	r3, [pc, #696]	; (8006458 <_dtoa_r+0x2e8>)
 80061a0:	21ef      	movs	r1, #239	; 0xef
 80061a2:	48ae      	ldr	r0, [pc, #696]	; (800645c <_dtoa_r+0x2ec>)
 80061a4:	f001 fce6 	bl	8007b74 <__assert_func>
 80061a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061ac:	6005      	str	r5, [r0, #0]
 80061ae:	60c5      	str	r5, [r0, #12]
 80061b0:	69e3      	ldr	r3, [r4, #28]
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	b151      	cbz	r1, 80061cc <_dtoa_r+0x5c>
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	604a      	str	r2, [r1, #4]
 80061ba:	2301      	movs	r3, #1
 80061bc:	4093      	lsls	r3, r2
 80061be:	608b      	str	r3, [r1, #8]
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 ff07 	bl	8006fd4 <_Bfree>
 80061c6:	69e3      	ldr	r3, [r4, #28]
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	1e3b      	subs	r3, r7, #0
 80061ce:	bfbb      	ittet	lt
 80061d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	9303      	strlt	r3, [sp, #12]
 80061d6:	2300      	movge	r3, #0
 80061d8:	2201      	movlt	r2, #1
 80061da:	bfac      	ite	ge
 80061dc:	f8c8 3000 	strge.w	r3, [r8]
 80061e0:	f8c8 2000 	strlt.w	r2, [r8]
 80061e4:	4b9e      	ldr	r3, [pc, #632]	; (8006460 <_dtoa_r+0x2f0>)
 80061e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061ea:	ea33 0308 	bics.w	r3, r3, r8
 80061ee:	d11b      	bne.n	8006228 <_dtoa_r+0xb8>
 80061f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061fc:	4333      	orrs	r3, r6
 80061fe:	f000 8593 	beq.w	8006d28 <_dtoa_r+0xbb8>
 8006202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006204:	b963      	cbnz	r3, 8006220 <_dtoa_r+0xb0>
 8006206:	4b97      	ldr	r3, [pc, #604]	; (8006464 <_dtoa_r+0x2f4>)
 8006208:	e027      	b.n	800625a <_dtoa_r+0xea>
 800620a:	4b97      	ldr	r3, [pc, #604]	; (8006468 <_dtoa_r+0x2f8>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	9800      	ldr	r0, [sp, #0]
 8006216:	b013      	add	sp, #76	; 0x4c
 8006218:	ecbd 8b04 	vpop	{d8-d9}
 800621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006220:	4b90      	ldr	r3, [pc, #576]	; (8006464 <_dtoa_r+0x2f4>)
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	3303      	adds	r3, #3
 8006226:	e7f3      	b.n	8006210 <_dtoa_r+0xa0>
 8006228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	ec51 0b17 	vmov	r0, r1, d7
 8006232:	eeb0 8a47 	vmov.f32	s16, s14
 8006236:	eef0 8a67 	vmov.f32	s17, s15
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8006240:	4681      	mov	r9, r0
 8006242:	b160      	cbz	r0, 800625e <_dtoa_r+0xee>
 8006244:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006246:	2301      	movs	r3, #1
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8568 	beq.w	8006d22 <_dtoa_r+0xbb2>
 8006252:	4b86      	ldr	r3, [pc, #536]	; (800646c <_dtoa_r+0x2fc>)
 8006254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	3b01      	subs	r3, #1
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	e7da      	b.n	8006214 <_dtoa_r+0xa4>
 800625e:	aa10      	add	r2, sp, #64	; 0x40
 8006260:	a911      	add	r1, sp, #68	; 0x44
 8006262:	4620      	mov	r0, r4
 8006264:	eeb0 0a48 	vmov.f32	s0, s16
 8006268:	eef0 0a68 	vmov.f32	s1, s17
 800626c:	f001 f994 	bl	8007598 <__d2b>
 8006270:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006274:	4682      	mov	sl, r0
 8006276:	2d00      	cmp	r5, #0
 8006278:	d07f      	beq.n	800637a <_dtoa_r+0x20a>
 800627a:	ee18 3a90 	vmov	r3, s17
 800627e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006282:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006286:	ec51 0b18 	vmov	r0, r1, d8
 800628a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800628e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006292:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006296:	4619      	mov	r1, r3
 8006298:	2200      	movs	r2, #0
 800629a:	4b75      	ldr	r3, [pc, #468]	; (8006470 <_dtoa_r+0x300>)
 800629c:	f7fa f814 	bl	80002c8 <__aeabi_dsub>
 80062a0:	a367      	add	r3, pc, #412	; (adr r3, 8006440 <_dtoa_r+0x2d0>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa f9c7 	bl	8000638 <__aeabi_dmul>
 80062aa:	a367      	add	r3, pc, #412	; (adr r3, 8006448 <_dtoa_r+0x2d8>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f80c 	bl	80002cc <__adddf3>
 80062b4:	4606      	mov	r6, r0
 80062b6:	4628      	mov	r0, r5
 80062b8:	460f      	mov	r7, r1
 80062ba:	f7fa f953 	bl	8000564 <__aeabi_i2d>
 80062be:	a364      	add	r3, pc, #400	; (adr r3, 8006450 <_dtoa_r+0x2e0>)
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f7fa f9b8 	bl	8000638 <__aeabi_dmul>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4630      	mov	r0, r6
 80062ce:	4639      	mov	r1, r7
 80062d0:	f7f9 fffc 	bl	80002cc <__adddf3>
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	f7fa fc5e 	bl	8000b98 <__aeabi_d2iz>
 80062dc:	2200      	movs	r2, #0
 80062de:	4683      	mov	fp, r0
 80062e0:	2300      	movs	r3, #0
 80062e2:	4630      	mov	r0, r6
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7fa fc19 	bl	8000b1c <__aeabi_dcmplt>
 80062ea:	b148      	cbz	r0, 8006300 <_dtoa_r+0x190>
 80062ec:	4658      	mov	r0, fp
 80062ee:	f7fa f939 	bl	8000564 <__aeabi_i2d>
 80062f2:	4632      	mov	r2, r6
 80062f4:	463b      	mov	r3, r7
 80062f6:	f7fa fc07 	bl	8000b08 <__aeabi_dcmpeq>
 80062fa:	b908      	cbnz	r0, 8006300 <_dtoa_r+0x190>
 80062fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006300:	f1bb 0f16 	cmp.w	fp, #22
 8006304:	d857      	bhi.n	80063b6 <_dtoa_r+0x246>
 8006306:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <_dtoa_r+0x304>)
 8006308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	ec51 0b18 	vmov	r0, r1, d8
 8006314:	f7fa fc02 	bl	8000b1c <__aeabi_dcmplt>
 8006318:	2800      	cmp	r0, #0
 800631a:	d04e      	beq.n	80063ba <_dtoa_r+0x24a>
 800631c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006320:	2300      	movs	r3, #0
 8006322:	930c      	str	r3, [sp, #48]	; 0x30
 8006324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006326:	1b5b      	subs	r3, r3, r5
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	bf45      	ittet	mi
 800632c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006330:	9305      	strmi	r3, [sp, #20]
 8006332:	2300      	movpl	r3, #0
 8006334:	2300      	movmi	r3, #0
 8006336:	9206      	str	r2, [sp, #24]
 8006338:	bf54      	ite	pl
 800633a:	9305      	strpl	r3, [sp, #20]
 800633c:	9306      	strmi	r3, [sp, #24]
 800633e:	f1bb 0f00 	cmp.w	fp, #0
 8006342:	db3c      	blt.n	80063be <_dtoa_r+0x24e>
 8006344:	9b06      	ldr	r3, [sp, #24]
 8006346:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800634a:	445b      	add	r3, fp
 800634c:	9306      	str	r3, [sp, #24]
 800634e:	2300      	movs	r3, #0
 8006350:	9308      	str	r3, [sp, #32]
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	2b09      	cmp	r3, #9
 8006356:	d868      	bhi.n	800642a <_dtoa_r+0x2ba>
 8006358:	2b05      	cmp	r3, #5
 800635a:	bfc4      	itt	gt
 800635c:	3b04      	subgt	r3, #4
 800635e:	9307      	strgt	r3, [sp, #28]
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	f1a3 0302 	sub.w	r3, r3, #2
 8006366:	bfcc      	ite	gt
 8006368:	2500      	movgt	r5, #0
 800636a:	2501      	movle	r5, #1
 800636c:	2b03      	cmp	r3, #3
 800636e:	f200 8085 	bhi.w	800647c <_dtoa_r+0x30c>
 8006372:	e8df f003 	tbb	[pc, r3]
 8006376:	3b2e      	.short	0x3b2e
 8006378:	5839      	.short	0x5839
 800637a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800637e:	441d      	add	r5, r3
 8006380:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006384:	2b20      	cmp	r3, #32
 8006386:	bfc1      	itttt	gt
 8006388:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800638c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006390:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006394:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006398:	bfd6      	itet	le
 800639a:	f1c3 0320 	rsble	r3, r3, #32
 800639e:	ea48 0003 	orrgt.w	r0, r8, r3
 80063a2:	fa06 f003 	lslle.w	r0, r6, r3
 80063a6:	f7fa f8cd 	bl	8000544 <__aeabi_ui2d>
 80063aa:	2201      	movs	r2, #1
 80063ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80063b0:	3d01      	subs	r5, #1
 80063b2:	920e      	str	r2, [sp, #56]	; 0x38
 80063b4:	e76f      	b.n	8006296 <_dtoa_r+0x126>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e7b3      	b.n	8006322 <_dtoa_r+0x1b2>
 80063ba:	900c      	str	r0, [sp, #48]	; 0x30
 80063bc:	e7b2      	b.n	8006324 <_dtoa_r+0x1b4>
 80063be:	9b05      	ldr	r3, [sp, #20]
 80063c0:	eba3 030b 	sub.w	r3, r3, fp
 80063c4:	9305      	str	r3, [sp, #20]
 80063c6:	f1cb 0300 	rsb	r3, fp, #0
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	2300      	movs	r3, #0
 80063ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d0:	e7bf      	b.n	8006352 <_dtoa_r+0x1e2>
 80063d2:	2300      	movs	r3, #0
 80063d4:	9309      	str	r3, [sp, #36]	; 0x24
 80063d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	dc52      	bgt.n	8006482 <_dtoa_r+0x312>
 80063dc:	2301      	movs	r3, #1
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	461a      	mov	r2, r3
 80063e4:	920a      	str	r2, [sp, #40]	; 0x28
 80063e6:	e00b      	b.n	8006400 <_dtoa_r+0x290>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e7f3      	b.n	80063d4 <_dtoa_r+0x264>
 80063ec:	2300      	movs	r3, #0
 80063ee:	9309      	str	r3, [sp, #36]	; 0x24
 80063f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f2:	445b      	add	r3, fp
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	bfb8      	it	lt
 80063fe:	2301      	movlt	r3, #1
 8006400:	69e0      	ldr	r0, [r4, #28]
 8006402:	2100      	movs	r1, #0
 8006404:	2204      	movs	r2, #4
 8006406:	f102 0614 	add.w	r6, r2, #20
 800640a:	429e      	cmp	r6, r3
 800640c:	d93d      	bls.n	800648a <_dtoa_r+0x31a>
 800640e:	6041      	str	r1, [r0, #4]
 8006410:	4620      	mov	r0, r4
 8006412:	f000 fd9f 	bl	8006f54 <_Balloc>
 8006416:	9000      	str	r0, [sp, #0]
 8006418:	2800      	cmp	r0, #0
 800641a:	d139      	bne.n	8006490 <_dtoa_r+0x320>
 800641c:	4b16      	ldr	r3, [pc, #88]	; (8006478 <_dtoa_r+0x308>)
 800641e:	4602      	mov	r2, r0
 8006420:	f240 11af 	movw	r1, #431	; 0x1af
 8006424:	e6bd      	b.n	80061a2 <_dtoa_r+0x32>
 8006426:	2301      	movs	r3, #1
 8006428:	e7e1      	b.n	80063ee <_dtoa_r+0x27e>
 800642a:	2501      	movs	r5, #1
 800642c:	2300      	movs	r3, #0
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	9509      	str	r5, [sp, #36]	; 0x24
 8006432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	2200      	movs	r2, #0
 800643c:	2312      	movs	r3, #18
 800643e:	e7d1      	b.n	80063e4 <_dtoa_r+0x274>
 8006440:	636f4361 	.word	0x636f4361
 8006444:	3fd287a7 	.word	0x3fd287a7
 8006448:	8b60c8b3 	.word	0x8b60c8b3
 800644c:	3fc68a28 	.word	0x3fc68a28
 8006450:	509f79fb 	.word	0x509f79fb
 8006454:	3fd34413 	.word	0x3fd34413
 8006458:	0800829b 	.word	0x0800829b
 800645c:	080082b2 	.word	0x080082b2
 8006460:	7ff00000 	.word	0x7ff00000
 8006464:	08008297 	.word	0x08008297
 8006468:	0800828e 	.word	0x0800828e
 800646c:	0800826b 	.word	0x0800826b
 8006470:	3ff80000 	.word	0x3ff80000
 8006474:	080083a0 	.word	0x080083a0
 8006478:	0800830a 	.word	0x0800830a
 800647c:	2301      	movs	r3, #1
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	e7d7      	b.n	8006432 <_dtoa_r+0x2c2>
 8006482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	e7ba      	b.n	8006400 <_dtoa_r+0x290>
 800648a:	3101      	adds	r1, #1
 800648c:	0052      	lsls	r2, r2, #1
 800648e:	e7ba      	b.n	8006406 <_dtoa_r+0x296>
 8006490:	69e3      	ldr	r3, [r4, #28]
 8006492:	9a00      	ldr	r2, [sp, #0]
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	2b0e      	cmp	r3, #14
 800649a:	f200 80a8 	bhi.w	80065ee <_dtoa_r+0x47e>
 800649e:	2d00      	cmp	r5, #0
 80064a0:	f000 80a5 	beq.w	80065ee <_dtoa_r+0x47e>
 80064a4:	f1bb 0f00 	cmp.w	fp, #0
 80064a8:	dd38      	ble.n	800651c <_dtoa_r+0x3ac>
 80064aa:	4bc0      	ldr	r3, [pc, #768]	; (80067ac <_dtoa_r+0x63c>)
 80064ac:	f00b 020f 	and.w	r2, fp, #15
 80064b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80064bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80064c0:	d019      	beq.n	80064f6 <_dtoa_r+0x386>
 80064c2:	4bbb      	ldr	r3, [pc, #748]	; (80067b0 <_dtoa_r+0x640>)
 80064c4:	ec51 0b18 	vmov	r0, r1, d8
 80064c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064cc:	f7fa f9de 	bl	800088c <__aeabi_ddiv>
 80064d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d4:	f008 080f 	and.w	r8, r8, #15
 80064d8:	2503      	movs	r5, #3
 80064da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80067b0 <_dtoa_r+0x640>
 80064de:	f1b8 0f00 	cmp.w	r8, #0
 80064e2:	d10a      	bne.n	80064fa <_dtoa_r+0x38a>
 80064e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	f7fa f9ce 	bl	800088c <__aeabi_ddiv>
 80064f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f4:	e02b      	b.n	800654e <_dtoa_r+0x3de>
 80064f6:	2502      	movs	r5, #2
 80064f8:	e7ef      	b.n	80064da <_dtoa_r+0x36a>
 80064fa:	f018 0f01 	tst.w	r8, #1
 80064fe:	d008      	beq.n	8006512 <_dtoa_r+0x3a2>
 8006500:	4630      	mov	r0, r6
 8006502:	4639      	mov	r1, r7
 8006504:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006508:	f7fa f896 	bl	8000638 <__aeabi_dmul>
 800650c:	3501      	adds	r5, #1
 800650e:	4606      	mov	r6, r0
 8006510:	460f      	mov	r7, r1
 8006512:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006516:	f109 0908 	add.w	r9, r9, #8
 800651a:	e7e0      	b.n	80064de <_dtoa_r+0x36e>
 800651c:	f000 809f 	beq.w	800665e <_dtoa_r+0x4ee>
 8006520:	f1cb 0600 	rsb	r6, fp, #0
 8006524:	4ba1      	ldr	r3, [pc, #644]	; (80067ac <_dtoa_r+0x63c>)
 8006526:	4fa2      	ldr	r7, [pc, #648]	; (80067b0 <_dtoa_r+0x640>)
 8006528:	f006 020f 	and.w	r2, r6, #15
 800652c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	ec51 0b18 	vmov	r0, r1, d8
 8006538:	f7fa f87e 	bl	8000638 <__aeabi_dmul>
 800653c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006540:	1136      	asrs	r6, r6, #4
 8006542:	2300      	movs	r3, #0
 8006544:	2502      	movs	r5, #2
 8006546:	2e00      	cmp	r6, #0
 8006548:	d17e      	bne.n	8006648 <_dtoa_r+0x4d8>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d0      	bne.n	80064f0 <_dtoa_r+0x380>
 800654e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006550:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8084 	beq.w	8006662 <_dtoa_r+0x4f2>
 800655a:	4b96      	ldr	r3, [pc, #600]	; (80067b4 <_dtoa_r+0x644>)
 800655c:	2200      	movs	r2, #0
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7fa fadb 	bl	8000b1c <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	d07b      	beq.n	8006662 <_dtoa_r+0x4f2>
 800656a:	9b04      	ldr	r3, [sp, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d078      	beq.n	8006662 <_dtoa_r+0x4f2>
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	dd39      	ble.n	80065ea <_dtoa_r+0x47a>
 8006576:	4b90      	ldr	r3, [pc, #576]	; (80067b8 <_dtoa_r+0x648>)
 8006578:	2200      	movs	r2, #0
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa f85b 	bl	8000638 <__aeabi_dmul>
 8006582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006586:	9e01      	ldr	r6, [sp, #4]
 8006588:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800658c:	3501      	adds	r5, #1
 800658e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006592:	4628      	mov	r0, r5
 8006594:	f7f9 ffe6 	bl	8000564 <__aeabi_i2d>
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	f7fa f84c 	bl	8000638 <__aeabi_dmul>
 80065a0:	4b86      	ldr	r3, [pc, #536]	; (80067bc <_dtoa_r+0x64c>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7f9 fe92 	bl	80002cc <__adddf3>
 80065a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80065ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	d158      	bne.n	8006668 <_dtoa_r+0x4f8>
 80065b6:	4b82      	ldr	r3, [pc, #520]	; (80067c0 <_dtoa_r+0x650>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	4640      	mov	r0, r8
 80065bc:	4649      	mov	r1, r9
 80065be:	f7f9 fe83 	bl	80002c8 <__aeabi_dsub>
 80065c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c6:	4680      	mov	r8, r0
 80065c8:	4689      	mov	r9, r1
 80065ca:	f7fa fac5 	bl	8000b58 <__aeabi_dcmpgt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 8296 	bne.w	8006b00 <_dtoa_r+0x990>
 80065d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065d8:	4640      	mov	r0, r8
 80065da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065de:	4649      	mov	r1, r9
 80065e0:	f7fa fa9c 	bl	8000b1c <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f040 8289 	bne.w	8006afc <_dtoa_r+0x98c>
 80065ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80065ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f2c0 814e 	blt.w	8006892 <_dtoa_r+0x722>
 80065f6:	f1bb 0f0e 	cmp.w	fp, #14
 80065fa:	f300 814a 	bgt.w	8006892 <_dtoa_r+0x722>
 80065fe:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <_dtoa_r+0x63c>)
 8006600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	f280 80dc 	bge.w	80067c8 <_dtoa_r+0x658>
 8006610:	9b04      	ldr	r3, [sp, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f300 80d8 	bgt.w	80067c8 <_dtoa_r+0x658>
 8006618:	f040 826f 	bne.w	8006afa <_dtoa_r+0x98a>
 800661c:	4b68      	ldr	r3, [pc, #416]	; (80067c0 <_dtoa_r+0x650>)
 800661e:	2200      	movs	r2, #0
 8006620:	4640      	mov	r0, r8
 8006622:	4649      	mov	r1, r9
 8006624:	f7fa f808 	bl	8000638 <__aeabi_dmul>
 8006628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800662c:	f7fa fa8a 	bl	8000b44 <__aeabi_dcmpge>
 8006630:	9e04      	ldr	r6, [sp, #16]
 8006632:	4637      	mov	r7, r6
 8006634:	2800      	cmp	r0, #0
 8006636:	f040 8245 	bne.w	8006ac4 <_dtoa_r+0x954>
 800663a:	9d00      	ldr	r5, [sp, #0]
 800663c:	2331      	movs	r3, #49	; 0x31
 800663e:	f805 3b01 	strb.w	r3, [r5], #1
 8006642:	f10b 0b01 	add.w	fp, fp, #1
 8006646:	e241      	b.n	8006acc <_dtoa_r+0x95c>
 8006648:	07f2      	lsls	r2, r6, #31
 800664a:	d505      	bpl.n	8006658 <_dtoa_r+0x4e8>
 800664c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006650:	f7f9 fff2 	bl	8000638 <__aeabi_dmul>
 8006654:	3501      	adds	r5, #1
 8006656:	2301      	movs	r3, #1
 8006658:	1076      	asrs	r6, r6, #1
 800665a:	3708      	adds	r7, #8
 800665c:	e773      	b.n	8006546 <_dtoa_r+0x3d6>
 800665e:	2502      	movs	r5, #2
 8006660:	e775      	b.n	800654e <_dtoa_r+0x3de>
 8006662:	9e04      	ldr	r6, [sp, #16]
 8006664:	465f      	mov	r7, fp
 8006666:	e792      	b.n	800658e <_dtoa_r+0x41e>
 8006668:	9900      	ldr	r1, [sp, #0]
 800666a:	4b50      	ldr	r3, [pc, #320]	; (80067ac <_dtoa_r+0x63c>)
 800666c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006670:	4431      	add	r1, r6
 8006672:	9102      	str	r1, [sp, #8]
 8006674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006676:	eeb0 9a47 	vmov.f32	s18, s14
 800667a:	eef0 9a67 	vmov.f32	s19, s15
 800667e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006682:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006686:	2900      	cmp	r1, #0
 8006688:	d044      	beq.n	8006714 <_dtoa_r+0x5a4>
 800668a:	494e      	ldr	r1, [pc, #312]	; (80067c4 <_dtoa_r+0x654>)
 800668c:	2000      	movs	r0, #0
 800668e:	f7fa f8fd 	bl	800088c <__aeabi_ddiv>
 8006692:	ec53 2b19 	vmov	r2, r3, d9
 8006696:	f7f9 fe17 	bl	80002c8 <__aeabi_dsub>
 800669a:	9d00      	ldr	r5, [sp, #0]
 800669c:	ec41 0b19 	vmov	d9, r0, r1
 80066a0:	4649      	mov	r1, r9
 80066a2:	4640      	mov	r0, r8
 80066a4:	f7fa fa78 	bl	8000b98 <__aeabi_d2iz>
 80066a8:	4606      	mov	r6, r0
 80066aa:	f7f9 ff5b 	bl	8000564 <__aeabi_i2d>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4640      	mov	r0, r8
 80066b4:	4649      	mov	r1, r9
 80066b6:	f7f9 fe07 	bl	80002c8 <__aeabi_dsub>
 80066ba:	3630      	adds	r6, #48	; 0x30
 80066bc:	f805 6b01 	strb.w	r6, [r5], #1
 80066c0:	ec53 2b19 	vmov	r2, r3, d9
 80066c4:	4680      	mov	r8, r0
 80066c6:	4689      	mov	r9, r1
 80066c8:	f7fa fa28 	bl	8000b1c <__aeabi_dcmplt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d164      	bne.n	800679a <_dtoa_r+0x62a>
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	4937      	ldr	r1, [pc, #220]	; (80067b4 <_dtoa_r+0x644>)
 80066d6:	2000      	movs	r0, #0
 80066d8:	f7f9 fdf6 	bl	80002c8 <__aeabi_dsub>
 80066dc:	ec53 2b19 	vmov	r2, r3, d9
 80066e0:	f7fa fa1c 	bl	8000b1c <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f040 80b6 	bne.w	8006856 <_dtoa_r+0x6e6>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	429d      	cmp	r5, r3
 80066ee:	f43f af7c 	beq.w	80065ea <_dtoa_r+0x47a>
 80066f2:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <_dtoa_r+0x648>)
 80066f4:	ec51 0b19 	vmov	r0, r1, d9
 80066f8:	2200      	movs	r2, #0
 80066fa:	f7f9 ff9d 	bl	8000638 <__aeabi_dmul>
 80066fe:	4b2e      	ldr	r3, [pc, #184]	; (80067b8 <_dtoa_r+0x648>)
 8006700:	ec41 0b19 	vmov	d9, r0, r1
 8006704:	2200      	movs	r2, #0
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7f9 ff95 	bl	8000638 <__aeabi_dmul>
 800670e:	4680      	mov	r8, r0
 8006710:	4689      	mov	r9, r1
 8006712:	e7c5      	b.n	80066a0 <_dtoa_r+0x530>
 8006714:	ec51 0b17 	vmov	r0, r1, d7
 8006718:	f7f9 ff8e 	bl	8000638 <__aeabi_dmul>
 800671c:	9b02      	ldr	r3, [sp, #8]
 800671e:	9d00      	ldr	r5, [sp, #0]
 8006720:	930f      	str	r3, [sp, #60]	; 0x3c
 8006722:	ec41 0b19 	vmov	d9, r0, r1
 8006726:	4649      	mov	r1, r9
 8006728:	4640      	mov	r0, r8
 800672a:	f7fa fa35 	bl	8000b98 <__aeabi_d2iz>
 800672e:	4606      	mov	r6, r0
 8006730:	f7f9 ff18 	bl	8000564 <__aeabi_i2d>
 8006734:	3630      	adds	r6, #48	; 0x30
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 fdc3 	bl	80002c8 <__aeabi_dsub>
 8006742:	f805 6b01 	strb.w	r6, [r5], #1
 8006746:	9b02      	ldr	r3, [sp, #8]
 8006748:	429d      	cmp	r5, r3
 800674a:	4680      	mov	r8, r0
 800674c:	4689      	mov	r9, r1
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	d124      	bne.n	800679e <_dtoa_r+0x62e>
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <_dtoa_r+0x654>)
 8006756:	ec51 0b19 	vmov	r0, r1, d9
 800675a:	f7f9 fdb7 	bl	80002cc <__adddf3>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7fa f9f7 	bl	8000b58 <__aeabi_dcmpgt>
 800676a:	2800      	cmp	r0, #0
 800676c:	d173      	bne.n	8006856 <_dtoa_r+0x6e6>
 800676e:	ec53 2b19 	vmov	r2, r3, d9
 8006772:	4914      	ldr	r1, [pc, #80]	; (80067c4 <_dtoa_r+0x654>)
 8006774:	2000      	movs	r0, #0
 8006776:	f7f9 fda7 	bl	80002c8 <__aeabi_dsub>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7fa f9cb 	bl	8000b1c <__aeabi_dcmplt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f43f af2f 	beq.w	80065ea <_dtoa_r+0x47a>
 800678c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800678e:	1e6b      	subs	r3, r5, #1
 8006790:	930f      	str	r3, [sp, #60]	; 0x3c
 8006792:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	d0f8      	beq.n	800678c <_dtoa_r+0x61c>
 800679a:	46bb      	mov	fp, r7
 800679c:	e04a      	b.n	8006834 <_dtoa_r+0x6c4>
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <_dtoa_r+0x648>)
 80067a0:	f7f9 ff4a 	bl	8000638 <__aeabi_dmul>
 80067a4:	4680      	mov	r8, r0
 80067a6:	4689      	mov	r9, r1
 80067a8:	e7bd      	b.n	8006726 <_dtoa_r+0x5b6>
 80067aa:	bf00      	nop
 80067ac:	080083a0 	.word	0x080083a0
 80067b0:	08008378 	.word	0x08008378
 80067b4:	3ff00000 	.word	0x3ff00000
 80067b8:	40240000 	.word	0x40240000
 80067bc:	401c0000 	.word	0x401c0000
 80067c0:	40140000 	.word	0x40140000
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067cc:	9d00      	ldr	r5, [sp, #0]
 80067ce:	4642      	mov	r2, r8
 80067d0:	464b      	mov	r3, r9
 80067d2:	4630      	mov	r0, r6
 80067d4:	4639      	mov	r1, r7
 80067d6:	f7fa f859 	bl	800088c <__aeabi_ddiv>
 80067da:	f7fa f9dd 	bl	8000b98 <__aeabi_d2iz>
 80067de:	9001      	str	r0, [sp, #4]
 80067e0:	f7f9 fec0 	bl	8000564 <__aeabi_i2d>
 80067e4:	4642      	mov	r2, r8
 80067e6:	464b      	mov	r3, r9
 80067e8:	f7f9 ff26 	bl	8000638 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7f9 fd68 	bl	80002c8 <__aeabi_dsub>
 80067f8:	9e01      	ldr	r6, [sp, #4]
 80067fa:	9f04      	ldr	r7, [sp, #16]
 80067fc:	3630      	adds	r6, #48	; 0x30
 80067fe:	f805 6b01 	strb.w	r6, [r5], #1
 8006802:	9e00      	ldr	r6, [sp, #0]
 8006804:	1bae      	subs	r6, r5, r6
 8006806:	42b7      	cmp	r7, r6
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	d134      	bne.n	8006878 <_dtoa_r+0x708>
 800680e:	f7f9 fd5d 	bl	80002cc <__adddf3>
 8006812:	4642      	mov	r2, r8
 8006814:	464b      	mov	r3, r9
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	f7fa f99d 	bl	8000b58 <__aeabi_dcmpgt>
 800681e:	b9c8      	cbnz	r0, 8006854 <_dtoa_r+0x6e4>
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	4630      	mov	r0, r6
 8006826:	4639      	mov	r1, r7
 8006828:	f7fa f96e 	bl	8000b08 <__aeabi_dcmpeq>
 800682c:	b110      	cbz	r0, 8006834 <_dtoa_r+0x6c4>
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	07db      	lsls	r3, r3, #31
 8006832:	d40f      	bmi.n	8006854 <_dtoa_r+0x6e4>
 8006834:	4651      	mov	r1, sl
 8006836:	4620      	mov	r0, r4
 8006838:	f000 fbcc 	bl	8006fd4 <_Bfree>
 800683c:	2300      	movs	r3, #0
 800683e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006840:	702b      	strb	r3, [r5, #0]
 8006842:	f10b 0301 	add.w	r3, fp, #1
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800684a:	2b00      	cmp	r3, #0
 800684c:	f43f ace2 	beq.w	8006214 <_dtoa_r+0xa4>
 8006850:	601d      	str	r5, [r3, #0]
 8006852:	e4df      	b.n	8006214 <_dtoa_r+0xa4>
 8006854:	465f      	mov	r7, fp
 8006856:	462b      	mov	r3, r5
 8006858:	461d      	mov	r5, r3
 800685a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800685e:	2a39      	cmp	r2, #57	; 0x39
 8006860:	d106      	bne.n	8006870 <_dtoa_r+0x700>
 8006862:	9a00      	ldr	r2, [sp, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d1f7      	bne.n	8006858 <_dtoa_r+0x6e8>
 8006868:	9900      	ldr	r1, [sp, #0]
 800686a:	2230      	movs	r2, #48	; 0x30
 800686c:	3701      	adds	r7, #1
 800686e:	700a      	strb	r2, [r1, #0]
 8006870:	781a      	ldrb	r2, [r3, #0]
 8006872:	3201      	adds	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e790      	b.n	800679a <_dtoa_r+0x62a>
 8006878:	4ba3      	ldr	r3, [pc, #652]	; (8006b08 <_dtoa_r+0x998>)
 800687a:	2200      	movs	r2, #0
 800687c:	f7f9 fedc 	bl	8000638 <__aeabi_dmul>
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	f7fa f93e 	bl	8000b08 <__aeabi_dcmpeq>
 800688c:	2800      	cmp	r0, #0
 800688e:	d09e      	beq.n	80067ce <_dtoa_r+0x65e>
 8006890:	e7d0      	b.n	8006834 <_dtoa_r+0x6c4>
 8006892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006894:	2a00      	cmp	r2, #0
 8006896:	f000 80ca 	beq.w	8006a2e <_dtoa_r+0x8be>
 800689a:	9a07      	ldr	r2, [sp, #28]
 800689c:	2a01      	cmp	r2, #1
 800689e:	f300 80ad 	bgt.w	80069fc <_dtoa_r+0x88c>
 80068a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	f000 80a5 	beq.w	80069f4 <_dtoa_r+0x884>
 80068aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068ae:	9e08      	ldr	r6, [sp, #32]
 80068b0:	9d05      	ldr	r5, [sp, #20]
 80068b2:	9a05      	ldr	r2, [sp, #20]
 80068b4:	441a      	add	r2, r3
 80068b6:	9205      	str	r2, [sp, #20]
 80068b8:	9a06      	ldr	r2, [sp, #24]
 80068ba:	2101      	movs	r1, #1
 80068bc:	441a      	add	r2, r3
 80068be:	4620      	mov	r0, r4
 80068c0:	9206      	str	r2, [sp, #24]
 80068c2:	f000 fc3d 	bl	8007140 <__i2b>
 80068c6:	4607      	mov	r7, r0
 80068c8:	b165      	cbz	r5, 80068e4 <_dtoa_r+0x774>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dd09      	ble.n	80068e4 <_dtoa_r+0x774>
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	9a05      	ldr	r2, [sp, #20]
 80068d4:	bfa8      	it	ge
 80068d6:	462b      	movge	r3, r5
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	9205      	str	r2, [sp, #20]
 80068dc:	9a06      	ldr	r2, [sp, #24]
 80068de:	1aed      	subs	r5, r5, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	9306      	str	r3, [sp, #24]
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	b1f3      	cbz	r3, 8006926 <_dtoa_r+0x7b6>
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80a3 	beq.w	8006a36 <_dtoa_r+0x8c6>
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	dd10      	ble.n	8006916 <_dtoa_r+0x7a6>
 80068f4:	4639      	mov	r1, r7
 80068f6:	4632      	mov	r2, r6
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fce1 	bl	80072c0 <__pow5mult>
 80068fe:	4652      	mov	r2, sl
 8006900:	4601      	mov	r1, r0
 8006902:	4607      	mov	r7, r0
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fc31 	bl	800716c <__multiply>
 800690a:	4651      	mov	r1, sl
 800690c:	4680      	mov	r8, r0
 800690e:	4620      	mov	r0, r4
 8006910:	f000 fb60 	bl	8006fd4 <_Bfree>
 8006914:	46c2      	mov	sl, r8
 8006916:	9b08      	ldr	r3, [sp, #32]
 8006918:	1b9a      	subs	r2, r3, r6
 800691a:	d004      	beq.n	8006926 <_dtoa_r+0x7b6>
 800691c:	4651      	mov	r1, sl
 800691e:	4620      	mov	r0, r4
 8006920:	f000 fcce 	bl	80072c0 <__pow5mult>
 8006924:	4682      	mov	sl, r0
 8006926:	2101      	movs	r1, #1
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fc09 	bl	8007140 <__i2b>
 800692e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006930:	2b00      	cmp	r3, #0
 8006932:	4606      	mov	r6, r0
 8006934:	f340 8081 	ble.w	8006a3a <_dtoa_r+0x8ca>
 8006938:	461a      	mov	r2, r3
 800693a:	4601      	mov	r1, r0
 800693c:	4620      	mov	r0, r4
 800693e:	f000 fcbf 	bl	80072c0 <__pow5mult>
 8006942:	9b07      	ldr	r3, [sp, #28]
 8006944:	2b01      	cmp	r3, #1
 8006946:	4606      	mov	r6, r0
 8006948:	dd7a      	ble.n	8006a40 <_dtoa_r+0x8d0>
 800694a:	f04f 0800 	mov.w	r8, #0
 800694e:	6933      	ldr	r3, [r6, #16]
 8006950:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006954:	6918      	ldr	r0, [r3, #16]
 8006956:	f000 fba5 	bl	80070a4 <__hi0bits>
 800695a:	f1c0 0020 	rsb	r0, r0, #32
 800695e:	9b06      	ldr	r3, [sp, #24]
 8006960:	4418      	add	r0, r3
 8006962:	f010 001f 	ands.w	r0, r0, #31
 8006966:	f000 8094 	beq.w	8006a92 <_dtoa_r+0x922>
 800696a:	f1c0 0320 	rsb	r3, r0, #32
 800696e:	2b04      	cmp	r3, #4
 8006970:	f340 8085 	ble.w	8006a7e <_dtoa_r+0x90e>
 8006974:	9b05      	ldr	r3, [sp, #20]
 8006976:	f1c0 001c 	rsb	r0, r0, #28
 800697a:	4403      	add	r3, r0
 800697c:	9305      	str	r3, [sp, #20]
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	4403      	add	r3, r0
 8006982:	4405      	add	r5, r0
 8006984:	9306      	str	r3, [sp, #24]
 8006986:	9b05      	ldr	r3, [sp, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd05      	ble.n	8006998 <_dtoa_r+0x828>
 800698c:	4651      	mov	r1, sl
 800698e:	461a      	mov	r2, r3
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fcef 	bl	8007374 <__lshift>
 8006996:	4682      	mov	sl, r0
 8006998:	9b06      	ldr	r3, [sp, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	dd05      	ble.n	80069aa <_dtoa_r+0x83a>
 800699e:	4631      	mov	r1, r6
 80069a0:	461a      	mov	r2, r3
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fce6 	bl	8007374 <__lshift>
 80069a8:	4606      	mov	r6, r0
 80069aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d072      	beq.n	8006a96 <_dtoa_r+0x926>
 80069b0:	4631      	mov	r1, r6
 80069b2:	4650      	mov	r0, sl
 80069b4:	f000 fd4a 	bl	800744c <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	da6c      	bge.n	8006a96 <_dtoa_r+0x926>
 80069bc:	2300      	movs	r3, #0
 80069be:	4651      	mov	r1, sl
 80069c0:	220a      	movs	r2, #10
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 fb28 	bl	8007018 <__multadd>
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80069ce:	4682      	mov	sl, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 81b0 	beq.w	8006d36 <_dtoa_r+0xbc6>
 80069d6:	2300      	movs	r3, #0
 80069d8:	4639      	mov	r1, r7
 80069da:	220a      	movs	r2, #10
 80069dc:	4620      	mov	r0, r4
 80069de:	f000 fb1b 	bl	8007018 <__multadd>
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	4607      	mov	r7, r0
 80069e8:	f300 8096 	bgt.w	8006b18 <_dtoa_r+0x9a8>
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	dc59      	bgt.n	8006aa6 <_dtoa_r+0x936>
 80069f2:	e091      	b.n	8006b18 <_dtoa_r+0x9a8>
 80069f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069fa:	e758      	b.n	80068ae <_dtoa_r+0x73e>
 80069fc:	9b04      	ldr	r3, [sp, #16]
 80069fe:	1e5e      	subs	r6, r3, #1
 8006a00:	9b08      	ldr	r3, [sp, #32]
 8006a02:	42b3      	cmp	r3, r6
 8006a04:	bfbf      	itttt	lt
 8006a06:	9b08      	ldrlt	r3, [sp, #32]
 8006a08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006a0a:	9608      	strlt	r6, [sp, #32]
 8006a0c:	1af3      	sublt	r3, r6, r3
 8006a0e:	bfb4      	ite	lt
 8006a10:	18d2      	addlt	r2, r2, r3
 8006a12:	1b9e      	subge	r6, r3, r6
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	bfbc      	itt	lt
 8006a18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006a1a:	2600      	movlt	r6, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	bfb7      	itett	lt
 8006a20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006a24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006a28:	1a9d      	sublt	r5, r3, r2
 8006a2a:	2300      	movlt	r3, #0
 8006a2c:	e741      	b.n	80068b2 <_dtoa_r+0x742>
 8006a2e:	9e08      	ldr	r6, [sp, #32]
 8006a30:	9d05      	ldr	r5, [sp, #20]
 8006a32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a34:	e748      	b.n	80068c8 <_dtoa_r+0x758>
 8006a36:	9a08      	ldr	r2, [sp, #32]
 8006a38:	e770      	b.n	800691c <_dtoa_r+0x7ac>
 8006a3a:	9b07      	ldr	r3, [sp, #28]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	dc19      	bgt.n	8006a74 <_dtoa_r+0x904>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	b9bb      	cbnz	r3, 8006a74 <_dtoa_r+0x904>
 8006a44:	9b03      	ldr	r3, [sp, #12]
 8006a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a4a:	b99b      	cbnz	r3, 8006a74 <_dtoa_r+0x904>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a52:	0d1b      	lsrs	r3, r3, #20
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	b183      	cbz	r3, 8006a7a <_dtoa_r+0x90a>
 8006a58:	9b05      	ldr	r3, [sp, #20]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	9305      	str	r3, [sp, #20]
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	3301      	adds	r3, #1
 8006a62:	9306      	str	r3, [sp, #24]
 8006a64:	f04f 0801 	mov.w	r8, #1
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f47f af6f 	bne.w	800694e <_dtoa_r+0x7de>
 8006a70:	2001      	movs	r0, #1
 8006a72:	e774      	b.n	800695e <_dtoa_r+0x7ee>
 8006a74:	f04f 0800 	mov.w	r8, #0
 8006a78:	e7f6      	b.n	8006a68 <_dtoa_r+0x8f8>
 8006a7a:	4698      	mov	r8, r3
 8006a7c:	e7f4      	b.n	8006a68 <_dtoa_r+0x8f8>
 8006a7e:	d082      	beq.n	8006986 <_dtoa_r+0x816>
 8006a80:	9a05      	ldr	r2, [sp, #20]
 8006a82:	331c      	adds	r3, #28
 8006a84:	441a      	add	r2, r3
 8006a86:	9205      	str	r2, [sp, #20]
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	441d      	add	r5, r3
 8006a8e:	9206      	str	r2, [sp, #24]
 8006a90:	e779      	b.n	8006986 <_dtoa_r+0x816>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f4      	b.n	8006a80 <_dtoa_r+0x910>
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dc37      	bgt.n	8006b0c <_dtoa_r+0x99c>
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	dd34      	ble.n	8006b0c <_dtoa_r+0x99c>
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	b963      	cbnz	r3, 8006ac4 <_dtoa_r+0x954>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	2205      	movs	r2, #5
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 fab2 	bl	8007018 <__multadd>
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4650      	mov	r0, sl
 8006aba:	f000 fcc7 	bl	800744c <__mcmp>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f73f adbb 	bgt.w	800663a <_dtoa_r+0x4ca>
 8006ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac6:	9d00      	ldr	r5, [sp, #0]
 8006ac8:	ea6f 0b03 	mvn.w	fp, r3
 8006acc:	f04f 0800 	mov.w	r8, #0
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fa7e 	bl	8006fd4 <_Bfree>
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	f43f aeab 	beq.w	8006834 <_dtoa_r+0x6c4>
 8006ade:	f1b8 0f00 	cmp.w	r8, #0
 8006ae2:	d005      	beq.n	8006af0 <_dtoa_r+0x980>
 8006ae4:	45b8      	cmp	r8, r7
 8006ae6:	d003      	beq.n	8006af0 <_dtoa_r+0x980>
 8006ae8:	4641      	mov	r1, r8
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fa72 	bl	8006fd4 <_Bfree>
 8006af0:	4639      	mov	r1, r7
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fa6e 	bl	8006fd4 <_Bfree>
 8006af8:	e69c      	b.n	8006834 <_dtoa_r+0x6c4>
 8006afa:	2600      	movs	r6, #0
 8006afc:	4637      	mov	r7, r6
 8006afe:	e7e1      	b.n	8006ac4 <_dtoa_r+0x954>
 8006b00:	46bb      	mov	fp, r7
 8006b02:	4637      	mov	r7, r6
 8006b04:	e599      	b.n	800663a <_dtoa_r+0x4ca>
 8006b06:	bf00      	nop
 8006b08:	40240000 	.word	0x40240000
 8006b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 80c8 	beq.w	8006ca4 <_dtoa_r+0xb34>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x9b8>
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	462a      	mov	r2, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fc27 	bl	8007374 <__lshift>
 8006b26:	4607      	mov	r7, r0
 8006b28:	f1b8 0f00 	cmp.w	r8, #0
 8006b2c:	d05b      	beq.n	8006be6 <_dtoa_r+0xa76>
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 fa0f 	bl	8006f54 <_Balloc>
 8006b36:	4605      	mov	r5, r0
 8006b38:	b928      	cbnz	r0, 8006b46 <_dtoa_r+0x9d6>
 8006b3a:	4b83      	ldr	r3, [pc, #524]	; (8006d48 <_dtoa_r+0xbd8>)
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b42:	f7ff bb2e 	b.w	80061a2 <_dtoa_r+0x32>
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	3202      	adds	r2, #2
 8006b4a:	0092      	lsls	r2, r2, #2
 8006b4c:	f107 010c 	add.w	r1, r7, #12
 8006b50:	300c      	adds	r0, #12
 8006b52:	f001 f801 	bl	8007b58 <memcpy>
 8006b56:	2201      	movs	r2, #1
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 fc0a 	bl	8007374 <__lshift>
 8006b60:	9b00      	ldr	r3, [sp, #0]
 8006b62:	3301      	adds	r3, #1
 8006b64:	9304      	str	r3, [sp, #16]
 8006b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	9308      	str	r3, [sp, #32]
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	46b8      	mov	r8, r7
 8006b76:	9306      	str	r3, [sp, #24]
 8006b78:	4607      	mov	r7, r0
 8006b7a:	9b04      	ldr	r3, [sp, #16]
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4650      	mov	r0, sl
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	f7ff fa6b 	bl	800605e <quorem>
 8006b88:	4641      	mov	r1, r8
 8006b8a:	9002      	str	r0, [sp, #8]
 8006b8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b90:	4650      	mov	r0, sl
 8006b92:	f000 fc5b 	bl	800744c <__mcmp>
 8006b96:	463a      	mov	r2, r7
 8006b98:	9005      	str	r0, [sp, #20]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fc71 	bl	8007484 <__mdiff>
 8006ba2:	68c2      	ldr	r2, [r0, #12]
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	bb02      	cbnz	r2, 8006bea <_dtoa_r+0xa7a>
 8006ba8:	4601      	mov	r1, r0
 8006baa:	4650      	mov	r0, sl
 8006bac:	f000 fc4e 	bl	800744c <__mcmp>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bb8:	f000 fa0c 	bl	8006fd4 <_Bfree>
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc0:	9d04      	ldr	r5, [sp, #16]
 8006bc2:	ea43 0102 	orr.w	r1, r3, r2
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	4319      	orrs	r1, r3
 8006bca:	d110      	bne.n	8006bee <_dtoa_r+0xa7e>
 8006bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bd0:	d029      	beq.n	8006c26 <_dtoa_r+0xab6>
 8006bd2:	9b05      	ldr	r3, [sp, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd02      	ble.n	8006bde <_dtoa_r+0xa6e>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006bde:	9b01      	ldr	r3, [sp, #4]
 8006be0:	f883 9000 	strb.w	r9, [r3]
 8006be4:	e774      	b.n	8006ad0 <_dtoa_r+0x960>
 8006be6:	4638      	mov	r0, r7
 8006be8:	e7ba      	b.n	8006b60 <_dtoa_r+0x9f0>
 8006bea:	2201      	movs	r2, #1
 8006bec:	e7e1      	b.n	8006bb2 <_dtoa_r+0xa42>
 8006bee:	9b05      	ldr	r3, [sp, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db04      	blt.n	8006bfe <_dtoa_r+0xa8e>
 8006bf4:	9907      	ldr	r1, [sp, #28]
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	9906      	ldr	r1, [sp, #24]
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	d120      	bne.n	8006c40 <_dtoa_r+0xad0>
 8006bfe:	2a00      	cmp	r2, #0
 8006c00:	dded      	ble.n	8006bde <_dtoa_r+0xa6e>
 8006c02:	4651      	mov	r1, sl
 8006c04:	2201      	movs	r2, #1
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fbb4 	bl	8007374 <__lshift>
 8006c0c:	4631      	mov	r1, r6
 8006c0e:	4682      	mov	sl, r0
 8006c10:	f000 fc1c 	bl	800744c <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	dc03      	bgt.n	8006c20 <_dtoa_r+0xab0>
 8006c18:	d1e1      	bne.n	8006bde <_dtoa_r+0xa6e>
 8006c1a:	f019 0f01 	tst.w	r9, #1
 8006c1e:	d0de      	beq.n	8006bde <_dtoa_r+0xa6e>
 8006c20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c24:	d1d8      	bne.n	8006bd8 <_dtoa_r+0xa68>
 8006c26:	9a01      	ldr	r2, [sp, #4]
 8006c28:	2339      	movs	r3, #57	; 0x39
 8006c2a:	7013      	strb	r3, [r2, #0]
 8006c2c:	462b      	mov	r3, r5
 8006c2e:	461d      	mov	r5, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c36:	2a39      	cmp	r2, #57	; 0x39
 8006c38:	d06c      	beq.n	8006d14 <_dtoa_r+0xba4>
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	e747      	b.n	8006ad0 <_dtoa_r+0x960>
 8006c40:	2a00      	cmp	r2, #0
 8006c42:	dd07      	ble.n	8006c54 <_dtoa_r+0xae4>
 8006c44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c48:	d0ed      	beq.n	8006c26 <_dtoa_r+0xab6>
 8006c4a:	9a01      	ldr	r2, [sp, #4]
 8006c4c:	f109 0301 	add.w	r3, r9, #1
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	e73d      	b.n	8006ad0 <_dtoa_r+0x960>
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	9a08      	ldr	r2, [sp, #32]
 8006c58:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d043      	beq.n	8006ce8 <_dtoa_r+0xb78>
 8006c60:	4651      	mov	r1, sl
 8006c62:	2300      	movs	r3, #0
 8006c64:	220a      	movs	r2, #10
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 f9d6 	bl	8007018 <__multadd>
 8006c6c:	45b8      	cmp	r8, r7
 8006c6e:	4682      	mov	sl, r0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	f04f 020a 	mov.w	r2, #10
 8006c78:	4641      	mov	r1, r8
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	d107      	bne.n	8006c8e <_dtoa_r+0xb1e>
 8006c7e:	f000 f9cb 	bl	8007018 <__multadd>
 8006c82:	4680      	mov	r8, r0
 8006c84:	4607      	mov	r7, r0
 8006c86:	9b04      	ldr	r3, [sp, #16]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	e775      	b.n	8006b7a <_dtoa_r+0xa0a>
 8006c8e:	f000 f9c3 	bl	8007018 <__multadd>
 8006c92:	4639      	mov	r1, r7
 8006c94:	4680      	mov	r8, r0
 8006c96:	2300      	movs	r3, #0
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f9bc 	bl	8007018 <__multadd>
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	e7f0      	b.n	8006c86 <_dtoa_r+0xb16>
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	9d00      	ldr	r5, [sp, #0]
 8006caa:	4631      	mov	r1, r6
 8006cac:	4650      	mov	r0, sl
 8006cae:	f7ff f9d6 	bl	800605e <quorem>
 8006cb2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	f805 9b01 	strb.w	r9, [r5], #1
 8006cbc:	1aea      	subs	r2, r5, r3
 8006cbe:	9b01      	ldr	r3, [sp, #4]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	dd07      	ble.n	8006cd4 <_dtoa_r+0xb64>
 8006cc4:	4651      	mov	r1, sl
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f9a4 	bl	8007018 <__multadd>
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	e7ea      	b.n	8006caa <_dtoa_r+0xb3a>
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfc8      	it	gt
 8006cda:	461d      	movgt	r5, r3
 8006cdc:	9b00      	ldr	r3, [sp, #0]
 8006cde:	bfd8      	it	le
 8006ce0:	2501      	movle	r5, #1
 8006ce2:	441d      	add	r5, r3
 8006ce4:	f04f 0800 	mov.w	r8, #0
 8006ce8:	4651      	mov	r1, sl
 8006cea:	2201      	movs	r2, #1
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 fb41 	bl	8007374 <__lshift>
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	f000 fba9 	bl	800744c <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	dc96      	bgt.n	8006c2c <_dtoa_r+0xabc>
 8006cfe:	d102      	bne.n	8006d06 <_dtoa_r+0xb96>
 8006d00:	f019 0f01 	tst.w	r9, #1
 8006d04:	d192      	bne.n	8006c2c <_dtoa_r+0xabc>
 8006d06:	462b      	mov	r3, r5
 8006d08:	461d      	mov	r5, r3
 8006d0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0e:	2a30      	cmp	r2, #48	; 0x30
 8006d10:	d0fa      	beq.n	8006d08 <_dtoa_r+0xb98>
 8006d12:	e6dd      	b.n	8006ad0 <_dtoa_r+0x960>
 8006d14:	9a00      	ldr	r2, [sp, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d189      	bne.n	8006c2e <_dtoa_r+0xabe>
 8006d1a:	f10b 0b01 	add.w	fp, fp, #1
 8006d1e:	2331      	movs	r3, #49	; 0x31
 8006d20:	e796      	b.n	8006c50 <_dtoa_r+0xae0>
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <_dtoa_r+0xbdc>)
 8006d24:	f7ff ba99 	b.w	800625a <_dtoa_r+0xea>
 8006d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f47f aa6d 	bne.w	800620a <_dtoa_r+0x9a>
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <_dtoa_r+0xbe0>)
 8006d32:	f7ff ba92 	b.w	800625a <_dtoa_r+0xea>
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dcb5      	bgt.n	8006ca8 <_dtoa_r+0xb38>
 8006d3c:	9b07      	ldr	r3, [sp, #28]
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	f73f aeb1 	bgt.w	8006aa6 <_dtoa_r+0x936>
 8006d44:	e7b0      	b.n	8006ca8 <_dtoa_r+0xb38>
 8006d46:	bf00      	nop
 8006d48:	0800830a 	.word	0x0800830a
 8006d4c:	0800826a 	.word	0x0800826a
 8006d50:	0800828e 	.word	0x0800828e

08006d54 <_free_r>:
 8006d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d56:	2900      	cmp	r1, #0
 8006d58:	d044      	beq.n	8006de4 <_free_r+0x90>
 8006d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5e:	9001      	str	r0, [sp, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f1a1 0404 	sub.w	r4, r1, #4
 8006d66:	bfb8      	it	lt
 8006d68:	18e4      	addlt	r4, r4, r3
 8006d6a:	f000 f8e7 	bl	8006f3c <__malloc_lock>
 8006d6e:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <_free_r+0x94>)
 8006d70:	9801      	ldr	r0, [sp, #4]
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	b933      	cbnz	r3, 8006d84 <_free_r+0x30>
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	6014      	str	r4, [r2, #0]
 8006d7a:	b003      	add	sp, #12
 8006d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d80:	f000 b8e2 	b.w	8006f48 <__malloc_unlock>
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	d908      	bls.n	8006d9a <_free_r+0x46>
 8006d88:	6825      	ldr	r5, [r4, #0]
 8006d8a:	1961      	adds	r1, r4, r5
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf01      	itttt	eq
 8006d90:	6819      	ldreq	r1, [r3, #0]
 8006d92:	685b      	ldreq	r3, [r3, #4]
 8006d94:	1949      	addeq	r1, r1, r5
 8006d96:	6021      	streq	r1, [r4, #0]
 8006d98:	e7ed      	b.n	8006d76 <_free_r+0x22>
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b10b      	cbz	r3, 8006da4 <_free_r+0x50>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d9fa      	bls.n	8006d9a <_free_r+0x46>
 8006da4:	6811      	ldr	r1, [r2, #0]
 8006da6:	1855      	adds	r5, r2, r1
 8006da8:	42a5      	cmp	r5, r4
 8006daa:	d10b      	bne.n	8006dc4 <_free_r+0x70>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	4421      	add	r1, r4
 8006db0:	1854      	adds	r4, r2, r1
 8006db2:	42a3      	cmp	r3, r4
 8006db4:	6011      	str	r1, [r2, #0]
 8006db6:	d1e0      	bne.n	8006d7a <_free_r+0x26>
 8006db8:	681c      	ldr	r4, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	440c      	add	r4, r1
 8006dc0:	6014      	str	r4, [r2, #0]
 8006dc2:	e7da      	b.n	8006d7a <_free_r+0x26>
 8006dc4:	d902      	bls.n	8006dcc <_free_r+0x78>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	e7d6      	b.n	8006d7a <_free_r+0x26>
 8006dcc:	6825      	ldr	r5, [r4, #0]
 8006dce:	1961      	adds	r1, r4, r5
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf04      	itt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	bf04      	itt	eq
 8006ddc:	1949      	addeq	r1, r1, r5
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	6054      	str	r4, [r2, #4]
 8006de2:	e7ca      	b.n	8006d7a <_free_r+0x26>
 8006de4:	b003      	add	sp, #12
 8006de6:	bd30      	pop	{r4, r5, pc}
 8006de8:	200004cc 	.word	0x200004cc

08006dec <malloc>:
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <malloc+0xc>)
 8006dee:	4601      	mov	r1, r0
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f000 b823 	b.w	8006e3c <_malloc_r>
 8006df6:	bf00      	nop
 8006df8:	200000b4 	.word	0x200000b4

08006dfc <sbrk_aligned>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4e0e      	ldr	r6, [pc, #56]	; (8006e38 <sbrk_aligned+0x3c>)
 8006e00:	460c      	mov	r4, r1
 8006e02:	6831      	ldr	r1, [r6, #0]
 8006e04:	4605      	mov	r5, r0
 8006e06:	b911      	cbnz	r1, 8006e0e <sbrk_aligned+0x12>
 8006e08:	f000 fe96 	bl	8007b38 <_sbrk_r>
 8006e0c:	6030      	str	r0, [r6, #0]
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 fe91 	bl	8007b38 <_sbrk_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d00a      	beq.n	8006e30 <sbrk_aligned+0x34>
 8006e1a:	1cc4      	adds	r4, r0, #3
 8006e1c:	f024 0403 	bic.w	r4, r4, #3
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d007      	beq.n	8006e34 <sbrk_aligned+0x38>
 8006e24:	1a21      	subs	r1, r4, r0
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fe86 	bl	8007b38 <_sbrk_r>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d101      	bne.n	8006e34 <sbrk_aligned+0x38>
 8006e30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e34:	4620      	mov	r0, r4
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	200004d0 	.word	0x200004d0

08006e3c <_malloc_r>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4607      	mov	r7, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d905      	bls.n	8006e64 <_malloc_r+0x28>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f38 <_malloc_r+0xfc>
 8006e68:	f000 f868 	bl	8006f3c <__malloc_lock>
 8006e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e70:	461c      	mov	r4, r3
 8006e72:	bb5c      	cbnz	r4, 8006ecc <_malloc_r+0x90>
 8006e74:	4629      	mov	r1, r5
 8006e76:	4638      	mov	r0, r7
 8006e78:	f7ff ffc0 	bl	8006dfc <sbrk_aligned>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	4604      	mov	r4, r0
 8006e80:	d155      	bne.n	8006f2e <_malloc_r+0xf2>
 8006e82:	f8d8 4000 	ldr.w	r4, [r8]
 8006e86:	4626      	mov	r6, r4
 8006e88:	2e00      	cmp	r6, #0
 8006e8a:	d145      	bne.n	8006f18 <_malloc_r+0xdc>
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	d048      	beq.n	8006f22 <_malloc_r+0xe6>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	4631      	mov	r1, r6
 8006e94:	4638      	mov	r0, r7
 8006e96:	eb04 0903 	add.w	r9, r4, r3
 8006e9a:	f000 fe4d 	bl	8007b38 <_sbrk_r>
 8006e9e:	4581      	cmp	r9, r0
 8006ea0:	d13f      	bne.n	8006f22 <_malloc_r+0xe6>
 8006ea2:	6821      	ldr	r1, [r4, #0]
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f7ff ffa7 	bl	8006dfc <sbrk_aligned>
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d037      	beq.n	8006f22 <_malloc_r+0xe6>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	442b      	add	r3, r5
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d038      	beq.n	8006f32 <_malloc_r+0xf6>
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	42a2      	cmp	r2, r4
 8006ec4:	d12b      	bne.n	8006f1e <_malloc_r+0xe2>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	e00f      	b.n	8006eec <_malloc_r+0xb0>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	1b52      	subs	r2, r2, r5
 8006ed0:	d41f      	bmi.n	8006f12 <_malloc_r+0xd6>
 8006ed2:	2a0b      	cmp	r2, #11
 8006ed4:	d917      	bls.n	8006f06 <_malloc_r+0xca>
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	6025      	str	r5, [r4, #0]
 8006edc:	bf18      	it	ne
 8006ede:	6059      	strne	r1, [r3, #4]
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	bf08      	it	eq
 8006ee4:	f8c8 1000 	streq.w	r1, [r8]
 8006ee8:	5162      	str	r2, [r4, r5]
 8006eea:	604b      	str	r3, [r1, #4]
 8006eec:	4638      	mov	r0, r7
 8006eee:	f104 060b 	add.w	r6, r4, #11
 8006ef2:	f000 f829 	bl	8006f48 <__malloc_unlock>
 8006ef6:	f026 0607 	bic.w	r6, r6, #7
 8006efa:	1d23      	adds	r3, r4, #4
 8006efc:	1af2      	subs	r2, r6, r3
 8006efe:	d0ae      	beq.n	8006e5e <_malloc_r+0x22>
 8006f00:	1b9b      	subs	r3, r3, r6
 8006f02:	50a3      	str	r3, [r4, r2]
 8006f04:	e7ab      	b.n	8006e5e <_malloc_r+0x22>
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	6862      	ldr	r2, [r4, #4]
 8006f0a:	d1dd      	bne.n	8006ec8 <_malloc_r+0x8c>
 8006f0c:	f8c8 2000 	str.w	r2, [r8]
 8006f10:	e7ec      	b.n	8006eec <_malloc_r+0xb0>
 8006f12:	4623      	mov	r3, r4
 8006f14:	6864      	ldr	r4, [r4, #4]
 8006f16:	e7ac      	b.n	8006e72 <_malloc_r+0x36>
 8006f18:	4634      	mov	r4, r6
 8006f1a:	6876      	ldr	r6, [r6, #4]
 8006f1c:	e7b4      	b.n	8006e88 <_malloc_r+0x4c>
 8006f1e:	4613      	mov	r3, r2
 8006f20:	e7cc      	b.n	8006ebc <_malloc_r+0x80>
 8006f22:	230c      	movs	r3, #12
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4638      	mov	r0, r7
 8006f28:	f000 f80e 	bl	8006f48 <__malloc_unlock>
 8006f2c:	e797      	b.n	8006e5e <_malloc_r+0x22>
 8006f2e:	6025      	str	r5, [r4, #0]
 8006f30:	e7dc      	b.n	8006eec <_malloc_r+0xb0>
 8006f32:	605b      	str	r3, [r3, #4]
 8006f34:	deff      	udf	#255	; 0xff
 8006f36:	bf00      	nop
 8006f38:	200004cc 	.word	0x200004cc

08006f3c <__malloc_lock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__malloc_lock+0x8>)
 8006f3e:	f7ff b88c 	b.w	800605a <__retarget_lock_acquire_recursive>
 8006f42:	bf00      	nop
 8006f44:	200004c8 	.word	0x200004c8

08006f48 <__malloc_unlock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__malloc_unlock+0x8>)
 8006f4a:	f7ff b887 	b.w	800605c <__retarget_lock_release_recursive>
 8006f4e:	bf00      	nop
 8006f50:	200004c8 	.word	0x200004c8

08006f54 <_Balloc>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	69c6      	ldr	r6, [r0, #28]
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	b976      	cbnz	r6, 8006f7c <_Balloc+0x28>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff ff44 	bl	8006dec <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	61e0      	str	r0, [r4, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_Balloc+0x20>
 8006f6a:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <_Balloc+0x78>)
 8006f6c:	4818      	ldr	r0, [pc, #96]	; (8006fd0 <_Balloc+0x7c>)
 8006f6e:	216b      	movs	r1, #107	; 0x6b
 8006f70:	f000 fe00 	bl	8007b74 <__assert_func>
 8006f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f78:	6006      	str	r6, [r0, #0]
 8006f7a:	60c6      	str	r6, [r0, #12]
 8006f7c:	69e6      	ldr	r6, [r4, #28]
 8006f7e:	68f3      	ldr	r3, [r6, #12]
 8006f80:	b183      	cbz	r3, 8006fa4 <_Balloc+0x50>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f8a:	b9b8      	cbnz	r0, 8006fbc <_Balloc+0x68>
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8006f92:	1d72      	adds	r2, r6, #5
 8006f94:	0092      	lsls	r2, r2, #2
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fe0a 	bl	8007bb0 <_calloc_r>
 8006f9c:	b160      	cbz	r0, 8006fb8 <_Balloc+0x64>
 8006f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fa2:	e00e      	b.n	8006fc2 <_Balloc+0x6e>
 8006fa4:	2221      	movs	r2, #33	; 0x21
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 fe01 	bl	8007bb0 <_calloc_r>
 8006fae:	69e3      	ldr	r3, [r4, #28]
 8006fb0:	60f0      	str	r0, [r6, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e4      	bne.n	8006f82 <_Balloc+0x2e>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	6802      	ldr	r2, [r0, #0]
 8006fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fc8:	e7f7      	b.n	8006fba <_Balloc+0x66>
 8006fca:	bf00      	nop
 8006fcc:	0800829b 	.word	0x0800829b
 8006fd0:	0800831b 	.word	0x0800831b

08006fd4 <_Bfree>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	69c6      	ldr	r6, [r0, #28]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	b976      	cbnz	r6, 8006ffc <_Bfree+0x28>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7ff ff04 	bl	8006dec <malloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	61e8      	str	r0, [r5, #28]
 8006fe8:	b920      	cbnz	r0, 8006ff4 <_Bfree+0x20>
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <_Bfree+0x3c>)
 8006fec:	4809      	ldr	r0, [pc, #36]	; (8007014 <_Bfree+0x40>)
 8006fee:	218f      	movs	r1, #143	; 0x8f
 8006ff0:	f000 fdc0 	bl	8007b74 <__assert_func>
 8006ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff8:	6006      	str	r6, [r0, #0]
 8006ffa:	60c6      	str	r6, [r0, #12]
 8006ffc:	b13c      	cbz	r4, 800700e <_Bfree+0x3a>
 8006ffe:	69eb      	ldr	r3, [r5, #28]
 8007000:	6862      	ldr	r2, [r4, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007008:	6021      	str	r1, [r4, #0]
 800700a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	0800829b 	.word	0x0800829b
 8007014:	0800831b 	.word	0x0800831b

08007018 <__multadd>:
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	690d      	ldr	r5, [r1, #16]
 800701e:	4607      	mov	r7, r0
 8007020:	460c      	mov	r4, r1
 8007022:	461e      	mov	r6, r3
 8007024:	f101 0c14 	add.w	ip, r1, #20
 8007028:	2000      	movs	r0, #0
 800702a:	f8dc 3000 	ldr.w	r3, [ip]
 800702e:	b299      	uxth	r1, r3
 8007030:	fb02 6101 	mla	r1, r2, r1, r6
 8007034:	0c1e      	lsrs	r6, r3, #16
 8007036:	0c0b      	lsrs	r3, r1, #16
 8007038:	fb02 3306 	mla	r3, r2, r6, r3
 800703c:	b289      	uxth	r1, r1
 800703e:	3001      	adds	r0, #1
 8007040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007044:	4285      	cmp	r5, r0
 8007046:	f84c 1b04 	str.w	r1, [ip], #4
 800704a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800704e:	dcec      	bgt.n	800702a <__multadd+0x12>
 8007050:	b30e      	cbz	r6, 8007096 <__multadd+0x7e>
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	42ab      	cmp	r3, r5
 8007056:	dc19      	bgt.n	800708c <__multadd+0x74>
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	4638      	mov	r0, r7
 800705c:	3101      	adds	r1, #1
 800705e:	f7ff ff79 	bl	8006f54 <_Balloc>
 8007062:	4680      	mov	r8, r0
 8007064:	b928      	cbnz	r0, 8007072 <__multadd+0x5a>
 8007066:	4602      	mov	r2, r0
 8007068:	4b0c      	ldr	r3, [pc, #48]	; (800709c <__multadd+0x84>)
 800706a:	480d      	ldr	r0, [pc, #52]	; (80070a0 <__multadd+0x88>)
 800706c:	21ba      	movs	r1, #186	; 0xba
 800706e:	f000 fd81 	bl	8007b74 <__assert_func>
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	3202      	adds	r2, #2
 8007076:	f104 010c 	add.w	r1, r4, #12
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f000 fd6b 	bl	8007b58 <memcpy>
 8007082:	4621      	mov	r1, r4
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ffa5 	bl	8006fd4 <_Bfree>
 800708a:	4644      	mov	r4, r8
 800708c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007090:	3501      	adds	r5, #1
 8007092:	615e      	str	r6, [r3, #20]
 8007094:	6125      	str	r5, [r4, #16]
 8007096:	4620      	mov	r0, r4
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	0800830a 	.word	0x0800830a
 80070a0:	0800831b 	.word	0x0800831b

080070a4 <__hi0bits>:
 80070a4:	0c03      	lsrs	r3, r0, #16
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	b9d3      	cbnz	r3, 80070e0 <__hi0bits+0x3c>
 80070aa:	0400      	lsls	r0, r0, #16
 80070ac:	2310      	movs	r3, #16
 80070ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070b2:	bf04      	itt	eq
 80070b4:	0200      	lsleq	r0, r0, #8
 80070b6:	3308      	addeq	r3, #8
 80070b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070bc:	bf04      	itt	eq
 80070be:	0100      	lsleq	r0, r0, #4
 80070c0:	3304      	addeq	r3, #4
 80070c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070c6:	bf04      	itt	eq
 80070c8:	0080      	lsleq	r0, r0, #2
 80070ca:	3302      	addeq	r3, #2
 80070cc:	2800      	cmp	r0, #0
 80070ce:	db05      	blt.n	80070dc <__hi0bits+0x38>
 80070d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070d4:	f103 0301 	add.w	r3, r3, #1
 80070d8:	bf08      	it	eq
 80070da:	2320      	moveq	r3, #32
 80070dc:	4618      	mov	r0, r3
 80070de:	4770      	bx	lr
 80070e0:	2300      	movs	r3, #0
 80070e2:	e7e4      	b.n	80070ae <__hi0bits+0xa>

080070e4 <__lo0bits>:
 80070e4:	6803      	ldr	r3, [r0, #0]
 80070e6:	f013 0207 	ands.w	r2, r3, #7
 80070ea:	d00c      	beq.n	8007106 <__lo0bits+0x22>
 80070ec:	07d9      	lsls	r1, r3, #31
 80070ee:	d422      	bmi.n	8007136 <__lo0bits+0x52>
 80070f0:	079a      	lsls	r2, r3, #30
 80070f2:	bf49      	itett	mi
 80070f4:	085b      	lsrmi	r3, r3, #1
 80070f6:	089b      	lsrpl	r3, r3, #2
 80070f8:	6003      	strmi	r3, [r0, #0]
 80070fa:	2201      	movmi	r2, #1
 80070fc:	bf5c      	itt	pl
 80070fe:	6003      	strpl	r3, [r0, #0]
 8007100:	2202      	movpl	r2, #2
 8007102:	4610      	mov	r0, r2
 8007104:	4770      	bx	lr
 8007106:	b299      	uxth	r1, r3
 8007108:	b909      	cbnz	r1, 800710e <__lo0bits+0x2a>
 800710a:	0c1b      	lsrs	r3, r3, #16
 800710c:	2210      	movs	r2, #16
 800710e:	b2d9      	uxtb	r1, r3
 8007110:	b909      	cbnz	r1, 8007116 <__lo0bits+0x32>
 8007112:	3208      	adds	r2, #8
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	0719      	lsls	r1, r3, #28
 8007118:	bf04      	itt	eq
 800711a:	091b      	lsreq	r3, r3, #4
 800711c:	3204      	addeq	r2, #4
 800711e:	0799      	lsls	r1, r3, #30
 8007120:	bf04      	itt	eq
 8007122:	089b      	lsreq	r3, r3, #2
 8007124:	3202      	addeq	r2, #2
 8007126:	07d9      	lsls	r1, r3, #31
 8007128:	d403      	bmi.n	8007132 <__lo0bits+0x4e>
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	f102 0201 	add.w	r2, r2, #1
 8007130:	d003      	beq.n	800713a <__lo0bits+0x56>
 8007132:	6003      	str	r3, [r0, #0]
 8007134:	e7e5      	b.n	8007102 <__lo0bits+0x1e>
 8007136:	2200      	movs	r2, #0
 8007138:	e7e3      	b.n	8007102 <__lo0bits+0x1e>
 800713a:	2220      	movs	r2, #32
 800713c:	e7e1      	b.n	8007102 <__lo0bits+0x1e>
	...

08007140 <__i2b>:
 8007140:	b510      	push	{r4, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	2101      	movs	r1, #1
 8007146:	f7ff ff05 	bl	8006f54 <_Balloc>
 800714a:	4602      	mov	r2, r0
 800714c:	b928      	cbnz	r0, 800715a <__i2b+0x1a>
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <__i2b+0x24>)
 8007150:	4805      	ldr	r0, [pc, #20]	; (8007168 <__i2b+0x28>)
 8007152:	f240 1145 	movw	r1, #325	; 0x145
 8007156:	f000 fd0d 	bl	8007b74 <__assert_func>
 800715a:	2301      	movs	r3, #1
 800715c:	6144      	str	r4, [r0, #20]
 800715e:	6103      	str	r3, [r0, #16]
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	0800830a 	.word	0x0800830a
 8007168:	0800831b 	.word	0x0800831b

0800716c <__multiply>:
 800716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	4691      	mov	r9, r2
 8007172:	690a      	ldr	r2, [r1, #16]
 8007174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	bfb8      	it	lt
 800717c:	460b      	movlt	r3, r1
 800717e:	460c      	mov	r4, r1
 8007180:	bfbc      	itt	lt
 8007182:	464c      	movlt	r4, r9
 8007184:	4699      	movlt	r9, r3
 8007186:	6927      	ldr	r7, [r4, #16]
 8007188:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800718c:	68a3      	ldr	r3, [r4, #8]
 800718e:	6861      	ldr	r1, [r4, #4]
 8007190:	eb07 060a 	add.w	r6, r7, sl
 8007194:	42b3      	cmp	r3, r6
 8007196:	b085      	sub	sp, #20
 8007198:	bfb8      	it	lt
 800719a:	3101      	addlt	r1, #1
 800719c:	f7ff feda 	bl	8006f54 <_Balloc>
 80071a0:	b930      	cbnz	r0, 80071b0 <__multiply+0x44>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b44      	ldr	r3, [pc, #272]	; (80072b8 <__multiply+0x14c>)
 80071a6:	4845      	ldr	r0, [pc, #276]	; (80072bc <__multiply+0x150>)
 80071a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80071ac:	f000 fce2 	bl	8007b74 <__assert_func>
 80071b0:	f100 0514 	add.w	r5, r0, #20
 80071b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071b8:	462b      	mov	r3, r5
 80071ba:	2200      	movs	r2, #0
 80071bc:	4543      	cmp	r3, r8
 80071be:	d321      	bcc.n	8007204 <__multiply+0x98>
 80071c0:	f104 0314 	add.w	r3, r4, #20
 80071c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071c8:	f109 0314 	add.w	r3, r9, #20
 80071cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071d0:	9202      	str	r2, [sp, #8]
 80071d2:	1b3a      	subs	r2, r7, r4
 80071d4:	3a15      	subs	r2, #21
 80071d6:	f022 0203 	bic.w	r2, r2, #3
 80071da:	3204      	adds	r2, #4
 80071dc:	f104 0115 	add.w	r1, r4, #21
 80071e0:	428f      	cmp	r7, r1
 80071e2:	bf38      	it	cc
 80071e4:	2204      	movcc	r2, #4
 80071e6:	9201      	str	r2, [sp, #4]
 80071e8:	9a02      	ldr	r2, [sp, #8]
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d80c      	bhi.n	800720a <__multiply+0x9e>
 80071f0:	2e00      	cmp	r6, #0
 80071f2:	dd03      	ble.n	80071fc <__multiply+0x90>
 80071f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d05b      	beq.n	80072b4 <__multiply+0x148>
 80071fc:	6106      	str	r6, [r0, #16]
 80071fe:	b005      	add	sp, #20
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	f843 2b04 	str.w	r2, [r3], #4
 8007208:	e7d8      	b.n	80071bc <__multiply+0x50>
 800720a:	f8b3 a000 	ldrh.w	sl, [r3]
 800720e:	f1ba 0f00 	cmp.w	sl, #0
 8007212:	d024      	beq.n	800725e <__multiply+0xf2>
 8007214:	f104 0e14 	add.w	lr, r4, #20
 8007218:	46a9      	mov	r9, r5
 800721a:	f04f 0c00 	mov.w	ip, #0
 800721e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007222:	f8d9 1000 	ldr.w	r1, [r9]
 8007226:	fa1f fb82 	uxth.w	fp, r2
 800722a:	b289      	uxth	r1, r1
 800722c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007230:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007234:	f8d9 2000 	ldr.w	r2, [r9]
 8007238:	4461      	add	r1, ip
 800723a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800723e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007242:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007246:	b289      	uxth	r1, r1
 8007248:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800724c:	4577      	cmp	r7, lr
 800724e:	f849 1b04 	str.w	r1, [r9], #4
 8007252:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007256:	d8e2      	bhi.n	800721e <__multiply+0xb2>
 8007258:	9a01      	ldr	r2, [sp, #4]
 800725a:	f845 c002 	str.w	ip, [r5, r2]
 800725e:	9a03      	ldr	r2, [sp, #12]
 8007260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007264:	3304      	adds	r3, #4
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	d021      	beq.n	80072b0 <__multiply+0x144>
 800726c:	6829      	ldr	r1, [r5, #0]
 800726e:	f104 0c14 	add.w	ip, r4, #20
 8007272:	46ae      	mov	lr, r5
 8007274:	f04f 0a00 	mov.w	sl, #0
 8007278:	f8bc b000 	ldrh.w	fp, [ip]
 800727c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007280:	fb09 220b 	mla	r2, r9, fp, r2
 8007284:	4452      	add	r2, sl
 8007286:	b289      	uxth	r1, r1
 8007288:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800728c:	f84e 1b04 	str.w	r1, [lr], #4
 8007290:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007294:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007298:	f8be 1000 	ldrh.w	r1, [lr]
 800729c:	fb09 110a 	mla	r1, r9, sl, r1
 80072a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80072a4:	4567      	cmp	r7, ip
 80072a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072aa:	d8e5      	bhi.n	8007278 <__multiply+0x10c>
 80072ac:	9a01      	ldr	r2, [sp, #4]
 80072ae:	50a9      	str	r1, [r5, r2]
 80072b0:	3504      	adds	r5, #4
 80072b2:	e799      	b.n	80071e8 <__multiply+0x7c>
 80072b4:	3e01      	subs	r6, #1
 80072b6:	e79b      	b.n	80071f0 <__multiply+0x84>
 80072b8:	0800830a 	.word	0x0800830a
 80072bc:	0800831b 	.word	0x0800831b

080072c0 <__pow5mult>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4615      	mov	r5, r2
 80072c6:	f012 0203 	ands.w	r2, r2, #3
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	d007      	beq.n	80072e0 <__pow5mult+0x20>
 80072d0:	4c25      	ldr	r4, [pc, #148]	; (8007368 <__pow5mult+0xa8>)
 80072d2:	3a01      	subs	r2, #1
 80072d4:	2300      	movs	r3, #0
 80072d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072da:	f7ff fe9d 	bl	8007018 <__multadd>
 80072de:	4607      	mov	r7, r0
 80072e0:	10ad      	asrs	r5, r5, #2
 80072e2:	d03d      	beq.n	8007360 <__pow5mult+0xa0>
 80072e4:	69f4      	ldr	r4, [r6, #28]
 80072e6:	b97c      	cbnz	r4, 8007308 <__pow5mult+0x48>
 80072e8:	2010      	movs	r0, #16
 80072ea:	f7ff fd7f 	bl	8006dec <malloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	61f0      	str	r0, [r6, #28]
 80072f2:	b928      	cbnz	r0, 8007300 <__pow5mult+0x40>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	; (800736c <__pow5mult+0xac>)
 80072f6:	481e      	ldr	r0, [pc, #120]	; (8007370 <__pow5mult+0xb0>)
 80072f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80072fc:	f000 fc3a 	bl	8007b74 <__assert_func>
 8007300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007304:	6004      	str	r4, [r0, #0]
 8007306:	60c4      	str	r4, [r0, #12]
 8007308:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800730c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007310:	b94c      	cbnz	r4, 8007326 <__pow5mult+0x66>
 8007312:	f240 2171 	movw	r1, #625	; 0x271
 8007316:	4630      	mov	r0, r6
 8007318:	f7ff ff12 	bl	8007140 <__i2b>
 800731c:	2300      	movs	r3, #0
 800731e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007322:	4604      	mov	r4, r0
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	07eb      	lsls	r3, r5, #31
 800732c:	d50a      	bpl.n	8007344 <__pow5mult+0x84>
 800732e:	4639      	mov	r1, r7
 8007330:	4622      	mov	r2, r4
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff ff1a 	bl	800716c <__multiply>
 8007338:	4639      	mov	r1, r7
 800733a:	4680      	mov	r8, r0
 800733c:	4630      	mov	r0, r6
 800733e:	f7ff fe49 	bl	8006fd4 <_Bfree>
 8007342:	4647      	mov	r7, r8
 8007344:	106d      	asrs	r5, r5, #1
 8007346:	d00b      	beq.n	8007360 <__pow5mult+0xa0>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	b938      	cbnz	r0, 800735c <__pow5mult+0x9c>
 800734c:	4622      	mov	r2, r4
 800734e:	4621      	mov	r1, r4
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff ff0b 	bl	800716c <__multiply>
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f8c0 9000 	str.w	r9, [r0]
 800735c:	4604      	mov	r4, r0
 800735e:	e7e4      	b.n	800732a <__pow5mult+0x6a>
 8007360:	4638      	mov	r0, r7
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	bf00      	nop
 8007368:	08008468 	.word	0x08008468
 800736c:	0800829b 	.word	0x0800829b
 8007370:	0800831b 	.word	0x0800831b

08007374 <__lshift>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	6849      	ldr	r1, [r1, #4]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	4607      	mov	r7, r0
 8007386:	4691      	mov	r9, r2
 8007388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800738c:	f108 0601 	add.w	r6, r8, #1
 8007390:	42b3      	cmp	r3, r6
 8007392:	db0b      	blt.n	80073ac <__lshift+0x38>
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff fddd 	bl	8006f54 <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	b948      	cbnz	r0, 80073b2 <__lshift+0x3e>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b28      	ldr	r3, [pc, #160]	; (8007444 <__lshift+0xd0>)
 80073a2:	4829      	ldr	r0, [pc, #164]	; (8007448 <__lshift+0xd4>)
 80073a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80073a8:	f000 fbe4 	bl	8007b74 <__assert_func>
 80073ac:	3101      	adds	r1, #1
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	e7ee      	b.n	8007390 <__lshift+0x1c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f100 0114 	add.w	r1, r0, #20
 80073b8:	f100 0210 	add.w	r2, r0, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	4553      	cmp	r3, sl
 80073c0:	db33      	blt.n	800742a <__lshift+0xb6>
 80073c2:	6920      	ldr	r0, [r4, #16]
 80073c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c8:	f104 0314 	add.w	r3, r4, #20
 80073cc:	f019 091f 	ands.w	r9, r9, #31
 80073d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073d8:	d02b      	beq.n	8007432 <__lshift+0xbe>
 80073da:	f1c9 0e20 	rsb	lr, r9, #32
 80073de:	468a      	mov	sl, r1
 80073e0:	2200      	movs	r2, #0
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	fa00 f009 	lsl.w	r0, r0, r9
 80073e8:	4310      	orrs	r0, r2
 80073ea:	f84a 0b04 	str.w	r0, [sl], #4
 80073ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f2:	459c      	cmp	ip, r3
 80073f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f8:	d8f3      	bhi.n	80073e2 <__lshift+0x6e>
 80073fa:	ebac 0304 	sub.w	r3, ip, r4
 80073fe:	3b15      	subs	r3, #21
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	3304      	adds	r3, #4
 8007406:	f104 0015 	add.w	r0, r4, #21
 800740a:	4584      	cmp	ip, r0
 800740c:	bf38      	it	cc
 800740e:	2304      	movcc	r3, #4
 8007410:	50ca      	str	r2, [r1, r3]
 8007412:	b10a      	cbz	r2, 8007418 <__lshift+0xa4>
 8007414:	f108 0602 	add.w	r6, r8, #2
 8007418:	3e01      	subs	r6, #1
 800741a:	4638      	mov	r0, r7
 800741c:	612e      	str	r6, [r5, #16]
 800741e:	4621      	mov	r1, r4
 8007420:	f7ff fdd8 	bl	8006fd4 <_Bfree>
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	f842 0f04 	str.w	r0, [r2, #4]!
 800742e:	3301      	adds	r3, #1
 8007430:	e7c5      	b.n	80073be <__lshift+0x4a>
 8007432:	3904      	subs	r1, #4
 8007434:	f853 2b04 	ldr.w	r2, [r3], #4
 8007438:	f841 2f04 	str.w	r2, [r1, #4]!
 800743c:	459c      	cmp	ip, r3
 800743e:	d8f9      	bhi.n	8007434 <__lshift+0xc0>
 8007440:	e7ea      	b.n	8007418 <__lshift+0xa4>
 8007442:	bf00      	nop
 8007444:	0800830a 	.word	0x0800830a
 8007448:	0800831b 	.word	0x0800831b

0800744c <__mcmp>:
 800744c:	b530      	push	{r4, r5, lr}
 800744e:	6902      	ldr	r2, [r0, #16]
 8007450:	690c      	ldr	r4, [r1, #16]
 8007452:	1b12      	subs	r2, r2, r4
 8007454:	d10e      	bne.n	8007474 <__mcmp+0x28>
 8007456:	f100 0314 	add.w	r3, r0, #20
 800745a:	3114      	adds	r1, #20
 800745c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007460:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007464:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007468:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800746c:	42a5      	cmp	r5, r4
 800746e:	d003      	beq.n	8007478 <__mcmp+0x2c>
 8007470:	d305      	bcc.n	800747e <__mcmp+0x32>
 8007472:	2201      	movs	r2, #1
 8007474:	4610      	mov	r0, r2
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	4283      	cmp	r3, r0
 800747a:	d3f3      	bcc.n	8007464 <__mcmp+0x18>
 800747c:	e7fa      	b.n	8007474 <__mcmp+0x28>
 800747e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007482:	e7f7      	b.n	8007474 <__mcmp+0x28>

08007484 <__mdiff>:
 8007484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	4606      	mov	r6, r0
 800748c:	4611      	mov	r1, r2
 800748e:	4620      	mov	r0, r4
 8007490:	4690      	mov	r8, r2
 8007492:	f7ff ffdb 	bl	800744c <__mcmp>
 8007496:	1e05      	subs	r5, r0, #0
 8007498:	d110      	bne.n	80074bc <__mdiff+0x38>
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fd59 	bl	8006f54 <_Balloc>
 80074a2:	b930      	cbnz	r0, 80074b2 <__mdiff+0x2e>
 80074a4:	4b3a      	ldr	r3, [pc, #232]	; (8007590 <__mdiff+0x10c>)
 80074a6:	4602      	mov	r2, r0
 80074a8:	f240 2137 	movw	r1, #567	; 0x237
 80074ac:	4839      	ldr	r0, [pc, #228]	; (8007594 <__mdiff+0x110>)
 80074ae:	f000 fb61 	bl	8007b74 <__assert_func>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	bfa4      	itt	ge
 80074be:	4643      	movge	r3, r8
 80074c0:	46a0      	movge	r8, r4
 80074c2:	4630      	mov	r0, r6
 80074c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074c8:	bfa6      	itte	ge
 80074ca:	461c      	movge	r4, r3
 80074cc:	2500      	movge	r5, #0
 80074ce:	2501      	movlt	r5, #1
 80074d0:	f7ff fd40 	bl	8006f54 <_Balloc>
 80074d4:	b920      	cbnz	r0, 80074e0 <__mdiff+0x5c>
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <__mdiff+0x10c>)
 80074d8:	4602      	mov	r2, r0
 80074da:	f240 2145 	movw	r1, #581	; 0x245
 80074de:	e7e5      	b.n	80074ac <__mdiff+0x28>
 80074e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074e4:	6926      	ldr	r6, [r4, #16]
 80074e6:	60c5      	str	r5, [r0, #12]
 80074e8:	f104 0914 	add.w	r9, r4, #20
 80074ec:	f108 0514 	add.w	r5, r8, #20
 80074f0:	f100 0e14 	add.w	lr, r0, #20
 80074f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074fc:	f108 0210 	add.w	r2, r8, #16
 8007500:	46f2      	mov	sl, lr
 8007502:	2100      	movs	r1, #0
 8007504:	f859 3b04 	ldr.w	r3, [r9], #4
 8007508:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800750c:	fa11 f88b 	uxtah	r8, r1, fp
 8007510:	b299      	uxth	r1, r3
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	eba8 0801 	sub.w	r8, r8, r1
 8007518:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800751c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007520:	fa1f f888 	uxth.w	r8, r8
 8007524:	1419      	asrs	r1, r3, #16
 8007526:	454e      	cmp	r6, r9
 8007528:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800752c:	f84a 3b04 	str.w	r3, [sl], #4
 8007530:	d8e8      	bhi.n	8007504 <__mdiff+0x80>
 8007532:	1b33      	subs	r3, r6, r4
 8007534:	3b15      	subs	r3, #21
 8007536:	f023 0303 	bic.w	r3, r3, #3
 800753a:	3304      	adds	r3, #4
 800753c:	3415      	adds	r4, #21
 800753e:	42a6      	cmp	r6, r4
 8007540:	bf38      	it	cc
 8007542:	2304      	movcc	r3, #4
 8007544:	441d      	add	r5, r3
 8007546:	4473      	add	r3, lr
 8007548:	469e      	mov	lr, r3
 800754a:	462e      	mov	r6, r5
 800754c:	4566      	cmp	r6, ip
 800754e:	d30e      	bcc.n	800756e <__mdiff+0xea>
 8007550:	f10c 0203 	add.w	r2, ip, #3
 8007554:	1b52      	subs	r2, r2, r5
 8007556:	f022 0203 	bic.w	r2, r2, #3
 800755a:	3d03      	subs	r5, #3
 800755c:	45ac      	cmp	ip, r5
 800755e:	bf38      	it	cc
 8007560:	2200      	movcc	r2, #0
 8007562:	4413      	add	r3, r2
 8007564:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007568:	b17a      	cbz	r2, 800758a <__mdiff+0x106>
 800756a:	6107      	str	r7, [r0, #16]
 800756c:	e7a4      	b.n	80074b8 <__mdiff+0x34>
 800756e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007572:	fa11 f288 	uxtah	r2, r1, r8
 8007576:	1414      	asrs	r4, r2, #16
 8007578:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800757c:	b292      	uxth	r2, r2
 800757e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007582:	f84e 2b04 	str.w	r2, [lr], #4
 8007586:	1421      	asrs	r1, r4, #16
 8007588:	e7e0      	b.n	800754c <__mdiff+0xc8>
 800758a:	3f01      	subs	r7, #1
 800758c:	e7ea      	b.n	8007564 <__mdiff+0xe0>
 800758e:	bf00      	nop
 8007590:	0800830a 	.word	0x0800830a
 8007594:	0800831b 	.word	0x0800831b

08007598 <__d2b>:
 8007598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800759c:	460f      	mov	r7, r1
 800759e:	2101      	movs	r1, #1
 80075a0:	ec59 8b10 	vmov	r8, r9, d0
 80075a4:	4616      	mov	r6, r2
 80075a6:	f7ff fcd5 	bl	8006f54 <_Balloc>
 80075aa:	4604      	mov	r4, r0
 80075ac:	b930      	cbnz	r0, 80075bc <__d2b+0x24>
 80075ae:	4602      	mov	r2, r0
 80075b0:	4b24      	ldr	r3, [pc, #144]	; (8007644 <__d2b+0xac>)
 80075b2:	4825      	ldr	r0, [pc, #148]	; (8007648 <__d2b+0xb0>)
 80075b4:	f240 310f 	movw	r1, #783	; 0x30f
 80075b8:	f000 fadc 	bl	8007b74 <__assert_func>
 80075bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075c4:	bb2d      	cbnz	r5, 8007612 <__d2b+0x7a>
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	f1b8 0300 	subs.w	r3, r8, #0
 80075cc:	d026      	beq.n	800761c <__d2b+0x84>
 80075ce:	4668      	mov	r0, sp
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	f7ff fd87 	bl	80070e4 <__lo0bits>
 80075d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075da:	b1e8      	cbz	r0, 8007618 <__d2b+0x80>
 80075dc:	f1c0 0320 	rsb	r3, r0, #32
 80075e0:	fa02 f303 	lsl.w	r3, r2, r3
 80075e4:	430b      	orrs	r3, r1
 80075e6:	40c2      	lsrs	r2, r0
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	9201      	str	r2, [sp, #4]
 80075ec:	9b01      	ldr	r3, [sp, #4]
 80075ee:	61a3      	str	r3, [r4, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bf14      	ite	ne
 80075f4:	2202      	movne	r2, #2
 80075f6:	2201      	moveq	r2, #1
 80075f8:	6122      	str	r2, [r4, #16]
 80075fa:	b1bd      	cbz	r5, 800762c <__d2b+0x94>
 80075fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007600:	4405      	add	r5, r0
 8007602:	603d      	str	r5, [r7, #0]
 8007604:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007608:	6030      	str	r0, [r6, #0]
 800760a:	4620      	mov	r0, r4
 800760c:	b003      	add	sp, #12
 800760e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007616:	e7d6      	b.n	80075c6 <__d2b+0x2e>
 8007618:	6161      	str	r1, [r4, #20]
 800761a:	e7e7      	b.n	80075ec <__d2b+0x54>
 800761c:	a801      	add	r0, sp, #4
 800761e:	f7ff fd61 	bl	80070e4 <__lo0bits>
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	6163      	str	r3, [r4, #20]
 8007626:	3020      	adds	r0, #32
 8007628:	2201      	movs	r2, #1
 800762a:	e7e5      	b.n	80075f8 <__d2b+0x60>
 800762c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007630:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007634:	6038      	str	r0, [r7, #0]
 8007636:	6918      	ldr	r0, [r3, #16]
 8007638:	f7ff fd34 	bl	80070a4 <__hi0bits>
 800763c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007640:	e7e2      	b.n	8007608 <__d2b+0x70>
 8007642:	bf00      	nop
 8007644:	0800830a 	.word	0x0800830a
 8007648:	0800831b 	.word	0x0800831b

0800764c <__sfputc_r>:
 800764c:	6893      	ldr	r3, [r2, #8]
 800764e:	3b01      	subs	r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	b410      	push	{r4}
 8007654:	6093      	str	r3, [r2, #8]
 8007656:	da08      	bge.n	800766a <__sfputc_r+0x1e>
 8007658:	6994      	ldr	r4, [r2, #24]
 800765a:	42a3      	cmp	r3, r4
 800765c:	db01      	blt.n	8007662 <__sfputc_r+0x16>
 800765e:	290a      	cmp	r1, #10
 8007660:	d103      	bne.n	800766a <__sfputc_r+0x1e>
 8007662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007666:	f7fe bbe6 	b.w	8005e36 <__swbuf_r>
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	1c58      	adds	r0, r3, #1
 800766e:	6010      	str	r0, [r2, #0]
 8007670:	7019      	strb	r1, [r3, #0]
 8007672:	4608      	mov	r0, r1
 8007674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007678:	4770      	bx	lr

0800767a <__sfputs_r>:
 800767a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767c:	4606      	mov	r6, r0
 800767e:	460f      	mov	r7, r1
 8007680:	4614      	mov	r4, r2
 8007682:	18d5      	adds	r5, r2, r3
 8007684:	42ac      	cmp	r4, r5
 8007686:	d101      	bne.n	800768c <__sfputs_r+0x12>
 8007688:	2000      	movs	r0, #0
 800768a:	e007      	b.n	800769c <__sfputs_r+0x22>
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	463a      	mov	r2, r7
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffda 	bl	800764c <__sfputc_r>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d1f3      	bne.n	8007684 <__sfputs_r+0xa>
 800769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076a0 <_vfiprintf_r>:
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	460d      	mov	r5, r1
 80076a6:	b09d      	sub	sp, #116	; 0x74
 80076a8:	4614      	mov	r4, r2
 80076aa:	4698      	mov	r8, r3
 80076ac:	4606      	mov	r6, r0
 80076ae:	b118      	cbz	r0, 80076b8 <_vfiprintf_r+0x18>
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b90b      	cbnz	r3, 80076b8 <_vfiprintf_r+0x18>
 80076b4:	f7fe fad8 	bl	8005c68 <__sinit>
 80076b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d405      	bmi.n	80076ca <_vfiprintf_r+0x2a>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	059a      	lsls	r2, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_vfiprintf_r+0x2a>
 80076c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076c6:	f7fe fcc8 	bl	800605a <__retarget_lock_acquire_recursive>
 80076ca:	89ab      	ldrh	r3, [r5, #12]
 80076cc:	071b      	lsls	r3, r3, #28
 80076ce:	d501      	bpl.n	80076d4 <_vfiprintf_r+0x34>
 80076d0:	692b      	ldr	r3, [r5, #16]
 80076d2:	b99b      	cbnz	r3, 80076fc <_vfiprintf_r+0x5c>
 80076d4:	4629      	mov	r1, r5
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7fe fbea 	bl	8005eb0 <__swsetup_r>
 80076dc:	b170      	cbz	r0, 80076fc <_vfiprintf_r+0x5c>
 80076de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e0:	07dc      	lsls	r4, r3, #31
 80076e2:	d504      	bpl.n	80076ee <_vfiprintf_r+0x4e>
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076e8:	b01d      	add	sp, #116	; 0x74
 80076ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	0598      	lsls	r0, r3, #22
 80076f2:	d4f7      	bmi.n	80076e4 <_vfiprintf_r+0x44>
 80076f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f6:	f7fe fcb1 	bl	800605c <__retarget_lock_release_recursive>
 80076fa:	e7f3      	b.n	80076e4 <_vfiprintf_r+0x44>
 80076fc:	2300      	movs	r3, #0
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	2320      	movs	r3, #32
 8007702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007706:	f8cd 800c 	str.w	r8, [sp, #12]
 800770a:	2330      	movs	r3, #48	; 0x30
 800770c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078c0 <_vfiprintf_r+0x220>
 8007710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007714:	f04f 0901 	mov.w	r9, #1
 8007718:	4623      	mov	r3, r4
 800771a:	469a      	mov	sl, r3
 800771c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007720:	b10a      	cbz	r2, 8007726 <_vfiprintf_r+0x86>
 8007722:	2a25      	cmp	r2, #37	; 0x25
 8007724:	d1f9      	bne.n	800771a <_vfiprintf_r+0x7a>
 8007726:	ebba 0b04 	subs.w	fp, sl, r4
 800772a:	d00b      	beq.n	8007744 <_vfiprintf_r+0xa4>
 800772c:	465b      	mov	r3, fp
 800772e:	4622      	mov	r2, r4
 8007730:	4629      	mov	r1, r5
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ffa1 	bl	800767a <__sfputs_r>
 8007738:	3001      	adds	r0, #1
 800773a:	f000 80a9 	beq.w	8007890 <_vfiprintf_r+0x1f0>
 800773e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007740:	445a      	add	r2, fp
 8007742:	9209      	str	r2, [sp, #36]	; 0x24
 8007744:	f89a 3000 	ldrb.w	r3, [sl]
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80a1 	beq.w	8007890 <_vfiprintf_r+0x1f0>
 800774e:	2300      	movs	r3, #0
 8007750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007758:	f10a 0a01 	add.w	sl, sl, #1
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	9307      	str	r3, [sp, #28]
 8007760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007764:	931a      	str	r3, [sp, #104]	; 0x68
 8007766:	4654      	mov	r4, sl
 8007768:	2205      	movs	r2, #5
 800776a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776e:	4854      	ldr	r0, [pc, #336]	; (80078c0 <_vfiprintf_r+0x220>)
 8007770:	f7f8 fd4e 	bl	8000210 <memchr>
 8007774:	9a04      	ldr	r2, [sp, #16]
 8007776:	b9d8      	cbnz	r0, 80077b0 <_vfiprintf_r+0x110>
 8007778:	06d1      	lsls	r1, r2, #27
 800777a:	bf44      	itt	mi
 800777c:	2320      	movmi	r3, #32
 800777e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007782:	0713      	lsls	r3, r2, #28
 8007784:	bf44      	itt	mi
 8007786:	232b      	movmi	r3, #43	; 0x2b
 8007788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778c:	f89a 3000 	ldrb.w	r3, [sl]
 8007790:	2b2a      	cmp	r3, #42	; 0x2a
 8007792:	d015      	beq.n	80077c0 <_vfiprintf_r+0x120>
 8007794:	9a07      	ldr	r2, [sp, #28]
 8007796:	4654      	mov	r4, sl
 8007798:	2000      	movs	r0, #0
 800779a:	f04f 0c0a 	mov.w	ip, #10
 800779e:	4621      	mov	r1, r4
 80077a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a4:	3b30      	subs	r3, #48	; 0x30
 80077a6:	2b09      	cmp	r3, #9
 80077a8:	d94d      	bls.n	8007846 <_vfiprintf_r+0x1a6>
 80077aa:	b1b0      	cbz	r0, 80077da <_vfiprintf_r+0x13a>
 80077ac:	9207      	str	r2, [sp, #28]
 80077ae:	e014      	b.n	80077da <_vfiprintf_r+0x13a>
 80077b0:	eba0 0308 	sub.w	r3, r0, r8
 80077b4:	fa09 f303 	lsl.w	r3, r9, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	46a2      	mov	sl, r4
 80077be:	e7d2      	b.n	8007766 <_vfiprintf_r+0xc6>
 80077c0:	9b03      	ldr	r3, [sp, #12]
 80077c2:	1d19      	adds	r1, r3, #4
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	9103      	str	r1, [sp, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bfbb      	ittet	lt
 80077cc:	425b      	neglt	r3, r3
 80077ce:	f042 0202 	orrlt.w	r2, r2, #2
 80077d2:	9307      	strge	r3, [sp, #28]
 80077d4:	9307      	strlt	r3, [sp, #28]
 80077d6:	bfb8      	it	lt
 80077d8:	9204      	strlt	r2, [sp, #16]
 80077da:	7823      	ldrb	r3, [r4, #0]
 80077dc:	2b2e      	cmp	r3, #46	; 0x2e
 80077de:	d10c      	bne.n	80077fa <_vfiprintf_r+0x15a>
 80077e0:	7863      	ldrb	r3, [r4, #1]
 80077e2:	2b2a      	cmp	r3, #42	; 0x2a
 80077e4:	d134      	bne.n	8007850 <_vfiprintf_r+0x1b0>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9203      	str	r2, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfb8      	it	lt
 80077f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077f6:	3402      	adds	r4, #2
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078d0 <_vfiprintf_r+0x230>
 80077fe:	7821      	ldrb	r1, [r4, #0]
 8007800:	2203      	movs	r2, #3
 8007802:	4650      	mov	r0, sl
 8007804:	f7f8 fd04 	bl	8000210 <memchr>
 8007808:	b138      	cbz	r0, 800781a <_vfiprintf_r+0x17a>
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	eba0 000a 	sub.w	r0, r0, sl
 8007810:	2240      	movs	r2, #64	; 0x40
 8007812:	4082      	lsls	r2, r0
 8007814:	4313      	orrs	r3, r2
 8007816:	3401      	adds	r4, #1
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	4829      	ldr	r0, [pc, #164]	; (80078c4 <_vfiprintf_r+0x224>)
 8007820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007824:	2206      	movs	r2, #6
 8007826:	f7f8 fcf3 	bl	8000210 <memchr>
 800782a:	2800      	cmp	r0, #0
 800782c:	d03f      	beq.n	80078ae <_vfiprintf_r+0x20e>
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <_vfiprintf_r+0x228>)
 8007830:	bb1b      	cbnz	r3, 800787a <_vfiprintf_r+0x1da>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	3307      	adds	r3, #7
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	3308      	adds	r3, #8
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	443b      	add	r3, r7
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	e768      	b.n	8007718 <_vfiprintf_r+0x78>
 8007846:	fb0c 3202 	mla	r2, ip, r2, r3
 800784a:	460c      	mov	r4, r1
 800784c:	2001      	movs	r0, #1
 800784e:	e7a6      	b.n	800779e <_vfiprintf_r+0xfe>
 8007850:	2300      	movs	r3, #0
 8007852:	3401      	adds	r4, #1
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	4619      	mov	r1, r3
 8007858:	f04f 0c0a 	mov.w	ip, #10
 800785c:	4620      	mov	r0, r4
 800785e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007862:	3a30      	subs	r2, #48	; 0x30
 8007864:	2a09      	cmp	r2, #9
 8007866:	d903      	bls.n	8007870 <_vfiprintf_r+0x1d0>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0c6      	beq.n	80077fa <_vfiprintf_r+0x15a>
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e7c4      	b.n	80077fa <_vfiprintf_r+0x15a>
 8007870:	fb0c 2101 	mla	r1, ip, r1, r2
 8007874:	4604      	mov	r4, r0
 8007876:	2301      	movs	r3, #1
 8007878:	e7f0      	b.n	800785c <_vfiprintf_r+0x1bc>
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462a      	mov	r2, r5
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <_vfiprintf_r+0x22c>)
 8007882:	a904      	add	r1, sp, #16
 8007884:	4630      	mov	r0, r6
 8007886:	f7fd fd9d 	bl	80053c4 <_printf_float>
 800788a:	4607      	mov	r7, r0
 800788c:	1c78      	adds	r0, r7, #1
 800788e:	d1d6      	bne.n	800783e <_vfiprintf_r+0x19e>
 8007890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007892:	07d9      	lsls	r1, r3, #31
 8007894:	d405      	bmi.n	80078a2 <_vfiprintf_r+0x202>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	059a      	lsls	r2, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_vfiprintf_r+0x202>
 800789c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789e:	f7fe fbdd 	bl	800605c <__retarget_lock_release_recursive>
 80078a2:	89ab      	ldrh	r3, [r5, #12]
 80078a4:	065b      	lsls	r3, r3, #25
 80078a6:	f53f af1d 	bmi.w	80076e4 <_vfiprintf_r+0x44>
 80078aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ac:	e71c      	b.n	80076e8 <_vfiprintf_r+0x48>
 80078ae:	ab03      	add	r3, sp, #12
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_vfiprintf_r+0x22c>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7fe f827 	bl	800590c <_printf_i>
 80078be:	e7e4      	b.n	800788a <_vfiprintf_r+0x1ea>
 80078c0:	08008474 	.word	0x08008474
 80078c4:	0800847e 	.word	0x0800847e
 80078c8:	080053c5 	.word	0x080053c5
 80078cc:	0800767b 	.word	0x0800767b
 80078d0:	0800847a 	.word	0x0800847a

080078d4 <__sflush_r>:
 80078d4:	898a      	ldrh	r2, [r1, #12]
 80078d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078da:	4605      	mov	r5, r0
 80078dc:	0710      	lsls	r0, r2, #28
 80078de:	460c      	mov	r4, r1
 80078e0:	d458      	bmi.n	8007994 <__sflush_r+0xc0>
 80078e2:	684b      	ldr	r3, [r1, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dc05      	bgt.n	80078f4 <__sflush_r+0x20>
 80078e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dc02      	bgt.n	80078f4 <__sflush_r+0x20>
 80078ee:	2000      	movs	r0, #0
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	d0f9      	beq.n	80078ee <__sflush_r+0x1a>
 80078fa:	2300      	movs	r3, #0
 80078fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007900:	682f      	ldr	r7, [r5, #0]
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	d032      	beq.n	800796e <__sflush_r+0x9a>
 8007908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	075a      	lsls	r2, r3, #29
 800790e:	d505      	bpl.n	800791c <__sflush_r+0x48>
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	1ac0      	subs	r0, r0, r3
 8007914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007916:	b10b      	cbz	r3, 800791c <__sflush_r+0x48>
 8007918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800791a:	1ac0      	subs	r0, r0, r3
 800791c:	2300      	movs	r3, #0
 800791e:	4602      	mov	r2, r0
 8007920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007922:	6a21      	ldr	r1, [r4, #32]
 8007924:	4628      	mov	r0, r5
 8007926:	47b0      	blx	r6
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	d106      	bne.n	800793c <__sflush_r+0x68>
 800792e:	6829      	ldr	r1, [r5, #0]
 8007930:	291d      	cmp	r1, #29
 8007932:	d82b      	bhi.n	800798c <__sflush_r+0xb8>
 8007934:	4a29      	ldr	r2, [pc, #164]	; (80079dc <__sflush_r+0x108>)
 8007936:	410a      	asrs	r2, r1
 8007938:	07d6      	lsls	r6, r2, #31
 800793a:	d427      	bmi.n	800798c <__sflush_r+0xb8>
 800793c:	2200      	movs	r2, #0
 800793e:	6062      	str	r2, [r4, #4]
 8007940:	04d9      	lsls	r1, r3, #19
 8007942:	6922      	ldr	r2, [r4, #16]
 8007944:	6022      	str	r2, [r4, #0]
 8007946:	d504      	bpl.n	8007952 <__sflush_r+0x7e>
 8007948:	1c42      	adds	r2, r0, #1
 800794a:	d101      	bne.n	8007950 <__sflush_r+0x7c>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b903      	cbnz	r3, 8007952 <__sflush_r+0x7e>
 8007950:	6560      	str	r0, [r4, #84]	; 0x54
 8007952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007954:	602f      	str	r7, [r5, #0]
 8007956:	2900      	cmp	r1, #0
 8007958:	d0c9      	beq.n	80078ee <__sflush_r+0x1a>
 800795a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800795e:	4299      	cmp	r1, r3
 8007960:	d002      	beq.n	8007968 <__sflush_r+0x94>
 8007962:	4628      	mov	r0, r5
 8007964:	f7ff f9f6 	bl	8006d54 <_free_r>
 8007968:	2000      	movs	r0, #0
 800796a:	6360      	str	r0, [r4, #52]	; 0x34
 800796c:	e7c0      	b.n	80078f0 <__sflush_r+0x1c>
 800796e:	2301      	movs	r3, #1
 8007970:	4628      	mov	r0, r5
 8007972:	47b0      	blx	r6
 8007974:	1c41      	adds	r1, r0, #1
 8007976:	d1c8      	bne.n	800790a <__sflush_r+0x36>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0c5      	beq.n	800790a <__sflush_r+0x36>
 800797e:	2b1d      	cmp	r3, #29
 8007980:	d001      	beq.n	8007986 <__sflush_r+0xb2>
 8007982:	2b16      	cmp	r3, #22
 8007984:	d101      	bne.n	800798a <__sflush_r+0xb6>
 8007986:	602f      	str	r7, [r5, #0]
 8007988:	e7b1      	b.n	80078ee <__sflush_r+0x1a>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007990:	81a3      	strh	r3, [r4, #12]
 8007992:	e7ad      	b.n	80078f0 <__sflush_r+0x1c>
 8007994:	690f      	ldr	r7, [r1, #16]
 8007996:	2f00      	cmp	r7, #0
 8007998:	d0a9      	beq.n	80078ee <__sflush_r+0x1a>
 800799a:	0793      	lsls	r3, r2, #30
 800799c:	680e      	ldr	r6, [r1, #0]
 800799e:	bf08      	it	eq
 80079a0:	694b      	ldreq	r3, [r1, #20]
 80079a2:	600f      	str	r7, [r1, #0]
 80079a4:	bf18      	it	ne
 80079a6:	2300      	movne	r3, #0
 80079a8:	eba6 0807 	sub.w	r8, r6, r7
 80079ac:	608b      	str	r3, [r1, #8]
 80079ae:	f1b8 0f00 	cmp.w	r8, #0
 80079b2:	dd9c      	ble.n	80078ee <__sflush_r+0x1a>
 80079b4:	6a21      	ldr	r1, [r4, #32]
 80079b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079b8:	4643      	mov	r3, r8
 80079ba:	463a      	mov	r2, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	47b0      	blx	r6
 80079c0:	2800      	cmp	r0, #0
 80079c2:	dc06      	bgt.n	80079d2 <__sflush_r+0xfe>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079d0:	e78e      	b.n	80078f0 <__sflush_r+0x1c>
 80079d2:	4407      	add	r7, r0
 80079d4:	eba8 0800 	sub.w	r8, r8, r0
 80079d8:	e7e9      	b.n	80079ae <__sflush_r+0xda>
 80079da:	bf00      	nop
 80079dc:	dfbffffe 	.word	0xdfbffffe

080079e0 <_fflush_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	690b      	ldr	r3, [r1, #16]
 80079e4:	4605      	mov	r5, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b913      	cbnz	r3, 80079f0 <_fflush_r+0x10>
 80079ea:	2500      	movs	r5, #0
 80079ec:	4628      	mov	r0, r5
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	b118      	cbz	r0, 80079fa <_fflush_r+0x1a>
 80079f2:	6a03      	ldr	r3, [r0, #32]
 80079f4:	b90b      	cbnz	r3, 80079fa <_fflush_r+0x1a>
 80079f6:	f7fe f937 	bl	8005c68 <__sinit>
 80079fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f3      	beq.n	80079ea <_fflush_r+0xa>
 8007a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a04:	07d0      	lsls	r0, r2, #31
 8007a06:	d404      	bmi.n	8007a12 <_fflush_r+0x32>
 8007a08:	0599      	lsls	r1, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_fflush_r+0x32>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0e:	f7fe fb24 	bl	800605a <__retarget_lock_acquire_recursive>
 8007a12:	4628      	mov	r0, r5
 8007a14:	4621      	mov	r1, r4
 8007a16:	f7ff ff5d 	bl	80078d4 <__sflush_r>
 8007a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a1c:	07da      	lsls	r2, r3, #31
 8007a1e:	4605      	mov	r5, r0
 8007a20:	d4e4      	bmi.n	80079ec <_fflush_r+0xc>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	059b      	lsls	r3, r3, #22
 8007a26:	d4e1      	bmi.n	80079ec <_fflush_r+0xc>
 8007a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2a:	f7fe fb17 	bl	800605c <__retarget_lock_release_recursive>
 8007a2e:	e7dd      	b.n	80079ec <_fflush_r+0xc>

08007a30 <__swhatbuf_r>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	460c      	mov	r4, r1
 8007a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	b096      	sub	sp, #88	; 0x58
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	461e      	mov	r6, r3
 8007a40:	da0d      	bge.n	8007a5e <__swhatbuf_r+0x2e>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	bf0c      	ite	eq
 8007a4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a52:	2340      	movne	r3, #64	; 0x40
 8007a54:	2000      	movs	r0, #0
 8007a56:	6031      	str	r1, [r6, #0]
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	b016      	add	sp, #88	; 0x58
 8007a5c:	bd70      	pop	{r4, r5, r6, pc}
 8007a5e:	466a      	mov	r2, sp
 8007a60:	f000 f848 	bl	8007af4 <_fstat_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	dbec      	blt.n	8007a42 <__swhatbuf_r+0x12>
 8007a68:	9901      	ldr	r1, [sp, #4]
 8007a6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a72:	4259      	negs	r1, r3
 8007a74:	4159      	adcs	r1, r3
 8007a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a7a:	e7eb      	b.n	8007a54 <__swhatbuf_r+0x24>

08007a7c <__smakebuf_r>:
 8007a7c:	898b      	ldrh	r3, [r1, #12]
 8007a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a80:	079d      	lsls	r5, r3, #30
 8007a82:	4606      	mov	r6, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	d507      	bpl.n	8007a98 <__smakebuf_r+0x1c>
 8007a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	6123      	str	r3, [r4, #16]
 8007a90:	2301      	movs	r3, #1
 8007a92:	6163      	str	r3, [r4, #20]
 8007a94:	b002      	add	sp, #8
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	ab01      	add	r3, sp, #4
 8007a9a:	466a      	mov	r2, sp
 8007a9c:	f7ff ffc8 	bl	8007a30 <__swhatbuf_r>
 8007aa0:	9900      	ldr	r1, [sp, #0]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff f9c9 	bl	8006e3c <_malloc_r>
 8007aaa:	b948      	cbnz	r0, 8007ac0 <__smakebuf_r+0x44>
 8007aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab0:	059a      	lsls	r2, r3, #22
 8007ab2:	d4ef      	bmi.n	8007a94 <__smakebuf_r+0x18>
 8007ab4:	f023 0303 	bic.w	r3, r3, #3
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	81a3      	strh	r3, [r4, #12]
 8007abe:	e7e3      	b.n	8007a88 <__smakebuf_r+0xc>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	6020      	str	r0, [r4, #0]
 8007ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	9b00      	ldr	r3, [sp, #0]
 8007acc:	6163      	str	r3, [r4, #20]
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	6120      	str	r0, [r4, #16]
 8007ad2:	b15b      	cbz	r3, 8007aec <__smakebuf_r+0x70>
 8007ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 f81d 	bl	8007b18 <_isatty_r>
 8007ade:	b128      	cbz	r0, 8007aec <__smakebuf_r+0x70>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	431d      	orrs	r5, r3
 8007af0:	81a5      	strh	r5, [r4, #12]
 8007af2:	e7cf      	b.n	8007a94 <__smakebuf_r+0x18>

08007af4 <_fstat_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	4d07      	ldr	r5, [pc, #28]	; (8007b14 <_fstat_r+0x20>)
 8007af8:	2300      	movs	r3, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	f7f9 fd2a 	bl	800155a <_fstat>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d102      	bne.n	8007b10 <_fstat_r+0x1c>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b103      	cbz	r3, 8007b10 <_fstat_r+0x1c>
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	bf00      	nop
 8007b14:	200004c4 	.word	0x200004c4

08007b18 <_isatty_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	; (8007b34 <_isatty_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7f9 fd29 	bl	800157a <_isatty>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_isatty_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_isatty_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	200004c4 	.word	0x200004c4

08007b38 <_sbrk_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d06      	ldr	r5, [pc, #24]	; (8007b54 <_sbrk_r+0x1c>)
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	f7f9 fd32 	bl	80015ac <_sbrk>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_sbrk_r+0x1a>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_sbrk_r+0x1a>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	200004c4 	.word	0x200004c4

08007b58 <memcpy>:
 8007b58:	440a      	add	r2, r1
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007b60:	d100      	bne.n	8007b64 <memcpy+0xc>
 8007b62:	4770      	bx	lr
 8007b64:	b510      	push	{r4, lr}
 8007b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	d1f9      	bne.n	8007b66 <memcpy+0xe>
 8007b72:	bd10      	pop	{r4, pc}

08007b74 <__assert_func>:
 8007b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b76:	4614      	mov	r4, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <__assert_func+0x2c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4605      	mov	r5, r0
 8007b80:	68d8      	ldr	r0, [r3, #12]
 8007b82:	b14c      	cbz	r4, 8007b98 <__assert_func+0x24>
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <__assert_func+0x30>)
 8007b86:	9100      	str	r1, [sp, #0]
 8007b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b8c:	4906      	ldr	r1, [pc, #24]	; (8007ba8 <__assert_func+0x34>)
 8007b8e:	462b      	mov	r3, r5
 8007b90:	f000 f844 	bl	8007c1c <fiprintf>
 8007b94:	f000 f854 	bl	8007c40 <abort>
 8007b98:	4b04      	ldr	r3, [pc, #16]	; (8007bac <__assert_func+0x38>)
 8007b9a:	461c      	mov	r4, r3
 8007b9c:	e7f3      	b.n	8007b86 <__assert_func+0x12>
 8007b9e:	bf00      	nop
 8007ba0:	200000b4 	.word	0x200000b4
 8007ba4:	0800848f 	.word	0x0800848f
 8007ba8:	0800849c 	.word	0x0800849c
 8007bac:	080084ca 	.word	0x080084ca

08007bb0 <_calloc_r>:
 8007bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb2:	fba1 2402 	umull	r2, r4, r1, r2
 8007bb6:	b94c      	cbnz	r4, 8007bcc <_calloc_r+0x1c>
 8007bb8:	4611      	mov	r1, r2
 8007bba:	9201      	str	r2, [sp, #4]
 8007bbc:	f7ff f93e 	bl	8006e3c <_malloc_r>
 8007bc0:	9a01      	ldr	r2, [sp, #4]
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	b930      	cbnz	r0, 8007bd4 <_calloc_r+0x24>
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	b003      	add	sp, #12
 8007bca:	bd30      	pop	{r4, r5, pc}
 8007bcc:	220c      	movs	r2, #12
 8007bce:	6002      	str	r2, [r0, #0]
 8007bd0:	2500      	movs	r5, #0
 8007bd2:	e7f8      	b.n	8007bc6 <_calloc_r+0x16>
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f7fe f9c3 	bl	8005f60 <memset>
 8007bda:	e7f4      	b.n	8007bc6 <_calloc_r+0x16>

08007bdc <__ascii_mbtowc>:
 8007bdc:	b082      	sub	sp, #8
 8007bde:	b901      	cbnz	r1, 8007be2 <__ascii_mbtowc+0x6>
 8007be0:	a901      	add	r1, sp, #4
 8007be2:	b142      	cbz	r2, 8007bf6 <__ascii_mbtowc+0x1a>
 8007be4:	b14b      	cbz	r3, 8007bfa <__ascii_mbtowc+0x1e>
 8007be6:	7813      	ldrb	r3, [r2, #0]
 8007be8:	600b      	str	r3, [r1, #0]
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	1e10      	subs	r0, r2, #0
 8007bee:	bf18      	it	ne
 8007bf0:	2001      	movne	r0, #1
 8007bf2:	b002      	add	sp, #8
 8007bf4:	4770      	bx	lr
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	e7fb      	b.n	8007bf2 <__ascii_mbtowc+0x16>
 8007bfa:	f06f 0001 	mvn.w	r0, #1
 8007bfe:	e7f8      	b.n	8007bf2 <__ascii_mbtowc+0x16>

08007c00 <__ascii_wctomb>:
 8007c00:	b149      	cbz	r1, 8007c16 <__ascii_wctomb+0x16>
 8007c02:	2aff      	cmp	r2, #255	; 0xff
 8007c04:	bf85      	ittet	hi
 8007c06:	238a      	movhi	r3, #138	; 0x8a
 8007c08:	6003      	strhi	r3, [r0, #0]
 8007c0a:	700a      	strbls	r2, [r1, #0]
 8007c0c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007c10:	bf98      	it	ls
 8007c12:	2001      	movls	r0, #1
 8007c14:	4770      	bx	lr
 8007c16:	4608      	mov	r0, r1
 8007c18:	4770      	bx	lr
	...

08007c1c <fiprintf>:
 8007c1c:	b40e      	push	{r1, r2, r3}
 8007c1e:	b503      	push	{r0, r1, lr}
 8007c20:	4601      	mov	r1, r0
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	4805      	ldr	r0, [pc, #20]	; (8007c3c <fiprintf+0x20>)
 8007c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	f7ff fd37 	bl	80076a0 <_vfiprintf_r>
 8007c32:	b002      	add	sp, #8
 8007c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c38:	b003      	add	sp, #12
 8007c3a:	4770      	bx	lr
 8007c3c:	200000b4 	.word	0x200000b4

08007c40 <abort>:
 8007c40:	b508      	push	{r3, lr}
 8007c42:	2006      	movs	r0, #6
 8007c44:	f000 f82c 	bl	8007ca0 <raise>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f7f9 fc37 	bl	80014bc <_exit>

08007c4e <_raise_r>:
 8007c4e:	291f      	cmp	r1, #31
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4604      	mov	r4, r0
 8007c54:	460d      	mov	r5, r1
 8007c56:	d904      	bls.n	8007c62 <_raise_r+0x14>
 8007c58:	2316      	movs	r3, #22
 8007c5a:	6003      	str	r3, [r0, #0]
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c64:	b112      	cbz	r2, 8007c6c <_raise_r+0x1e>
 8007c66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c6a:	b94b      	cbnz	r3, 8007c80 <_raise_r+0x32>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 f831 	bl	8007cd4 <_getpid_r>
 8007c72:	462a      	mov	r2, r5
 8007c74:	4601      	mov	r1, r0
 8007c76:	4620      	mov	r0, r4
 8007c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7c:	f000 b818 	b.w	8007cb0 <_kill_r>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d00a      	beq.n	8007c9a <_raise_r+0x4c>
 8007c84:	1c59      	adds	r1, r3, #1
 8007c86:	d103      	bne.n	8007c90 <_raise_r+0x42>
 8007c88:	2316      	movs	r3, #22
 8007c8a:	6003      	str	r3, [r0, #0]
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	e7e7      	b.n	8007c60 <_raise_r+0x12>
 8007c90:	2400      	movs	r4, #0
 8007c92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c96:	4628      	mov	r0, r5
 8007c98:	4798      	blx	r3
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e7e0      	b.n	8007c60 <_raise_r+0x12>
	...

08007ca0 <raise>:
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <raise+0xc>)
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	f7ff bfd2 	b.w	8007c4e <_raise_r>
 8007caa:	bf00      	nop
 8007cac:	200000b4 	.word	0x200000b4

08007cb0 <_kill_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	; (8007cd0 <_kill_r+0x20>)
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f7f9 fbed 	bl	800149c <_kill>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d102      	bne.n	8007ccc <_kill_r+0x1c>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b103      	cbz	r3, 8007ccc <_kill_r+0x1c>
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	200004c4 	.word	0x200004c4

08007cd4 <_getpid_r>:
 8007cd4:	f7f9 bbda 	b.w	800148c <_getpid>

08007cd8 <_init>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr

08007ce4 <_fini>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr
